"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[7808],{32300:(e,d,a)=>{a.r(d),a.d(d,{data:()=>r});const r={key:"v-f8f7624c",path:"/ddd/05%20DDD%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/ddd/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"DDD分层架构",slug:"ddd分层架构",children:[{level:3,title:"用户接口层",slug:"用户接口层",children:[]},{level:3,title:"应用层",slug:"应用层",children:[]},{level:3,title:"领域层",slug:"领域层",children:[]},{level:3,title:"基础层",slug:"基础层",children:[]}]},{level:2,title:"DDD分层架构如何推动架构演进",slug:"ddd分层架构如何推动架构演进",children:[{level:3,title:"微服务架构的演进",slug:"微服务架构的演进",children:[]},{level:3,title:"微服务内服务的演化",slug:"微服务内服务的演化",children:[]}]},{level:2,title:"实战",slug:"实战",children:[]}],filePathRelative:"ddd/05 DDD分层架构.md"}},86342:(e,d,a)=>{a.r(d),a.d(d,{default:()=>h});var r=a(20641);const i=(0,r.Fv)('<h2 id="ddd分层架构" tabindex="-1"><a class="header-anchor" href="#ddd分层架构" aria-hidden="true">#</a> DDD分层架构</h2><p>DDD 的分层架构在不断发展。最早是传统的四层架构；后来四层架构有了进一步的优化， 实现了各层对基础层的解耦；再后来领域层和应用层之间增加了上下文环境（Context） 层，五层架构（DCI）就此形成了</p><p><img src="/images/ddd/image-20230526195538371.png" alt="image-20230526195538371"></p><p>在最早的传统四层架构中，基础层是被其它层依赖的，它位于最核 心的位置，那按照分层架构的思想，它应该就是核心，但实际上领域层才是软件的核心，所 以这种依赖是有问题的。后来我们采用了依赖倒置（Dependency inversion principle,DIP）的设计，优化了传统的四层架构，实现了各层对基础层的解耦</p><blockquote><p>DDD 分层架构就是优化后的四层架构</p></blockquote><p><img src="/images/ddd/image-20230526195709786.png" alt="image-20230526195709786"></p><h3 id="用户接口层" tabindex="-1"><a class="header-anchor" href="#用户接口层" aria-hidden="true">#</a> 用户接口层</h3><p>用户接口层负责向用户显示信息和解释用户指令。这里的用户可能是：用户、程序、自动化 测试和批处理脚本等等</p><h3 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层" aria-hidden="true">#</a> 应用层</h3><p>应用层又位于领域层之上，因为领域层包含多个聚合，所以它可以协调多个聚合的服务和 领域对象完成服务编排和组合，协作完成业务操作</p><p>此外，应用层也是微服务之间交互的通道，它可以调用其它微服务的应用服务，完成微服务 之间的服务组合和编排</p><h3 id="领域层" tabindex="-1"><a class="header-anchor" href="#领域层" aria-hidden="true">#</a> 领域层</h3><p>领域层的作用是实现企业核心业务逻辑，通过各种校验手段保证业务的正确性。领域层主要体现领域模型的业务能力，它用来表达业务概念、业务状态和业务规则。</p><p>领域层包含聚合根、实体、值对象、领域服务等领域模型中的领域对象。</p><p>领域模型的业务逻辑主要是由实体和领域服务来实现的，其中实体会采用充血模型来 实现所有与之相关的业务功能。其次，你要知道，实体和领域对象在实现业务逻辑上不是同 级的，<strong>当领域中的某些功能，单一实体（或者值对象）不能实现时，领域服务就会出马，它 可以组合聚合内的多个实体（或者值对象)</strong>，实现复杂的业务逻辑。</p><h3 id="基础层" tabindex="-1"><a class="header-anchor" href="#基础层" aria-hidden="true">#</a> 基础层</h3><p>基础层是贯穿所有层的，它的作用就是为其它各层提供通用的技术和基础服务，包括第三方 工具、驱动、消息中间件、网关、文件、缓存以及数据库等。比较常见的功能还是提供数据 库持久化。</p><p>基础层包含基础服务，它采用依赖倒置设计，封装基础资源服务，实现应用层、领域层与基 础层的解耦，降低外部资源变化对应用的影响</p><h2 id="ddd分层架构如何推动架构演进" tabindex="-1"><a class="header-anchor" href="#ddd分层架构如何推动架构演进" aria-hidden="true">#</a> DDD分层架构如何推动架构演进</h2><p>领域模型不是一成不变的，因为业务的变化会影响领域模型，而领域模型的变化则会影响微 服务的功能和边界</p><h3 id="微服务架构的演进" tabindex="-1"><a class="header-anchor" href="#微服务架构的演进" aria-hidden="true">#</a> 微服务架构的演进</h3><p>领域模型中对象的层次从内到外依次是：值对象、实体、聚 合和限界上下文。</p><p>实体或值对象的简单变更，一般不会让领域模型和微服务发生大的变化。但聚合的重组或拆 分却可以。这是因为聚合内业务功能内聚，能独立完成特定的业务逻辑。那聚合的重组或拆 分，势必就会引起业务模块和系统功能的变化</p><p>以聚合为基础单元，完成领域模型和微服务架构的演进。聚合可以作为一个整 体，在不同的领域模型之间重组或者拆分，或者直接将一个聚合独立为微服务</p><p><img src="/images/ddd/image-20230526201041030.png" alt="image-20230526201041030"></p><blockquote><p>以微服务 1 为例，讲解下微服务架构的演进过程：</p></blockquote><p>当你发现微服务 1 中聚合 a 的功能经常被高频访问，以致拖累整个微服务 1 的性能时， 我们可以把聚合 a 的代码，从微服务 1 中剥离出来，独立为微服务 2。这样微服务 2 就 可轻松应对高性能场景。</p><p>在业务发展到一定程度以后，你会发现微服务 2 的领域模型有了变化，聚合 d 会更适合 放到微服务 1 的领域模型中。这时你就可以将聚合 d 的代码整体搬迁到微服务 1 中。如 果你在设计时已经定义好了聚合之间的代码边界，这个过程不会太复杂，也不会花太多 时间。</p><p>最后我们发现，在经历模型和架构演进后，微服务 1 已经从最初包含聚合 a、b、c，演 进为包含聚合 b、c、d 的新领域模型和微服务了</p><h3 id="微服务内服务的演化" tabindex="-1"><a class="header-anchor" href="#微服务内服务的演化" aria-hidden="true">#</a> 微服务内服务的演化</h3><p>在微服务内部，<strong>实体的方法被领域服务组合和封装，领域服务又被应用服务组合和封装</strong>。在 服务逐层组合和封装的过程中，你会发现这样一个有趣的现象。</p><p><img src="/images/ddd/image-20230526201335344.png" alt="image-20230526201335344"></p><p>在服务设计时，你并不一定能完整预测有哪些下层服务会被多少个上 层服务组装，因此领域层通常只提供一些原子服务，比如领域服务 a、b、c。但随着系统功 能增强和外部接入越来越多，应用服务会不断丰富。有一天你会发现领域服务 b 和 c 同时 多次被多个应用服务调用了，执行顺序也基本一致。这时你可以考虑将 b 和 c 合并，再将 应用服务中 b、c 的功能下沉到领域层，演进为新的领域服务（b+c）。这样既减少了服务 的数量，也减轻了上层服务组合和编排的复杂度</p><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2>',34),t={href:"https://github.com/xlorne/springboot-ddd-demo/tree/master/demo/src/main",target:"_blank",rel:"noopener noreferrer"},n={href:"https://github.com/sandokandias/spring-boot-ddd",target:"_blank",rel:"noopener noreferrer"},l={},h=(0,a(66262).A)(l,[["render",function(e,d){const a=(0,r.g2)("OutboundLink");return(0,r.uX)(),(0,r.CE)(r.FK,null,[i,(0,r.Lk)("p",null,[(0,r.Lk)("a",t,[(0,r.eW)("springboot-ddd-demo/demo/src/main at master · xlorne/springboot-ddd-demo · GitHub"),(0,r.bF)(a)])]),(0,r.Lk)("p",null,[(0,r.Lk)("a",n,[(0,r.eW)("sandokandias/spring-boot-ddd: Spring boot with domain driven design (github.com)"),(0,r.bF)(a)])])],64)}]])},66262:(e,d)=>{d.A=(e,d)=>{const a=e.__vccOpts||e;for(const[e,r]of d)a[e]=r;return a}}}]);