"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[68508],{16894:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5a5a0ba9",path:"/javahelper/01%20lombok.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/javahelper/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"IDEA安装插件",slug:"idea安装插件",children:[]},{level:2,title:"依赖",slug:"依赖",children:[]},{level:2,title:"@Getter @Setter",slug:"getter-setter",children:[]},{level:2,title:"@ToString",slug:"tostring",children:[]},{level:2,title:"@EqualsAndHashCode❤️",slug:"equalsandhashcode❤️",children:[{level:3,title:"注意泛型或者Object数组的问题",slug:"注意泛型或者object数组的问题",children:[]},{level:3,title:"原因分析",slug:"原因分析",children:[]},{level:3,title:"解决",slug:"解决",children:[]}]},{level:2,title:"@NoArgsConstructor, @AllArgsConstructor, @RequiredArgsConstructor",slug:"noargsconstructor-allargsconstructor-requiredargsconstructor",children:[]},{level:2,title:"@Data",slug:"data",children:[]},{level:2,title:"@Value👍",slug:"value👍",children:[{level:3,title:"举例",slug:"举例",children:[]}]},{level:2,title:"@Builder",slug:"builder",children:[]},{level:2,title:"@Slf4j",slug:"slf4j",children:[]},{level:2,title:"idea 将lombok注解转换成代码❤️",slug:"idea-将lombok注解转换成代码❤️",children:[]}],filePathRelative:"javahelper/01 lombok.md"}},93923:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(20641).Fv)('<p><img src="/images/modernmall/13385" alt="img"></p><h2 id="idea安装插件" tabindex="-1"><a class="header-anchor" href="#idea安装插件" aria-hidden="true">#</a> IDEA安装插件</h2><p><img src="/images/modernmall/image-20230305190155230.png" alt="image-20230305190155230"></p><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="getter-setter" tabindex="-1"><a class="header-anchor" href="#getter-setter" aria-hidden="true">#</a> @Getter @Setter</h2><p><img src="/images/modernmall/13382" alt="img"></p><h2 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> @ToString</h2><p><img src="/images/modernmall/13390" alt="img"></p><h2 id="equalsandhashcode❤️" tabindex="-1"><a class="header-anchor" href="#equalsandhashcode❤️" aria-hidden="true">#</a> <strong>@EqualsAndHashCode</strong>❤️</h2><p>自动生成 equals(Object other) 和 hashcode() 方法，包括所有非静态变量和非 transient 的变量</p><p><img src="/images/modernmall/13381" alt="img"></p><p>如果某些变量不想要加进判断，可以透过 exclude 排除，也可以使用 of 指定某些字段<img src="/images/modernmall/13386.png" alt="0"></p><p>Q : 为什么只有一个整体的 @EqualsAndHashCode 注解，而不是分开的两个 @Equals 和 @HashCode？</p><p>A : 在 Java 中有规定，当两个对象 equals 时，他们的 hashcode 一定要相同，反之，当 hashcode 相同时，对象不一定 equals。所以 equals 和 hashcode 要一起实现，免得发生违反 Java 规定的情形发生</p><h3 id="注意泛型或者object数组的问题" tabindex="-1"><a class="header-anchor" href="#注意泛型或者object数组的问题" aria-hidden="true">#</a> 注意泛型或者Object数组的问题</h3><p>在下面的情况equals是相等的</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@EqualsAndHashCode</span>\n<span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultC</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResultC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ResultC</span> result1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultC</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ResultC</span> result2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultC</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>但是如果使用泛型或者Object类的时候，equals就不会相等了</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token annotation punctuation">@EqualsAndHashCode</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultA</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token annotation punctuation">@EqualsAndHashCode</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResultA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ResultA</span> result1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultA</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ResultA</span> result2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultA</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">assertEquals</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResultB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ResultB</span> result1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultB</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ResultB</span> result2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultB</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">assertEquals</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="原因分析" tabindex="-1"><a class="header-anchor" href="#原因分析" aria-hidden="true">#</a> 原因分析</h3><p>lombok生成数组类型的比较,使用了<code>Arrays.equals</code>方法,会逐个比较元素</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> other<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>而使用泛型和Object生成的都是</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token keyword">this</span>$data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n<span class="token keyword">final</span> <span class="token class-name">Object</span> other$data <span class="token operator">=</span> other<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span>$data <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> other$data <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span>$data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>而Object的equals方法比较的是堆上的地址引用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h3><blockquote><p>将数组转化成List，使用List的equals方法，它会逐个比较元素里面的内容</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token annotation punctuation">@EqualsAndHashCode</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultA</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token annotation punctuation">@EqualsAndHashCode</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResultASolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">ResultA</span> result1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultA</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ResultA</span> result2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultA</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testResultBSolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ResultB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultB</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ResultB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultB</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="noargsconstructor-allargsconstructor-requiredargsconstructor" tabindex="-1"><a class="header-anchor" href="#noargsconstructor-allargsconstructor-requiredargsconstructor" aria-hidden="true">#</a> <strong>@NoArgsConstructor, @AllArgsConstructor, @RequiredArgsConstructor</strong></h2><p>这三个很像，都是在自动生成该类的构造器，差别只在生成的构造器的参数不一样而已</p><p>@NoArgsConstructor : 生成一个没有参数的构造器</p><p>​ <img src="/images/modernmall/13389" alt="0"></p><p>@AllArgsConstructor : 生成一个包含所有参数的构造器</p><p>​ <img src="/images/modernmall/13387" alt="0"></p><p>这里注意一个 Java 的小坑，当我们没有指定构造器时，Java 编译器会帮我们自动生成一个没有任何参数的构造器给该类，但是如果我们自己写了构造器之后，Java 就不会自动帮我们补上那个无参数的构造器了</p><p>然而很多地方（像是 Spring Data JPA），会需要每个类都一定要有一个无参数的构造器，所以你在加上 @AllArgsConstructor 时，一定要补上 @NoArgsConstrcutor，不然会有各种坑等着你</p><p>@RequiredArgsConstructor : 生成一个包含 &quot;特定参数&quot; 的构造器，特定参数指的是那些有加上 final 修饰词的变量们</p><p>​ <img src="/images/modernmall/13388" alt="0"></p><p>补充一下，如果所有的变量都是正常的，都没有用 final 修饰的话，那就会生成一个没有参数的构造器</p><h2 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> <strong>@Data</strong></h2><p>整合包，只要加了 @Data 这个注解，等于同时加了以下注解</p><ul><li>@Getter/@Setter</li><li>@ToString</li><li>@EqualsAndHashCode</li><li>@RequiredArgsConstructor</li></ul><p>​ <img src="/images/modernmall/13380" alt="0"></p><p>@Data 是使用频率最高的 lombok 注解，通常 @Data 会加在一个值可以被更新的对象上，像是日常使用的 DTO 们、或是 JPA 裡的 Entity 们，就很适合加上 @Data 注解，也就是 @Data for mutable class</p><h2 id="value👍" tabindex="-1"><a class="header-anchor" href="#value👍" aria-hidden="true">#</a> <strong>@Value</strong>👍</h2><p>也是整合包，但是他会把所有的变量都设成 final 的，其他的就跟 @Data 一样，等于同时加了以下注解</p><ul><li>@Getter (注意没有setter)</li><li>@ToString</li><li>@EqualsAndHashCode</li><li>@RequiredArgsConstructor</li></ul><p>​ <img src="/images/modernmall/13384" alt="0"></p><p>上面那个 @Data 适合用在 POJO 或 DTO 上，而这个 @Value 注解，则是适合加在值不希望被改变的类上，像是某个类的值当创建后就不希望被更改，只希望我们读它而已，就适合加上 @Value 注解，也就是 @Value for immutable class</p><p>另外注意一下，此 lombok 的注解 @Value 和另一个 Spring 的注解 @Value 撞名，在 import 时不要 import 错了</p><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h3><blockquote><p>注意staticConstructor属性</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>staticConstructor <span class="token operator">=</span> <span class="token string">&quot;commandOf&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerformPayment</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentCommand</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CustomerId</span> customerId<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PaymentIntent</span> paymentIntent<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PaymentMethod</span> paymentMethod<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Transaction</span> transaction<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LocalDateTime</span> timestamp <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>生成的代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PerformPayment</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentCommand</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CustomerId</span> customerId<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PaymentIntent</span> paymentIntent<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PaymentMethod</span> paymentMethod<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Transaction</span> transaction<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LocalDateTime</span> timestamp <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">PerformPayment</span><span class="token punctuation">(</span><span class="token class-name">CustomerId</span> customerId<span class="token punctuation">,</span> <span class="token class-name">PaymentIntent</span> paymentIntent<span class="token punctuation">,</span> <span class="token class-name">PaymentMethod</span> paymentMethod<span class="token punctuation">,</span> <span class="token class-name">Transaction</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>customerId <span class="token operator">=</span> customerId<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>paymentIntent <span class="token operator">=</span> paymentIntent<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>paymentMethod <span class="token operator">=</span> paymentMethod<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>transaction <span class="token operator">=</span> transaction<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PerformPayment</span> <span class="token function">commandOf</span><span class="token punctuation">(</span><span class="token class-name">CustomerId</span> customerId<span class="token punctuation">,</span> <span class="token class-name">PaymentIntent</span> paymentIntent<span class="token punctuation">,</span> <span class="token class-name">PaymentMethod</span> paymentMethod<span class="token punctuation">,</span> <span class="token class-name">Transaction</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PerformPayment</span><span class="token punctuation">(</span>customerId<span class="token punctuation">,</span> paymentIntent<span class="token punctuation">,</span> paymentMethod<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">CustomerId</span> <span class="token function">getCustomerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customerId<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">PaymentIntent</span> <span class="token function">getPaymentIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paymentIntent<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">PaymentMethod</span> <span class="token function">getPaymentMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paymentMethod<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Transaction</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transaction<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">LocalDateTime</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">PerformPayment</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">PerformPayment</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PerformPayment</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token keyword">this</span>$customerId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCustomerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> other$customerId <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getCustomerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span>$customerId <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> other$customerId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span>$customerId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$customerId<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token keyword">this</span>$paymentIntent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPaymentIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> other$paymentIntent <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getPaymentIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span>$paymentIntent <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> other$paymentIntent <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span>$paymentIntent<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$paymentIntent<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token keyword">this</span>$paymentMethod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPaymentMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> other$paymentMethod <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getPaymentMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span>$paymentMethod <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> other$paymentMethod <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span>$paymentMethod<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$paymentMethod<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token keyword">this</span>$transaction <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> other$transaction <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span>$transaction <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> other$transaction <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span>$transaction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$transaction<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token keyword">this</span>$timestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> other$timestamp <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span>$timestamp <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> other$timestamp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token keyword">this</span>$timestamp<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PRIME</span> <span class="token operator">=</span> <span class="token number">59</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> $customerId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCustomerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token constant">PRIME</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$customerId <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> $customerId<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> $paymentIntent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPaymentIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token constant">PRIME</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$paymentIntent <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> $paymentIntent<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> $paymentMethod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPaymentMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token constant">PRIME</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$paymentMethod <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> $paymentMethod<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> $transaction <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token constant">PRIME</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$transaction <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> $transaction<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">final</span> <span class="token class-name">Object</span> $timestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token constant">PRIME</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$timestamp <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> $timestamp<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;PerformPayment(customerId=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCustomerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, paymentIntent=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPaymentIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, paymentMethod=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPaymentMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, transaction=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, timestamp=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><h2 id="builder" tabindex="-1"><a class="header-anchor" href="#builder" aria-hidden="true">#</a> <strong>@Builder</strong></h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>所以通常是 @Data 和 @Builder 会一起用在同个类上，既方便我们流式写代码，也方便框架做事</p></div><p>自动生成流式 set 值写法，从此之后再也不用写一堆 setter 了</p><p>​ <img src="/images/modernmall/13383" alt="0"></p><p>注意，虽然只要加上 @Builder 注解，我们就能够用流式写法快速设定对象的值，但是 setter 还是必须要写不能省略的，因为 Spring 或是其他框架有很多地方都会用到对象的 getter/setter 对他们取值/赋值</p><h2 id="slf4j" tabindex="-1"><a class="header-anchor" href="#slf4j" aria-hidden="true">#</a> <strong>@Slf4j</strong></h2><p>自动生成该类的 log 静态常量，要打日志就可以直接打，不用再手动 new log 静态常量了</p><p>​ <img src="/images/modernmall/13391" alt="0"></p><p>除了 @Slf4j 之外，lombok 也提供其他日志框架的变种注解可以用，像是 @Log、@Log4j...等，他们都是帮我们创建一个静态常量 log，只是使用的库不一样而已</p><p>​</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Log</span> \n<span class="token comment">//对应的log语句如下</span>\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span>Logger</span> log <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span>Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogExample</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token annotation punctuation">@Log4j</span> \n<span class="token comment">//对应的log语句如下</span>\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>Logger</span> log <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogExample</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>​</p><p>SpringBoot默认支持的就是 slf4j + logback 的日志框架，所以也不用再多做啥设定，直接就可以用在 SpringBoot project上，log 系列注解最常用的就是 @Slf4j</p><h2 id="idea-将lombok注解转换成代码❤️" tabindex="-1"><a class="header-anchor" href="#idea-将lombok注解转换成代码❤️" aria-hidden="true">#</a> idea 将lombok注解转换成代码❤️</h2><p>可以通过<code>refactor</code>菜单的<code>delombok</code>选项将lombok的注解转换为java代码</p><p><img src="/images/javahelper/image-20230516174859076.png" alt="image-20230516174859076"></p>',73),t={},e=(0,a(66262).A)(t,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);