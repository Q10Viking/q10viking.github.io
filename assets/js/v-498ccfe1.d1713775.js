"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[79187],{64365:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-498ccfe1",path:"/minifrontendproject/32%20Sorted%20LIst.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/minifrontendproject/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Sortable List",slug:"sortable-list",children:[]},{level:2,title:"用索引来记录要移动的元素",slug:"用索引来记录要移动的元素",children:[{level:3,title:"closest方法",slug:"closest方法",children:[]}]},{level:2,title:"justify-content",slug:"justify-content",children:[]},{level:2,title:"dragleave在遇到子元素时触发的问题解决方案⭐",slug:"dragleave在遇到子元素时触发的问题解决方案⭐",children:[{level:3,title:"解决方案：",slug:"解决方案",children:[]}]},{level:2,title:"扩展Event Order",slug:"扩展event-order",children:[]},{level:2,title:"Vue3实现",slug:"vue3实现",children:[{level:3,title:"推荐的Drag Types",slug:"推荐的drag-types",children:[]},{level:3,title:"js访问属性",slug:"js访问属性",children:[]},{level:3,title:"事件Event",slug:"事件event",children:[]},{level:3,title:"维护counter⭐",slug:"维护counter⭐",children:[]},{level:3,title:"添加class",slug:"添加class",children:[]},{level:3,title:"条件检查添加样式",slug:"条件检查添加样式",children:[]}]}],filePathRelative:"minifrontendproject/32 Sorted LIst.md"}},79545:(n,s,a)=>{a.r(s),a.d(s,{default:()=>C});var t=a(20641);const p=(0,t.Lk)("h2",{id:"sortable-list",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#sortable-list","aria-hidden":"true"},"#"),(0,t.eW)(" Sortable List")],-1),e={href:"https://q10viking.github.io/Mini-FrontEnd-project/37%20Sortable%20List/vite-project/dist/",target:"_blank",rel:"noopener noreferrer"},o={href:"https://github.com/Q10Viking/Mini-FrontEnd-project/tree/main/37%20Sortable%20List/vanilla",target:"_blank",rel:"noopener noreferrer"},l={href:"https://github.com/Q10Viking/Mini-FrontEnd-project/tree/main/37%20Sortable%20List/vite-project",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Fv)('<h2 id="用索引来记录要移动的元素" tabindex="-1"><a class="header-anchor" href="#用索引来记录要移动的元素" aria-hidden="true">#</a> 用索引来记录要移动的元素</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>用索引来记录要移动的元素</p></div><h3 id="closest方法" tabindex="-1"><a class="header-anchor" href="#closest方法" aria-hidden="true">#</a> closest方法</h3>',3),r={href:"https://developer.mozilla.org/en-US/docs/Web/API/Element/closest",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Fv)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dragStart</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span>HTMLElement</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  dragIdx <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-idx&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="justify-content" tabindex="-1"><a class="header-anchor" href="#justify-content" aria-hidden="true">#</a> justify-content</h2>',2),i={href:"https://www.w3schools.com/cssref/playdemo.asp?filename=playcss_justify-content&preval=space-between",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Lk)("h2",{id:"dragleave在遇到子元素时触发的问题解决方案⭐",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#dragleave在遇到子元素时触发的问题解决方案⭐","aria-hidden":"true"},"#"),(0,t.eW)(" dragleave在遇到子元素时触发的问题解决方案⭐")],-1),d={class:"custom-container tip"},b=(0,t.Lk)("p",{class:"custom-container-title"},"TIP",-1),m=(0,t.Lk)("p",null,[(0,t.eW)("我的问题：我想在dragenter的时候为容器"),(0,t.Lk)("strong",null,"li"),(0,t.eW)("添加一个样式，在dragleave的时候为容器"),(0,t.Lk)("strong",null,"li"),(0,t.eW)("删除样式，但是dragleave会在遇到容器内的其他子元素时，会被提前触发，导致样式被删除。")],-1),g={href:"https://stackoverflow.com/questions/50350406/dragleave-event-is-firing-on-inner-childs",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Fv)('<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>li.addEventListener(&quot;dragleave&quot;,dragLeave)\nli 容器\n<span class="token comment">&lt;!-- 里面有其他的子元素--&gt;</span>\n----span\n----div\n--------small\n--------p\n--------i\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>父容器监听事件，但是子元素也触发了事件,如拖拽元素进入到<strong>li</strong>时，会发生</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>drag enter li\ndrag enter span\ndrag leave li   \ndrag enter div\ndrag leave span  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>最后还是导致样式被删除了</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案：</h3><p>https://www.geeksforgeeks.org/how-to-dragleave-fired-when-hovering-a-child-element-in-html-5/</p><p>它的思路就是</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// div has an child element</span>\ndivEl<span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">&quot;dragenter&quot;</span><span class="token punctuation">,</span>dragEnter<span class="token punctuation">)</span>\ndivEl<span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">&quot;dragleave&quot;</span><span class="token punctuation">,</span>dragLeave<span class="token punctuation">)</span>\ncounter <span class="token operator">=</span> <span class="token number">0</span>\n\n<span class="token keyword">function</span> <span class="token function">dragEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n counter<span class="token operator">++</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">dragLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  counter<span class="token operator">--</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>counter <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// then do something</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>但是上面这个解决方案只维护了一个全局的counter，全局的counter会有如下的问题</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>drag enter &lt;li class=​&quot;book hover&quot; data-idx=​&quot;1&quot;&gt;​…​&lt;/li&gt;​\ndrag enter  1\ndrag enter &lt;li class=​&quot;book hover&quot; data-idx=​&quot;2&quot;&gt;​…​&lt;/li&gt;​  // 先进入另外一个，counter+1变成了2\ndrag enter  2\ndrag leave &lt;li class=​&quot;book hover&quot; data-idx=​&quot;1&quot;&gt;​…​&lt;/li&gt;​  // 离开的时候再减1,counter-1 变成了0\ndrag leave  1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>所以为每个dragenter和dragleave的容器设计一个counter</strong>：我见counter设置在了属性上</p><blockquote><p>属性的命名规范以<code>data-xxx</code>的形式比较好</p></blockquote><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- data-counter --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>book<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-idx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-counter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code>liCollection<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>li <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    li<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;dragenter&quot;</span><span class="token punctuation">,</span>e <span class="token operator">=&gt;</span> <span class="token function">dragEnter</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    li<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;dragleave&quot;</span><span class="token punctuation">,</span>e <span class="token operator">=&gt;</span> <span class="token function">dragLeave</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// event.target 在遇到子元素的时候会变成子元素不应顶时li，也就是说，dragenter,dragleave，子元素也会触发</span>\n<span class="token keyword">function</span> <span class="token function">dragEnter</span><span class="token punctuation">(</span>event<span class="token operator">:</span>DragEvent<span class="token punctuation">,</span>el<span class="token operator">:</span>HTMLElement<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">+</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-counter&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span>\n  counter<span class="token operator">++</span>  <span class="token comment">// 每次触发dragenter,包括li容器的子元素触发的，都加1</span>\n  el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-counter&quot;</span><span class="token punctuation">,</span>counter<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>\n  el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hover&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 添加样式</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">dragLeave</span><span class="token punctuation">(</span>event<span class="token operator">:</span>DragEvent<span class="token punctuation">,</span>el<span class="token operator">:</span>HTMLLIElement<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">+</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-counter&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span>\n  counter<span class="token operator">--</span>  <span class="token comment">// 每次触发dragleave,包括li容器的子元素触发的，都减1</span>\n  el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-counter&quot;</span><span class="token punctuation">,</span>counter<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>counter <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 当着到为0的时候，设置样式</span>\n    el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;hover&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>拖拽完之后需要进行counter进行清零，因为有dragenter,drop时没有对应的dragleave事件产生</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function dropBook(this:HTMLElement){\n  \n  const idx = +this.getAttribute(&quot;data-idx&quot;)!\n  swap(dragIdx,idx)\n  // 拖拽完之后需要进行清零\n  this.setAttribute(&quot;data-counter&quot;,&quot;0&quot;)\n  this.classList.remove(&quot;hover&quot;)\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="扩展event-order" tabindex="-1"><a class="header-anchor" href="#扩展event-order" aria-hidden="true">#</a> 扩展Event Order</h2>',17),h={href:"https://www.quirksmode.org/js/events_order.html#link4",target:"_blank",rel:"noopener noreferrer"},q=(0,t.Lk)("hr",null,null,-1),f=(0,t.Lk)("h2",{id:"vue3实现",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#vue3实现","aria-hidden":"true"},"#"),(0,t.eW)(" Vue3实现")],-1),x={class:"custom-container tip"},y=(0,t.Lk)("p",{class:"custom-container-title"},"TIP",-1),L=(0,t.Lk)("p",null,"思想思路",-1),w=(0,t.Lk)("li",null,"Vue框架是基于数据驱动DOM元素操作的。所以我将注重在数据层面的操作。",-1),j={href:"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer",target:"_blank",rel:"noopener noreferrer"},I=(0,t.Lk)("code",null,"DataTransfer",-1),E=(0,t.Lk)("li",null,"drop时取出存在的DataTransfer的idx,然后将目标容器的li的idx,一起提交emit给父组件",-1),S=(0,t.Lk)("li",null,"父组件收到子组件的事件后，根据这两个idx,交换数组里面的值，这样data就更新了。子组件的属性name,依赖父组件的传值，这样就实现了更新",-1),W=(0,t.Lk)("h3",{id:"推荐的drag-types",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#推荐的drag-types","aria-hidden":"true"},"#"),(0,t.eW)(" 推荐的Drag Types")],-1),_=(0,t.Lk)("div",{class:"custom-container tip"},[(0,t.Lk)("p",{class:"custom-container-title"},"TIP"),(0,t.Lk)("p",null,"官网推荐的使用作为key的类型信息")],-1),A={href:"https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types",target:"_blank",rel:"noopener noreferrer"},F=(0,t.Fv)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 我这里使用&quot;text/plain&quot;类型来传递，idx</span>\nevent<span class="token punctuation">.</span>dataTransfer<span class="token operator">?.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>idx<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="js访问属性" tabindex="-1"><a class="header-anchor" href="#js访问属性" aria-hidden="true">#</a> js访问属性</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">idx</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>\n        <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">book</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>\n        <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">dragStart</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">event</span><span class="token operator">:</span>DragEvent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 访问属性的方式</span>\n    event<span class="token punctuation">.</span>dataTransfer<span class="token operator">?.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>idx<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="事件event" tabindex="-1"><a class="header-anchor" href="#事件event" aria-hidden="true">#</a> 事件Event</h3>',4),D={href:"https://vuejs.org/guide/typescript/composition-api.html#typing-component-emits",target:"_blank",rel:"noopener noreferrer"},T=(0,t.Fv)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 普通定义</span>\n<span class="token comment">// defineEmits([&#39;change&#39;])</span>\n<span class="token comment">// 定义事件，并带有参数</span>\n<span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>e<span class="token operator">:</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">srcIdx</span><span class="token operator">:</span>number<span class="token punctuation">,</span><span class="token literal-property property">targetIdx</span><span class="token operator">:</span>number<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>  <span class="token comment">// 方法签名</span>\n    <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>发送事件</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">dragDrop</span><span class="token punctuation">(</span>event<span class="token operator">:</span>DragEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> srcIdxStr <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token operator">?.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> srcIdx <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> srcIdxStr <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        srcIdx <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>srcIdxStr<span class="token punctuation">)</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>srcIdx<span class="token punctuation">,</span>props<span class="token punctuation">.</span>idx<span class="token punctuation">)</span>\n        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span>srcIdx<span class="token punctuation">,</span>props<span class="token punctuation">.</span>idx<span class="token punctuation">)</span> <span class="token comment">// 发送数据  </span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;drag drop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在父组件接受事件</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItem</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(book,idx) in BOOKS<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:book</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>book<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:idx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idx<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idx<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 接受事件交给swap处理 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListItem</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">srcIdx</span><span class="token operator">:</span>number<span class="token punctuation">,</span><span class="token literal-property property">targetIdx</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;parent component receive&quot;</span><span class="token punctuation">,</span>srcIdx<span class="token punctuation">,</span>targetIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="维护counter⭐" tabindex="-1"><a class="header-anchor" href="#维护counter⭐" aria-hidden="true">#</a> 维护counter⭐</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>对组件data的理解</strong></p><p>相比之前在原生开发的模式，每个ll的counter我们维护在li的属性<code>data-counter</code>上，现在使用vue，我们可以直接将其维护在组件的响应式数据上。访问counter直接基于响应式的方式，直接声明操作。不像之前需要setAttribute,getAttribute.这也是使用vue的好处，方便开发</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 之前</span>\n<span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;book&quot;</span> data<span class="token operator">-</span>idx<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> data<span class="token operator">-</span>counter<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token operator">&gt;</span>\n<span class="token comment">// 使用vue后</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="vue插件bug" tabindex="-1"><a class="header-anchor" href="#vue插件bug" aria-hidden="true">#</a> vue插件bug</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>响应式的数据变化要在，要在template中使用了，才会看到变化。在js更新，并不在在面板上更新</p></div><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>book<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:data-idx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idx<span class="token punctuation">&quot;</span></span> \n        <span class="token attr-name">:data-counter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>counter<span class="token punctuation">&quot;</span></span>    <span class="token attr-name">&lt;!--</span> <span class="token attr-name">要使用在插件界面更新才能看见，但是counter还是</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>\n        @dragenter=&quot;dragEnter&quot;\n        @dragover.prevent=&quot;dragOver&quot;\n        @dragleave=&quot;dragLeave&quot;\n        @drop=&quot;dragDrop&quot;&gt;\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="/images/minifrontendproject/image-20220728184400351.png" alt="image-20220728184400351"></p><h3 id="添加class" tabindex="-1"><a class="header-anchor" href="#添加class" aria-hidden="true">#</a> 添加class</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>使用isActive语义很明确</p></div><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>book<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{hover: isActive}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@dragenter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dragEnter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">dragEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    isActive<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 添加hover</span>\n    <span class="token comment">// 被渲染成,class会自动合并</span>\n    <span class="token comment">// &lt;li class=&quot;book hover&quot;&gt;&lt;/li&gt;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="条件检查添加样式" tabindex="-1"><a class="header-anchor" href="#条件检查添加样式" aria-hidden="true">#</a> 条件检查添加样式</h3>',16),O={href:"https://vuejs.org/guide/components/attrs.html",target:"_blank",rel:"noopener noreferrer"},P=(0,t.Fv)('<div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItem</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(book,idx) in RANDOM_BOOKS<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:book</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>book<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:idx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idx<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>idx<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checked ? checkedResult[idx]? &#39;right&#39;:&#39;error&#39; :&#39;&#39;<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">&lt;!--</span>  <span class="token attr-name">条件检查来设置样式</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>\n        @change=&quot;swap&quot;&gt;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListItem</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>相关的script</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">const</span> <span class="token literal-property property">checkedResult</span><span class="token operator">:</span>boolean<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> checked <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">checkOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">BOOKS</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    checkedResult<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">BOOKS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token constant">RANDOM_BOOKS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  checked<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>   <span class="token comment">// 打开设置样式的开关</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',3),M={},C=(0,a(66262).A)(M,[["render",function(n,s){const a=(0,t.g2)("OutboundLink"),M=(0,t.g2)("common-progresson-snippet");return(0,t.uX)(),(0,t.CE)(t.FK,null,[p,(0,t.Lk)("p",null,[(0,t.Lk)("a",e,[(0,t.eW)("项目预览（Project view）"),(0,t.bF)(a)])]),(0,t.Lk)("p",null,[(0,t.Lk)("a",o,[(0,t.eW)("vanilla Source Code"),(0,t.bF)(a)])]),(0,t.Lk)("p",null,[(0,t.Lk)("a",l,[(0,t.eW)("Vue3+ts重构 Source Code"),(0,t.bF)(a)])]),(0,t.bF)(M,{src:"https://q10viking.github.io/Mini-FrontEnd-project/37%20Sortable%20List/vite-project/dist/"}),c,(0,t.Lk)("p",null,[(0,t.Lk)("a",r,[(0,t.eW)("MDN closest API"),(0,t.bF)(a)]),(0,t.eW)("官网的举例更加详细。简单说就是返回符合selector的最近祖先")]),u,(0,t.Lk)("p",null,[(0,t.Lk)("a",i,[(0,t.eW)("W3Schools CSS justify-content demonstration"),(0,t.bF)(a)])]),k,(0,t.Lk)("div",d,[b,m,(0,t.Lk)("p",null,[(0,t.Lk)("a",g,[(0,t.eW)("html - dragleave event is firing on inner childs - Stack Overflow的问题"),(0,t.bF)(a)])])]),v,(0,t.Lk)("p",null,[(0,t.Lk)("a",h,[(0,t.eW)("Javascript - Event order (quirksmode.org)"),(0,t.bF)(a)])]),q,f,(0,t.Lk)("div",x,[y,L,(0,t.Lk)("ol",null,[w,(0,t.Lk)("li",null,[(0,t.eW)("dragstart事件开始时，记录li的idx，并将它存到到"),(0,t.Lk)("a",j,[I,(0,t.bF)(a)]),(0,t.eW)("中")]),E,S])]),W,_,(0,t.Lk)("p",null,[(0,t.Lk)("a",A,[(0,t.eW)("Recommended Drag Types - Web APIs | MDN (mozilla.org)"),(0,t.bF)(a)])]),F,(0,t.Lk)("p",null,[(0,t.eW)("定义事件 "),(0,t.Lk)("a",D,[(0,t.eW)("typing-component-emits"),(0,t.bF)(a)])]),T,(0,t.Lk)("p",null,[(0,t.eW)("Vue支持属性向下传递"),(0,t.Lk)("a",O,[(0,t.eW)("Fallthrough Attributes"),(0,t.bF)(a)]),(0,t.eW)(",在这里ListItem设置的class会条件在ListItem的根标签上，这里案例时Li标签")]),P],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);