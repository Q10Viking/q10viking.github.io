"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[25297],{58710:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-55d7c243",path:"/springsecurity/01%20%E4%BD%BF%E7%94%A8.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/springsecurity/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Spring Security介绍",slug:"spring-security介绍",children:[{level:3,title:"认证",slug:"认证",children:[]}]},{level:2,title:"学会构建spring security项目",slug:"学会构建spring-security项目",children:[]},{level:2,title:"登录页面",slug:"登录页面",children:[]},{level:2,title:"快速开始",slug:"快速开始",children:[{level:3,title:"引入依赖",slug:"引入依赖",children:[]}]}],filePathRelative:"springsecurity/01 使用.md"}},29375:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(20641);const t=(0,e.Fv)('<h2 id="spring-security介绍" tabindex="-1"><a class="header-anchor" href="#spring-security介绍" aria-hidden="true">#</a> Spring Security介绍</h2><p>认证 ：用户认证就是判断一个用户的身份是否合法的过程，用户去访问系统资源时系统要求验证用户 的身份信息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码 登录，二维码登录，手机短信登录，指纹认证等方式。</p><p>授权： 授权是用户认证通过根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常 访问，没有权限则拒绝访问</p><h3 id="认证" tabindex="-1"><a class="header-anchor" href="#认证" aria-hidden="true">#</a> 认证</h3><p>实现UserDetailsService接口，需要提供一个能获得用户名和密码的MyUserDetailsService Bean.Spring Security在认证的过程中会从容器中根据UserDetailsService.class,来获得我们MyUserDetailsService，然后调用UserDetailsService的loadUserByUsername，来获得用户信息，接着进行认证。</p><h2 id="学会构建spring-security项目" tabindex="-1"><a class="header-anchor" href="#学会构建spring-security项目" aria-hidden="true">#</a> 学会构建spring security项目</h2><p>WebSecurityConfigurerAdapter</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">UserDetails</span>\n<span class="token class-name">PasswordEncoderFactories</span>\n<span class="token class-name">BCrypt</span>\n    \n<span class="token class-name">UsernamePasswordAuthenticationFilter</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="登录页面" tabindex="-1"><a class="header-anchor" href="#登录页面" aria-hidden="true">#</a> 登录页面</h2><p>DefaultLoginPageGeneratingFilter</p><p>csrf</p><hr><p>SessionReposiFiter</p><p>RedisSessionRepository</p>',14),p={href:"https://blog.csdn.net/cumt0/article/details/114262062",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Fv)('<p>为什么登录过了就不需要再登录了？</p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h3><p>这要引入依赖就可以使用spring security了</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 实现对 Spring MVC 的自动化配置 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- 实现对 Spring Security 的自动化配置 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>引入Spring Security之后 ，访问 API 接口时，需要首先进行登录，才能进行访问。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/admin&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Hello Spring security&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>输入http://localhost:8080/admin/demo 就会自动跳转到登录页面，http://localhost:8080/login <img src="/images/springsecurity/image-20210826002752673.png" alt="image-20210826002752673"></p><p>登录用户名user,密码为随机生成UUID</p><p><img src="/images/springsecurity/image-20210826002852945.png" alt="image-20210826002852945"></p>',10),c={},i=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,(0,e.Lk)("p",null,[(0,e.Lk)("a",p,[(0,e.eW)("(24条消息) Spring Session 详解_I wish I could do it的博客-CSDN博客_springsession"),(0,e.bF)(a)])]),l],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);