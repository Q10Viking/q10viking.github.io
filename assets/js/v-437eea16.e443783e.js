"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[77920],{37121:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-437eea16",path:"/zk/08%20zk%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/zk/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"持久化",slug:"持久化",children:[]},{level:2,title:"事务日志",slug:"事务日志",children:[]},{level:2,title:"数据快照",slug:"数据快照",children:[]}],filePathRelative:"zk/08 zk数据持久化.md"}},95849:(e,a,n)=>{n.r(a),n.d(a,{default:()=>r});const s=(0,n(20641).Fv)('<h2 id="持久化" tabindex="-1"><a class="header-anchor" href="#持久化" aria-hidden="true">#</a> 持久化</h2><p>快照数据主要时为了快速恢复， <strong>事务日志文件是每次事务请求都会进行追加的操作</strong>，而快照是达到某种设定条件下的内存全量数据。</p><blockquote><p>有了事务日志，为啥还要快照数据。</p></blockquote><p>快照数据主要时为了快速恢复，事务日志文件是每次事务请求都会进行追加的操作，而快照是达到某种设定条件下的内存全量数据。所以通常快照数据是反应当时内存数据的状态。事务日志是更全面的数据，所以恢复数据的时候，可以先恢复快照数据，再通过增量恢复事务日志中的数据即可。</p><p>快照信息与事务日志存放在配置文件时指定的dataDir路径下</p><img src="/images/zk/image-20211118064949716.png" alt="image-20211118064949716"><h2 id="事务日志" tabindex="-1"><a class="header-anchor" href="#事务日志" aria-hidden="true">#</a> 事务日志</h2><p>针对每一次客户端的事务操作，Zookeeper都会将他们记录到事务日志中，当然，Zookeeper也会将数据变更应用到内存数据库中。我们可以在zookeeper的主配置文件zoo.cfg 中配置内存中的数据持久化目录，也就是事务日志的存储路径 dataLogDir. 如果没有配置dataLogDir（非必填）, 事务日志将存储到dataDir （必填项）目录，</p><ol><li>针对每一次客户端的事务操作，Zookeeper都会将他们记录到事务日志中</li><li>Zookeeper进行事务日志文件操作的时候会频繁进行磁盘IO操作，事务日志的不断追加写操作会触发底层磁盘IO为文件开辟新的磁盘块，即磁盘Seek。因此，为了提升磁盘IO的效率，Zookeeper在创建事务日志文件的时候就进行<strong>文件空间的预分配</strong>- 即在创建文件的时候，就向操作系统申请一块大一点的磁盘块。这个预分配的磁盘大小可以通过系统参数 zookeeper.preAllocSize 进行配置</li></ol><p>事务日志文件名为： log.&lt;当时最大事务ID&gt;，应为日志文件时顺序写入的，所以这个最大事务ID也将是整个事务日志文件中，最小的事务ID，日志满了即进行下一次事务日志文件的创建</p><p>zookeeper提供了格式化工具可以进行数据查看事务日志数据 org.apache.zookeeper.server.LogFormatter，因为事务日志时二进制文件的</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 查看事务日志</span>\n<span class="token comment"># 进入到zk的lib目录下</span>\n<span class="token punctuation">[</span>root@localhost lib<span class="token punctuation">]</span><span class="token comment"># pwd</span>\n/usr/zk/apache-zookeeper-3.5.8-bin/lib\n<span class="token comment"># 需要三个jar包</span>\n<span class="token punctuation">[</span>root@localhost lib<span class="token punctuation">]</span><span class="token comment"># java -cp .:slf4j-api-1.7.25.jar:zookeeper-3.5.8.jar:zookeeper-jute-3.5.8.jar org.apache.zookeeper.server.LogFormatter /usr/zk/apache-zookeeper-3.5.8-bin/data/version-2/log.1</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>日志文件的格式</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 从左到右分别记录了操作时间，客户端会话ID，CXID,ZXID,操作类型，节点路径，节点数据（用#+ascii 码表示），节点版本</span>\n<span class="token number">11</span>/17/21 <span class="token number">4</span>:34:50 PM EST session 0x10000081cd20001 cxid 0x4 zxid 0xc create <span class="token string">&#39;/seq-ephemeral/0000000000,#787878,v{s{31,s{&#39;</span>world,&#39;anyone<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>,T,1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="数据快照" tabindex="-1"><a class="header-anchor" href="#数据快照" aria-hidden="true">#</a> 数据快照</h2><ol><li>数据快照用于记录Zookeeper服务器上<strong>某一时刻的全量数据</strong>，并<strong>将其写入到指定的磁盘文件中</strong>。</li><li>可以通过配置snapCount配置每间隔事务请求个数，生成快照，数据存储在dataDir 指定的目录中，</li><li>可以通过如下方式进行查看快照数据（ 为了避免集群中所有机器在同一时间进行快照，实际的快照生成时机为事务数达到 [snapCount/2 + 随机数(随机数范围为1 ~ snapCount/2 )] 个数时开始快照）</li></ol><p>快照事务日志文件名为： snapshot.&lt;当时最大事务ID&gt;，日志满了即进行下一次事务日志文件的创建</p>',17),o={},r=(0,n(66262).A)(o,[["render",function(e,a){return s}]])},66262:(e,a)=>{a.A=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}}}]);