"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[58108],{29726:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-43b303ab",path:"/rabbitmq/05%20PubSub%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/rabbitmq/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Pub/Sub 订阅模式",slug:"pub-sub-订阅模式",children:[{level:3,title:"注意⭐",slug:"注意⭐",children:[]}]},{level:2,title:"使用场景",slug:"使用场景",children:[]},{level:2,title:"小结",slug:"小结",children:[]}],filePathRelative:"rabbitmq/05 PubSub订阅模式.md"}},80707:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(20641);const t=(0,p.Lk)("h2",{id:"pub-sub-订阅模式",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#pub-sub-订阅模式","aria-hidden":"true"},"#"),(0,p.eW)(),(0,p.Lk)("strong",null,"Pub/Sub"),(0,p.eW)(),(0,p.Lk)("strong",null,"订阅模式")],-1),e={href:"https://github.com/Q10Viking/learncode/tree/main/rabbitmq/_01_rabbitmq_java_api/src/main/java/org/hzz/pubsub",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Fv)('<p><img src="/images/MySQL/image-20211031014501124.png" alt="image-20211031014501124"></p><p>在订阅模型中，多了一个 Exchange 角色，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接收者，会一直等待消息到来</li><li>Queue：消息队列，接收消息、缓存消息</li><li>Exchange：交换机（X）。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如<strong>递交给某个特别队列、递交给所有队列、或是将消息丢弃</strong>。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型 <ul><li><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列</li><li><strong>Direct</strong>：定向，把消息交给符合指定routing key 的队列</li><li><strong>Topic</strong>：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange</strong>（交换机）只负责转发消息，不具备存储消息的能力，因此<strong>如果没有任何队列与 Exchange 绑定</strong>，或者没有符合路由规则的队列，那么<strong>消息会丢失</strong>！</p><h3 id="注意⭐" tabindex="-1"><a class="header-anchor" href="#注意⭐" aria-hidden="true">#</a> 注意⭐</h3><ol><li><p><strong>队列与交换机有一个bind关系，但是route是空</strong>⭐</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token class-name">RabbitConstant</span><span class="token punctuation">.</span><span class="token constant">QUEUE_SINA</span><span class="token punctuation">,</span> <span class="token class-name">RabbitConstant</span><span class="token punctuation">.</span><span class="token constant">EXCHANGE_WEATHER</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><p><img src="/images/designpattern/image-20211031020856758.png" alt="image-20211031020856758"></p><ol start="2"><li><p><strong>创建的exchange类型是Fanout</strong>⭐</p><p><img src="/images/RabbitMQ/image-20211031020549489.png" alt="image-20211031020549489"></p></li></ol><hr><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p><img src="/images/RabbitMQ/image-20211031015009800.png" alt="image-20211031015009800"></p><blockquote><p>Weather.java</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//第一个参数交换机名字   其他参数和之前的一样</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">RabbitConstant</span><span class="token punctuation">.</span><span class="token constant">EXCHANGE_WEATHER</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span> <span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>Sina.java</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sina</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取TCP长连接</span>\n        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取虚拟连接</span>\n        <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//声明队列信息</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token class-name">RabbitConstant</span><span class="token punctuation">.</span><span class="token constant">QUEUE_SINA</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//queueBind用于将队列与交换机绑定</span>\n        <span class="token comment">//参数1：队列名 参数2：交互机名  参数三：路由key（暂时用不到)</span>\n        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token class-name">RabbitConstant</span><span class="token punctuation">.</span><span class="token constant">QUEUE_SINA</span><span class="token punctuation">,</span> <span class="token class-name">RabbitConstant</span><span class="token punctuation">.</span><span class="token constant">EXCHANGE_WEATHER</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token class-name">RabbitConstant</span><span class="token punctuation">.</span><span class="token constant">QUEUE_SINA</span> <span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;新浪天气收到气象信息：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> <strong>小结</strong></h2><ol><li>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到</li><li>发布订阅模式与工作队列模式的区别 <ol><li><strong>工作队列模式不用定义交换机，而发布/订阅模式需要定义交换机</strong></li><li>发布/订阅模式的生产方是面向交换机发送消息，工作队列模式的生产方是面向队列发送消息(底层使用默认交换机)</li><li>发布/订阅模式需要设置队列和交换机的绑定，工作队列模式不需要设置，实际上工作队列模式会将队列绑 定到默认的交换机</li></ol></li></ol>',17),c={},l=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("pubsub source code"),(0,p.bF)(a)])]),o],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);