"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[79393],{39599:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-a1d5a126",path:"/sentinel/01%20%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/sentinel/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"计数器法",slug:"计数器法",children:[{level:3,title:"实现",slug:"实现",children:[]}]},{level:2,title:"滑动事件窗口算法",slug:"滑动事件窗口算法",children:[{level:3,title:"实现",slug:"实现-1",children:[]},{level:3,title:"参考",slug:"参考",children:[]}]},{level:2,title:"漏桶算法",slug:"漏桶算法",children:[{level:3,title:"实现",slug:"实现-2",children:[]}]},{level:2,title:"令牌桶算法",slug:"令牌桶算法",children:[{level:3,title:"实现",slug:"实现-3",children:[]}]}],filePathRelative:"sentinel/01 限流算法.md"}},70004:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(20641);const t={href:"https://github.com/Q10Viking/learncode/tree/main/%E9%99%90%E6%B5%81/calculator/src/main/java/org/hzz",target:"_blank",rel:"noopener noreferrer"},e=(0,p.Fv)('<h2 id="计数器法" tabindex="-1"><a class="header-anchor" href="#计数器法" aria-hidden="true">#</a> 计数器法</h2><p>计算器算法是一种简单的限流算法，用于限制系统在一定时间窗口内的请求次数，以防止系统因过多请求而过载或崩溃。该算法通常包括两个主要参数：<strong>限制阈值和时间窗口间隔</strong>。</p><p><img src="/images/sentinel/image-20230418195859977.png" alt="image-20230418195859977"></p><ul><li>限制阈值是指在一个时间窗口内允许通过的最大请求数量，超过该阈值的请求将被限制或拒绝。</li><li>时间窗口间隔是指限制阈值的计数周期，即在多长时间内计算请求次数</li></ul><blockquote><p>计算器算法的基本原理如下：</p></blockquote><ol><li><p>初始化一个计数器，初始值为0。</p></li><li><p>每当系统接收到一个请求，计数器的值加1。</p></li><li><p>在每个时间窗口的结束时，检查计数器的值是否超过了限制阈值。</p></li><li><p>如果计数器的值超过了限制阈值，则限制或拒绝该请求。</p></li><li><p>如果计数器的值未超过限制阈值，则继续处理该请求。</p></li><li><p>在新的时间窗口开始时，将计数器重置为0，并重新开始计数</p></li></ol><p>计算器算法的优点是简单、易于实现和理解，适用于单个节点或单个实例的限流场景。但同时也有一些局限性，例如无法处理瞬时突发请求、不支持动态调整限制阈值等。</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span> <span class="token comment">// 限制阈值</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> interval<span class="token punctuation">;</span> <span class="token comment">// 时间窗口间隔</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> counter<span class="token punctuation">;</span> <span class="token comment">// 计数器</span>\n    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> lastResetTime<span class="token punctuation">;</span> <span class="token comment">// 上次重置计数器的时间</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">long</span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>interval <span class="token operator">=</span> interval<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>lastResetTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token comment">// 请求计数器加1</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> lastResetTime <span class="token operator">&gt;=</span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 如果距离上次重置计数器的时间超过了时间窗口间隔，就重置计数器</span>\n            counter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            lastResetTime <span class="token operator">=</span> currentTime<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 判断请求是否超过限制阈值</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isExceeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> limit<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><blockquote><p>测试</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个限流器，限制阈值为5，时间窗口间隔为1000ms</span>\n\n        <span class="token comment">// 启动多个线程模拟请求</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 模拟请求，每次请求计数器加1</span>\n                calculator<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>calculator<span class="token punctuation">.</span><span class="token function">isExceeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;限流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;通过&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟请求间隔</span>\n                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * 17:33:33.272 [Thread-1] INFO org.hzz.CalculatorTest - 通过\n * 17:33:33.272 [Thread-7] INFO org.hzz.CalculatorTest - 限流\n * 17:33:33.272 [Thread-5] INFO org.hzz.CalculatorTest - 限流\n * 17:33:33.271 [Thread-8] INFO org.hzz.CalculatorTest - 限流\n * 17:33:33.271 [Thread-9] INFO org.hzz.CalculatorTest - 限流\n * 17:33:33.272 [Thread-4] INFO org.hzz.CalculatorTest - 通过\n * 17:33:33.271 [Thread-2] INFO org.hzz.CalculatorTest - 通过\n * 17:33:33.272 [Thread-3] INFO org.hzz.CalculatorTest - 通过\n * 17:33:33.272 [Thread-0] INFO org.hzz.CalculatorTest - 通过\n * 17:33:33.272 [Thread-6] INFO org.hzz.CalculatorTest - 限流\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="滑动事件窗口算法" tabindex="-1"><a class="header-anchor" href="#滑动事件窗口算法" aria-hidden="true">#</a> 滑动事件窗口算法</h2><p>滑动时间窗口，又称rolling window。为了解决计数器法统计精度太低的问题，引入了滑动窗口算法。下面这张图，很好地解释了滑动窗口算法：</p><p><img src="D:\\Github\\q10viking.github.io\\docs.vuepress\\public\\images\\sentinel\\image-20230418173826032.png" alt="image-20230418173826032"></p><p>其原理是基于一个固定大小的时间窗口内允许的最大请求数来进行限流。时间窗口会根据时间不断滑动，新的请求会进入时间窗口，而过期的请求会被移出时间窗口。</p><ol><li>时间窗口大小：时间窗口的大小决定了限流算法的粒度，即在多长的时间段内进行限流。例如，如果时间窗口大小为1秒，则每秒内只允许一定数量的请求通过。</li><li>最大请求数：时间窗口内允许的最大请求数限制了在时间窗口内可以通过的请求数量。如果请求的数量超过了最大请求数，则会被限流，拒绝通过。</li><li>时间窗口滑动：随着时间的推移，时间窗口会不断滑动，过期的请求会被移出时间窗口，新的请求会进入时间窗口。这样，限流算法会不断地根据最近的请求流量情况进行调整</li></ol><h3 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1" aria-hidden="true">#</a> 实现</h3><p>简单的滑动时间窗口限流算法的实现思路：</p><ol><li>使用一个队列来保存请求的时间戳信息，队列的长度为时间窗口的大小。</li><li>每次有新的请求到来时，先将当前请求的时间戳加入队列。</li><li>检查队列中是否有过期的请求，即队列头部的请求是否超过了时间窗口的大小，如果有，则从队列头部移除。</li><li>统计队列中的请求数量，即当前时间窗口内的请求数量。</li><li>检查当前时间窗口内的请求数量是否超过了最大请求数，如果超过了，则限流，拒绝通过请求；否则，允许通过请求。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingTimeWindowRateLimiter</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> windowSize<span class="token punctuation">;</span> <span class="token comment">// 时间窗口大小，单位：秒</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxRequests<span class="token punctuation">;</span> <span class="token comment">// 时间窗口内允许的最大请求数</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> requestQueue<span class="token punctuation">;</span> <span class="token comment">// 请求队列，保存请求的时间戳信息</span>\n    <span class="token keyword">public</span> <span class="token class-name">SlidingTimeWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">int</span> windowSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>windowSize <span class="token operator">=</span> windowSize<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>maxRequests <span class="token operator">=</span> maxRequests<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>requestQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当前时间的秒数</span>\n        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">.</span><span class="token function">toSeconds</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// long now = System.currentTimeMillis() / 1000;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> now <span class="token operator">-</span> requestQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> windowSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            requestQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除过期的请求</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            requestQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将当前请求的时间戳加入队列</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 允许通过请求</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 超过最大请求数，限流</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><blockquote><p>测试</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingTimeWindowRateLimiterTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> windowSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 时间窗口大小，单位：秒</span>\n        <span class="token keyword">int</span> maxRequests <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 时间窗口内允许的最大请求数</span>\n        <span class="token class-name">SlidingTimeWindowRateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlidingTimeWindowRateLimiter</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> maxRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 模拟请求</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>\n            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> rateLimiter<span class="token punctuation">.</span><span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求&quot;</span> <span class="token operator">+</span> finalI <span class="token operator">+</span> <span class="token string">&quot; 是否允许通过: &quot;</span> <span class="token operator">+</span> allowed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每次请求间隔0.5秒</span>\n                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * 18:24:29.038 [Thread-11] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求12 是否允许通过: true\n * 18:24:29.038 [Thread-12] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求13 是否允许通过: true\n * 18:24:29.039 [Thread-2] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求3 是否允许通过: false\n * 18:24:29.039 [Thread-3] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求4 是否允许通过: false\n * 18:24:29.039 [Thread-9] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求10 是否允许通过: true\n * 18:24:29.038 [Thread-13] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求14 是否允许通过: true\n * 18:24:29.039 [Thread-1] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求2 是否允许通过: false\n * 18:24:29.039 [Thread-5] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求6 是否允许通过: false\n * 18:24:29.039 [Thread-4] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求5 是否允许通过: false\n * 18:24:29.038 [Thread-6] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求7 是否允许通过: true\n * 18:24:29.038 [Thread-10] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求11 是否允许通过: true\n * 18:24:29.038 [Thread-14] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求15 是否允许通过: true\n * 18:24:29.039 [Thread-7] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求8 是否允许通过: true\n * 18:24:29.038 [Thread-0] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求1 是否允许通过: true\n * 18:24:29.039 [Thread-8] INFO org.hzz.slidewindow.SlidingTimeWindowRateLimiterTest - 请求9 是否允许通过: true\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>',23),o={href:"https://cloud.tencent.com/developer/article/1757728",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Fv)('<h2 id="漏桶算法" tabindex="-1"><a class="header-anchor" href="#漏桶算法" aria-hidden="true">#</a> 漏桶算法</h2><p>首先，我们有一个固定容量的桶，有水流进来，也有水流出去。对于流进来的水来说，我们无法预计一共有多少水会流进来，也无法预计水流的速度。但是对于流出去的水来说，这个桶可以固定水流出的速率。而且，当桶满了之后，多余的水将会溢出。</p><p>我们将算法中的水换成实际应用中的请求，我们可以看到漏桶算法天生就限制了请求的速度。当使用了漏桶算法，我们可以保证接口会以一个常速速率来处理请求。所以漏桶算法天生不会出现临界问题。</p><p><img src="/images/sentinel/image-20230418183118586.png" alt="image-20230418183118586"></p><h3 id="实现-2" tabindex="-1"><a class="header-anchor" href="#实现-2" aria-hidden="true">#</a> 实现</h3><ol><li>漏桶有一个固定的容量，表示漏桶能够存储的最大请求数量。</li><li>漏桶以固定的速率流出请求，表示漏桶每单位时间内能够处理的请求数量。</li><li>当请求到达时，先检查漏桶中是否还有空间，如果没有，则请求被丢弃；如果有空间，则请求被放入漏桶中。</li><li>漏桶按照固定的速率流出请求，如果漏桶中有请求，则每单位时间内会从漏桶中流出一定数量的请求。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakyBucket</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span> <span class="token comment">// 漏桶的容量</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> rate<span class="token punctuation">;</span> <span class="token comment">// 漏桶的流出速率</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> water<span class="token punctuation">;</span> <span class="token comment">// 当前漏桶中的水量</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTime<span class="token punctuation">;</span> <span class="token comment">// 上次漏水的时间戳</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">LeakyBucket</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">int</span> rate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">=</span> rate<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>water <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>lastTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 请求漏桶中的水，返回是否通过漏桶</span>\n    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 计算距离上次漏水的时间</span>\n        <span class="token keyword">long</span> timeElapsed <span class="token operator">=</span> now <span class="token operator">-</span> lastTime<span class="token punctuation">;</span>\n        <span class="token comment">// 计算漏出的水量</span>\n        <span class="token keyword">int</span> waterOut <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>timeElapsed <span class="token operator">*</span> rate <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 更新漏桶中的水量和上次漏水的时间</span>\n        water <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> water <span class="token operator">-</span> waterOut<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        lastTime <span class="token operator">=</span> now<span class="token punctuation">;</span>\n\n        <span class="token comment">// 判断漏桶中是否有足够的容量放入新的请求</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>water <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            water<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 漏桶通过，请求被处理</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 漏桶已满，请求被丢弃</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">LeakyBucket</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeakyBucket</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 漏桶容量为10，流出速率为2个请求/秒</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">boolean</span> result <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟20个请求</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token string">&quot;通过&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;丢弃&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟每隔500毫秒发起一个请求</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="令牌桶算法" tabindex="-1"><a class="header-anchor" href="#令牌桶算法" aria-hidden="true">#</a> 令牌桶算法</h2><p>在这个算法中，系统会维护一个固定容量的令牌桶，每个令牌表示系统允许处理一个请求的权利。令牌按照固定的速率以恒定的速度往桶中生成，而请求需要从桶中取走一个令牌才能被处理。</p><p>当一个请求到达时，系统首先检查桶中是否有足够的令牌可供请求取走。如果有足够的令牌，则请求可以被处理，并且从桶中取走一个令牌。如果没有足够的令牌，则请求无法被处理，除非桶中生成了新的令牌。这样可以实现对请求的流量进行控制，限制系统在一定时间内可以处理的请求数量，防止系统被过多的请求压垮。</p><p><img src="/images/sentinel/image-20230418195803027.png" alt="image-20230418195803027"></p><h3 id="实现-3" tabindex="-1"><a class="header-anchor" href="#实现-3" aria-hidden="true">#</a> 实现</h3><ol><li>定义令牌桶的容量：令牌桶有一个固定的容量，表示系统在任意时刻能够处理的最大请求数量。</li><li>定义令牌生成速率：令牌桶有一个固定的令牌生成速率，表示系统每秒钟生成的令牌数量。</li><li>初始化令牌桶：在启动时，将令牌桶初始化为满桶状态，即容量内包含所有的令牌。</li><li>请求令牌：当一个请求到达时，需要从令牌桶中获取一个令牌，表示一个请求被允许执行。</li><li>判断令牌桶是否有足够的令牌：如果令牌桶中有足够的令牌，则允许请求执行，并从令牌桶中减去一个令牌。</li><li>判断令牌桶是否为空：如果令牌桶为空，则拒绝请求执行，因为系统在当前时刻无法处理更多的请求。</li><li>令牌生成：令牌桶会根据设定的令牌生成速率，定期（如每秒钟）生成一定数量的令牌，添加到令牌桶中，以供后续请求使用。</li><li>控制请求速率：通过调整令牌生成速率和令牌桶的容量，可以控制请求的访问速率，从而实现限流的效果。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucket</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span> <span class="token comment">// 令牌桶容量</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> rate<span class="token punctuation">;</span> <span class="token comment">// 生成令牌的速率</span>\n    <span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> tokens<span class="token punctuation">;</span> <span class="token comment">// 当前令牌数量</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> lastRefillTime<span class="token punctuation">;</span> <span class="token comment">// 上次填充令牌的时间</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">TokenBucket</span><span class="token punctuation">(</span><span class="token keyword">long</span> capacity<span class="token punctuation">,</span> <span class="token keyword">double</span> rate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">=</span> rate<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>tokens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>lastRefillTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 获取令牌，返回true表示成功获取到令牌，返回false表示未获取到令牌</span>\n    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">refillTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 填充令牌</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            tokens<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取走一个令牌</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 检查是否有足够的令牌可用，返回true表示有足够的令牌，返回false表示令牌不足</span>\n    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">checkToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">refillTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 填充令牌</span>\n        <span class="token keyword">return</span> tokens<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 填充令牌</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refillTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">double</span> elapsedTime <span class="token operator">=</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> lastRefillTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">;</span> <span class="token comment">// 计算经过的时间（秒）</span>\n        <span class="token keyword">long</span> tokensToAdd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>elapsedTime <span class="token operator">*</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算需要添加的令牌数量</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tokensToAdd <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 使用CAS原子操作更新令牌数量</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">long</span> currentTokens <span class="token operator">=</span> tokens<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">long</span> newTokens <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>currentTokens <span class="token operator">+</span> tokensToAdd<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不超过令牌桶容量</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>currentTokens<span class="token punctuation">,</span> newTokens<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    lastRefillTime <span class="token operator">=</span> currentTime<span class="token punctuation">;</span> <span class="token comment">// 更新上次填充令牌的时间</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><blockquote><p>测试</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucketTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THREAD_COUNT</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 测试线程数</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">REQUESTS_PER_THREAD</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 每个线程发送的请求数量</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">REQUEST_INTERVAL_MS</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token comment">// 请求间隔时间（毫秒）</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CAPACITY</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 令牌桶容量</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">RATE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 令牌生成速率</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TokenBucket</span> tokenBucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenBucket</span><span class="token punctuation">(</span><span class="token constant">CAPACITY</span><span class="token punctuation">,</span> <span class="token constant">RATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token constant">THREAD_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 创建多个测试线程</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">THREAD_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">REQUESTS_PER_THREAD</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// 模拟发送请求</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokenBucket<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Thread {} - Request {}: Got token&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Thread {} - Request {}: No token&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n\n                    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token constant">REQUEST_INTERVAL_MS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            executorService<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * 20:26:45.546 [pool-1-thread-2] INFO org.hzz.tokenbucket.TokenBucketTest - Thread 13 - Request 10: Got token\n * 20:26:45.546 [pool-1-thread-8] INFO org.hzz.tokenbucket.TokenBucketTest - Thread 19 - Request 10: Got token\n * 20:26:45.610 [pool-1-thread-10] INFO org.hzz.tokenbucket.TokenBucketTest - Thread 21 - Request 11: No token\n * 20:26:45.610 [pool-1-thread-9] INFO org.hzz.tokenbucket.TokenBucketTest - Thread 20 - Request 11: Got token\n * 20:26:45.610 [pool-1-thread-5] INFO org.hzz.tokenbucket.TokenBucketTest - Thread 16 - Request 11: No token\n * 20:26:45.610 [pool-1-thread-3] INFO org.hzz.tokenbucket.TokenBucketTest - Thread 14 - Request 11: No token\n * 20:26:45.610 [pool-1-thread-7] INFO org.hzz.tokenbucket.TokenBucketTest - Thread 18 - Request 11: Got token\n * 20:26:45.610 [pool-1-thread-8] INFO org.hzz.tokenbucket.TokenBucketTest - Thread 19 - Request 11: Got token\n * 20:26:45.610 [pool-1-thread-1] INFO org.hzz.tokenbucket.TokenBucketTest - Thread 12 - Request 11: No token\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div>',16),l={},u=(0,a(66262).A)(l,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("p",null,[(0,p.Lk)("a",t,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),e,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("Java 实现滑动时间窗口限流算法，你见过吗？ - 腾讯云开发者社区-腾讯云 (tencent.com)"),(0,p.bF)(a)])]),c],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);