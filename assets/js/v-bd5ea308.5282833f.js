"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[10704],{72297:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-bd5ea308",path:"/nacos/09%20NacosRestTemplate%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/nacos/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"从应用层分析BIO Socket通信",slug:"从应用层分析bio-socket通信",children:[]},{level:2,title:"底层使用",slug:"底层使用",children:[]},{level:2,title:"HttpURLConnection",slug:"httpurlconnection",children:[]},{level:2,title:"JDK",slug:"jdk",children:[]}],filePathRelative:"nacos/09 NacosRestTemplate源码分析.md"}},26980:(e,a,n)=>{n.r(a),n.d(a,{default:()=>d});var s=n(20641);const t=(0,s.Fv)('<h2 id="从应用层分析bio-socket通信" tabindex="-1"><a class="header-anchor" href="#从应用层分析bio-socket通信" aria-hidden="true">#</a> 从应用层分析BIO Socket通信</h2><p>https://www.processon.com/view/link/62903c09f346fb41eeb5b997)</p><h2 id="底层使用" tabindex="-1"><a class="header-anchor" href="#底层使用" aria-hidden="true">#</a> 底层使用</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>RestResultResponseHandler 返回结果时时怎么处理泛型的？\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="httpurlconnection" tabindex="-1"><a class="header-anchor" href="#httpurlconnection" aria-hidden="true">#</a> HttpURLConnection</h2><ol><li>基于http协议的</li><li>是阻塞式的</li><li>处理了粘包粘包的需求？</li></ol><h2 id="jdk" tabindex="-1"><a class="header-anchor" href="#jdk" aria-hidden="true">#</a> JDK</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>// string to byte[]\n  byte[] bytes = &quot;hello&quot;.getBytes(StandardCharsets.UTF_8);\n\n  // byte[] to string\n  String s = new String(bytes, StandardCharsets.UTF_8);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>HttpURLConnection是<strong>基于http协议的类</strong>，用于与服务端进行http协议的通信。只有调用过相关的getResponseXXX才会将数据发送出去。即使之前outputstream.write 并且 flush也没用。http协议是一个有去有回的协议。</p>',9),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Messages",target:"_blank",rel:"noopener noreferrer"},o={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST",target:"_blank",rel:"noopener noreferrer"},l={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers",target:"_blank",rel:"noopener noreferrer"},p=(0,s.Fv)('<p>看看发送一个对象是怎么处理的</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded<span class="token operator">:</span> 数据被编码成以 <span class="token char">&#39;&amp;&#39;</span> 分隔的键<span class="token operator">-</span>值对<span class="token punctuation">,</span> 同时以 <span class="token char">&#39;=&#39;</span> 分隔键和值<span class="token punctuation">.</span> 非字母或数字的字符会被 percent<span class="token operator">-</span>encoding<span class="token operator">:</span> 这也就是为什么这种类型不支持二进制数据<span class="token punctuation">(</span>应使用 multipart<span class="token operator">/</span>form<span class="token operator">-</span>data 代替<span class="token punctuation">)</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code>application/json;charset=UTF-8 \n{&quot;body-key2&quot;:&quot;body-val2&quot;,&quot;body-key1&quot;:&quot;body-val1&quot;}\n\napplication/x-www-form-urlencoded\nbody-key2=body-val2&amp;body-key1=body-val1&amp;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',3),i={href:"https://blog.csdn.net/PacosonSWJTU/article/details/121070498",target:"_blank",rel:"noopener noreferrer"},c={},d=(0,n(66262).A)(c,[["render",function(e,a){const n=(0,s.g2)("OutboundLink");return(0,s.uX)(),(0,s.CE)(s.FK,null,[t,(0,s.Lk)("p",null,[(0,s.Lk)("a",r,[(0,s.eW)("HTTP消息 - HTTP | MDN (mozilla.org)"),(0,s.bF)(n)])]),(0,s.Lk)("p",null,[(0,s.Lk)("a",o,[(0,s.eW)("POST - HTTP | MDN (mozilla.org)"),(0,s.bF)(n)])]),(0,s.Lk)("p",null,[(0,s.Lk)("a",l,[(0,s.eW)("HTTP Headers - HTTP | MDN (mozilla.org)"),(0,s.bF)(n)])]),p,(0,s.Lk)("p",null,[(0,s.Lk)("a",i,[(0,s.eW)("java URL和URI_PacosonSWJTU的博客-CSDN博客_java url和uri"),(0,s.bF)(n)])])],64)}]])},66262:(e,a)=>{a.A=(e,a)=>{const n=e.__vccOpts||e;for(const[e,s]of a)n[e]=s;return n}}}]);