"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[69164],{56404:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-d02ab3d6",path:"/RocketMQ/06%20%E5%8E%9F%E7%94%9FAPI%E4%BD%BF%E7%94%A8.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/RocketMQ/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"依赖",slug:"依赖",children:[]}],filePathRelative:"RocketMQ/06 原生API使用.md"}},3142:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const t=(0,s(20641).Fv)('<h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>rocketmq-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>RocketMQ的生产者和消费者的编程模型都是有个比较固定的步骤的</p><ul><li>消息发送者的固定步骤 <ol><li>创建消息生产者producer，并制定<strong>生产者组名</strong>(同一类Producer组成一个集合，叫做生产者组。同一组的 Producer被认为是发送同一类消息且发送逻辑一致。)</li><li>指定Nameserver地址(集群以逗号分隔)</li><li>启动producer</li><li>创建消息对象，指定主题Topic、Tag和消息体</li><li>发送消息</li><li>关闭生产者producer</li></ol></li><li>消息消费者的固定步骤 <ol><li>创建消费者Consumer，制定消费者组名</li><li>指定Nameserver地址</li><li>订阅主题Topic和Tag</li><li>设置回调函数，处理消息</li><li>启动消费者consumer</li></ol></li></ul>',4),e={},p=(0,s(66262).A)(e,[["render",function(n,a){return t}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);