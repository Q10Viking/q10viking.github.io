"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[49750],{85628:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-93416b76",path:"/concurrency/19%20ReentrantLock%E5%8F%AF%E9%87%8D%E5%85%A5%E6%80%A7.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/concurrency/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"说说synchronized与ReentrantLock的区别",slug:"说说synchronized与reentrantlock的区别",children:[]}],filePathRelative:"concurrency/19 ReentrantLock可重入性.md"}},4825:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(20641).Fv)('<h2 id="说说synchronized与reentrantlock的区别" tabindex="-1"><a class="header-anchor" href="#说说synchronized与reentrantlock的区别" aria-hidden="true">#</a> 说说synchronized与ReentrantLock的区别</h2><ul><li><strong>用法不同</strong>：synchronized 可以用于修饰普通方法、静态方法以及代码块，而 ReentrantLock 仅适用于代码块。</li><li>**获取锁和释放锁方式不同：**Synchronized 是隐式锁，可以自动加锁和释放锁，当进入 synchronized 修饰的代码块之后会自动加锁，当离开 synchronized 的代码段之后会自动释放锁。ReentrantLock 是显式锁，需要手动加锁和释放锁， 在使用之前需要先创建 ReentrantLock 对象，然后使用 lock 方法进行加锁，使用完之后再调用 unlock 方法释放锁。</li><li>**锁类型：**默认情况下，synchronized 是非公平锁，而 ReentrantLock 也是非公平锁，但可以手动将 ReentrantLock 配置为公平锁，允许线程按照它们请求锁的顺序获取锁。</li><li><strong>中断响应</strong>： synchronized 无法直接响应中断，可能导致线程在锁上无限期地等待。ReentrantLock 具有响应中断的能力，可以在等待锁的过程中响应线程的中断请求，从而避免潜在的死锁情况。</li><li><strong>底层实现</strong>：synchronized 是一个关键字，是在JVM层面通过监视器实现的，而 ReentrantLock 是基于AQS实现的。</li></ul><p>Lock，Synchronized都具有重入性</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Juc02_Thread_ReentrantLock</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> threadName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//默认创建的是独占锁，排它锁；同一时刻读或者写只允许一个线程获取锁</span>\n        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Thread:{},第一次加锁&quot;</span><span class="token punctuation">,</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Thread:{},第二次加锁&quot;</span><span class="token punctuation">,</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Thread:{},第一次解锁&quot;</span><span class="token punctuation">,</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Thread:{},第二次解锁&quot;</span><span class="token punctuation">,</span>threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Thread</span> t0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token function">reentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;t0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        t0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token function">reentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n 14:30:31.592 [t0] INFO com.yg.edu.lock.Juc02_Thread_ReentrantLock - Thread:t0,第一次加锁\n 14:30:31.596 [t0] INFO com.yg.edu.lock.Juc02_Thread_ReentrantLock - Thread:t0,第二次加锁\n 14:30:31.596 [t0] INFO com.yg.edu.lock.Juc02_Thread_ReentrantLock - Thread:t0,第一次解锁\n 14:30:31.596 [t0] INFO com.yg.edu.lock.Juc02_Thread_ReentrantLock - Thread:t0,第二次解锁\n 14:30:31.597 [t1] INFO com.yg.edu.lock.Juc02_Thread_ReentrantLock - Thread:t1,第一次加锁\n 14:30:31.597 [t1] INFO com.yg.edu.lock.Juc02_Thread_ReentrantLock - Thread:t1,第二次加锁\n 14:30:31.597 [t1] INFO com.yg.edu.lock.Juc02_Thread_ReentrantLock - Thread:t1,第一次解锁\n 14:30:31.597 [t1] INFO com.yg.edu.lock.Juc02_Thread_ReentrantLock - Thread:t1,第二次解锁\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>',4),p={},e=(0,a(66262).A)(p,[["render",function(n,s){return t}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);