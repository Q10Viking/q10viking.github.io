"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[56944],{61915:(e,o,n)=>{n.r(o),n.d(o,{data:()=>i});const i={key:"v-ff9543de",path:"/concurrency/35%20%E4%BB%BB%E5%8A%A1%E6%80%A7%E8%B4%A8%E7%B1%BB%E5%9E%8B.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/concurrency/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"CPU密集型（CPU-bound)",slug:"cpu密集型-cpu-bound",children:[]},{level:2,title:"IO密集型（I/O bound)",slug:"io密集型-i-o-bound",children:[]},{level:2,title:"CPU密集型 vs IO密集型",slug:"cpu密集型-vs-io密集型",children:[]}],filePathRelative:"concurrency/35 任务性质类型.md"}},49586:(e,o,n)=>{n.r(o),n.d(o,{default:()=>t});const i=(0,n(20641).Fv)('<h2 id="cpu密集型-cpu-bound" tabindex="-1"><a class="header-anchor" href="#cpu密集型-cpu-bound" aria-hidden="true">#</a> CPU密集型（CPU-bound)</h2><p>CPU密集型也叫<strong>计算密集型</strong>，指的是系统的硬盘、内存性能相对CPU要好很多，此时，系统运作大部分的状况是CPU Loading 100%，CPU要读/写I/O(硬盘/内存)，I/O在很短的时间就可以完成，而CPU还有许多运算要处理，CPU Loading很高。</p><p>在多重程序系统中，大部份时间用来做计算、逻辑判断等CPU动作的程序称之CPU bound。例如一个计算圆周率至小数点一千位以下的程序，在执行的过程当中绝大部份时间用在三角函数和开根号的计算，便是属于CPU bound的程序。</p><p>CPU bound的程序一般而言CPU占用率相当高。这可能是因为任务本身不太需要访问I/O设备，也可能是因为程序是多线程实现因此屏蔽掉了等待I/O的时间。</p><p>线程数一般设置为：</p><p><strong>线程数 = CPU核数+1 (现代CPU支持超线程)</strong></p><h2 id="io密集型-i-o-bound" tabindex="-1"><a class="header-anchor" href="#io密集型-i-o-bound" aria-hidden="true">#</a> IO密集型（I/O bound)</h2><p>IO密集型指的是系统的CPU性能相对硬盘、内存要好很多，此时，系统运作，大部分的状况是CPU在等I/O (硬盘/内存) 的读/写操作，此时CPU Loading并不高。</p><p>I/O bound的程序一般在达到性能极限时，CPU占用率仍然较低。这可能是因为任务本身需要大量I/O操作，而pipeline做得不是很好，没有充分利用处理器能力。</p><p>线程数一般设置为：</p><p><em><em>线程数 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）</em> CPU数目</em>*</p><h2 id="cpu密集型-vs-io密集型" tabindex="-1"><a class="header-anchor" href="#cpu密集型-vs-io密集型" aria-hidden="true">#</a> CPU密集型 vs IO密集型</h2><ol><li>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是<strong>任务越多，花在任务切换的时间就越多</strong>，CPU执行任务的效率就越低，所以，<strong>要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数</strong>。 <ol><li>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</li></ol></li><li>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。<strong>常见的大部分任务都是IO密集型任务，比如Web应用</strong>。 <ol><li>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，<strong>用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率</strong>。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</li></ol></li></ol>',13),r={},t=(0,n(66262).A)(r,[["render",function(e,o){return i}]])},66262:(e,o)=>{o.A=(e,o)=>{const n=e.__vccOpts||e;for(const[e,i]of o)n[e]=i;return n}}}]);