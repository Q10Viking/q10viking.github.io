"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[45831],{95523:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-559335c0",path:"/golang/17%20%E6%8E%A5%E5%8F%A3.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/golang/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"接口",slug:"接口",children:[]},{level:2,title:"接口的赋值⭐",slug:"接口的赋值⭐",children:[{level:3,title:"接口与结构体指针",slug:"接口与结构体指针",children:[]}]},{level:2,title:"接口嵌入",slug:"接口嵌入",children:[]},{level:2,title:"空接口❤️",slug:"空接口❤️",children:[]},{level:2,title:"面向接口编程",slug:"面向接口编程",children:[]}],filePathRelative:"golang/17 接口.md"}},27639:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(20641);const t=(0,p.Fv)('<h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Transporter <span class="token keyword">interface</span> <span class="token punctuation">{</span> <span class="token comment">// 定义接口，通常以er结尾</span>\n\t<span class="token function">move</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">,</span> dst <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>\n\t<span class="token comment">// 变量名也可以省略</span>\n\t<span class="token function">whistle</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Car <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment">// 定义结构体时无需指定要实现什么类型的接口</span>\n\tprice <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 只要结构体实现了接口声明里的方法，就称为该结构体实现了该接口</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">,</span> dst <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> c<span class="token punctuation">.</span>price<span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token function">whistle</span><span class="token punctuation">(</span>price <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> c<span class="token punctuation">.</span>price\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="接口的赋值⭐" tabindex="-1"><a class="header-anchor" href="#接口的赋值⭐" aria-hidden="true">#</a> 接口的赋值⭐</h2><p><img src="/images/golang/image-20221109161926767.png" alt="image-20221109161926767"></p><h3 id="接口与结构体指针" tabindex="-1"><a class="header-anchor" href="#接口与结构体指针" aria-hidden="true">#</a> 接口与结构体指针</h3><p>接口与结构体指针的赋值要注意接口和结构体的类型是否一致，以及是否实现了接口中的所有方法</p><p>如果一个结构体指针实现了一个接口，那么它可以赋值给该接口类型的变量，也可以通过类型断言转换回结构体指针</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token operator">/</span> 定义一个接口\n<span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n    <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 定义一个结构体</span>\n<span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    Name <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 定义一个结构体指针的方法，实现Animal接口</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">&quot;woof&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 声明一个Animal接口变量</span>\n    <span class="token keyword">var</span> a Animal\n    <span class="token comment">// 声明一个Dog结构体指针</span>\n    <span class="token keyword">var</span> d <span class="token operator">*</span>Dog <span class="token operator">=</span> <span class="token operator">&amp;</span>Dog<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;Spot&quot;</span><span class="token punctuation">}</span>\n    <span class="token comment">// 将d赋值给a，因为d实现了Animal接口</span>\n    a <span class="token operator">=</span> d\n    <span class="token comment">// 调用a的Speak方法，输出Spot woof</span>\n    a<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 将a转换回Dog结构体指针，赋值给d1</span>\n    <span class="token keyword">var</span> d1 <span class="token operator">*</span>Dog <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Dog<span class="token punctuation">)</span>\n    <span class="token comment">// 输出d1的Name，输出Spot</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><blockquote><p>var a Animal为什么不声明为var a *Animal？</p></blockquote><p>因为接口本身就是一个指针类型，它内部存储了一个指向实现对象的指针和一个指向接口类型信息的指针。所以var a Animal就可以表示一个接口变量，不需要再加上*号。如果你写成var a *Animal，那么a就是一个指向接口的指针，而不是一个接口变量。</p><hr><p>请看下面的代码块：</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">type</span> coder <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n    <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Gopher <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    language <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>p Gopher<span class="token punctuation">)</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am coding %s language\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>language<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Gopher<span class="token punctuation">)</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am debuging %s language\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>language<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// gopher 是值类型</span>\n    gopher <span class="token operator">:=</span> Gopher<span class="token punctuation">{</span><span class="token string">&quot;Go&quot;</span><span class="token punctuation">}</span>\n    <span class="token comment">// gopherPtr 是指针类型</span>\n    gopherPtr <span class="token operator">:=</span> <span class="token operator">&amp;</span>Gopher<span class="token punctuation">{</span><span class="token string">&quot;Go&quot;</span><span class="token punctuation">}</span>\n\n    <span class="token comment">// 值类型不能赋值给接口变量，因为 debug 方法的接收者是指针类型</span>\n    <span class="token comment">// var c coder = gopher // 编译错误</span>\n    <span class="token comment">// 指针类型可以赋值给接口变量，因为它实现了接口中的所有方法</span>\n    <span class="token keyword">var</span> c coder <span class="token operator">=</span> gopherPtr\n\n    c<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    c<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><blockquote><p>接口类型的变量可以存储任何实现了该接口的值，无论是值类型还是指针类型。² 但是，如果一个接口方法的接收者是指针类型，那么只有指针类型才能实现该接口，而值类型不能。</p></blockquote><p>例如，如果我们定义了一个接口：</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> coder <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n    <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后我们定义了一个结构体：</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Gopher <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    language <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果我们想让 Gopher 类型实现 coder 接口，我们需要为 Gopher 类型定义 code 和 debug 两个方法。如果我们这样定义：</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p Gopher<span class="token punctuation">)</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am coding %s language\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>language<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Gopher<span class="token punctuation">)</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am debuging %s language\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>language<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>那么，只有 *Gopher 类型才能实现 coder 接口，因为 debug 方法的接收者是指针类型。¹ 如果我们这样定义：</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p Gopher<span class="token punctuation">)</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am coding %s language\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>language<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>p Gopher<span class="token punctuation">)</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am debuging %s language\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>language<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>那么，Gopher 类型和 *Gopher 类型都能实现 coder 接口，因为 code 和 debug 方法的接收者都是值类型。</p><p>所以，如果你想让一个结构体对象直接作为接口类型的变量赋值，而不使用指针，你需要确保该结构体的所有方法的接收者都是值类型。</p><p>使用值接收者还是指针接收者的原则是：如果方法需要修改接收者的状态或者避免数据拷贝，就使用指针接收者；如果方法不需要修改接收者或者拷贝数据不影响性能，就使用值接收者。</p><h2 id="接口嵌入" tabindex="-1"><a class="header-anchor" href="#接口嵌入" aria-hidden="true">#</a> 接口嵌入</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Transporter <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token function">whilstle</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Steamer <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n    Transporter <span class="token comment">// 接口嵌入，形式上 相当于继承</span>\n\t<span class="token function">displacement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="空接口❤️" tabindex="-1"><a class="header-anchor" href="#空接口❤️" aria-hidden="true">#</a> 空接口❤️</h2><p><img src="/images/golang/image-20221109162814962.png" alt="image-20221109162814962"></p><h2 id="面向接口编程" tabindex="-1"><a class="header-anchor" href="#面向接口编程" aria-hidden="true">#</a> 面向接口编程</h2>',30),e={href:"https://github.com/Q10Viking/Learn-golang/tree/main/rec_sys",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Fv)('<div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\trecommender <span class="token operator">:=</span> Recommender<span class="token punctuation">{</span>\n\t\tRecallers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>recall<span class="token punctuation">.</span>Recaller<span class="token punctuation">{</span>\n\t\t\t<span class="token operator">&amp;</span>recall<span class="token punctuation">.</span>HotRecaller<span class="token punctuation">{</span>Tag<span class="token punctuation">:</span> <span class="token string">&quot;hot&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\tSort<span class="token punctuation">:</span> <span class="token operator">&amp;</span>sort<span class="token punctuation">.</span>PriceSorter<span class="token punctuation">{</span>Tag<span class="token punctuation">:</span> <span class="token string">&quot;price sort&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\tFilter<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>filter<span class="token punctuation">.</span>Filter<span class="token punctuation">{</span>\n\t\t\t<span class="token operator">&amp;</span>filter<span class="token punctuation">.</span>SaleFilter<span class="token punctuation">{</span>Tag<span class="token punctuation">:</span> <span class="token string">&quot;sale filter&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\n\tresult <span class="token operator">:=</span> recommender<span class="token punctuation">.</span><span class="token function">Rec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">for</span> idx<span class="token punctuation">,</span> product <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%d名: %+v\\n&quot;</span><span class="token punctuation">,</span> idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> product<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',1),c={},l=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("github: rec_sys"),(0,p.bF)(a)])]),o],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);