"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[99205],{86868:(e,i,t)=>{t.r(i),t.d(i,{data:()=>r});const r={key:"v-b38032a0",path:"/springboot/springboot%E6%89%A9%E5%B1%95%E7%82%B9.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"SpringBoot启动LifeCycle",slug:"springboot启动lifecycle",children:[]},{level:2,title:"事件监听机制",slug:"事件监听机制",children:[]},{level:2,title:"自动装配机制",slug:"自动装配机制",children:[]},{level:2,title:"@PostConstruct 与InitializeBean",slug:"postconstruct-与initializebean",children:[]}],filePathRelative:"springboot/springboot扩展点.md"}},23254:(e,i,t)=>{t.r(i),t.d(i,{default:()=>a});const r=(0,t(20641).Fv)('<h2 id="springboot启动lifecycle" tabindex="-1"><a class="header-anchor" href="#springboot启动lifecycle" aria-hidden="true">#</a> SpringBoot启动LifeCycle</h2><p>扩展点实现SmartLifeCycle</p><p>LifeCycleProcessor 切入点nacos服务发现。</p><h2 id="事件监听机制" tabindex="-1"><a class="header-anchor" href="#事件监听机制" aria-hidden="true">#</a> 事件监听机制</h2><p><strong>ServletWebServerInitializedEvent</strong></p><h2 id="自动装配机制" tabindex="-1"><a class="header-anchor" href="#自动装配机制" aria-hidden="true">#</a> 自动装配机制</h2><p>spring.factories</p><h2 id="postconstruct-与initializebean" tabindex="-1"><a class="header-anchor" href="#postconstruct-与initializebean" aria-hidden="true">#</a> @PostConstruct 与InitializeBean</h2>',8),n={},a=(0,t(66262).A)(n,[["render",function(e,i){return r}]])},66262:(e,i)=>{i.A=(e,i)=>{const t=e.__vccOpts||e;for(const[e,r]of i)t[e]=r;return t}}}]);