"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[82762],{97419:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-0f39ccf8",path:"/designpattern/03%20%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/designpattern/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"模式定义",slug:"模式定义",children:[]},{level:2,title:"代码示例",slug:"代码示例",children:[]},{level:2,title:"应用场景",slug:"应用场景",children:[{level:3,title:"优点",slug:"优点",children:[]},{level:3,title:"JDK源码中的应用",slug:"jdk源码中的应用",children:[]}]}],filePathRelative:"designpattern/03 抽象工厂模式.md"}},78409:(n,a,s)=>{s.r(a),s.d(a,{default:()=>l});var e=s(20641);const t=(0,e.Fv)('<h2 id="模式定义" tabindex="-1"><a class="header-anchor" href="#模式定义" aria-hidden="true">#</a> 模式定义</h2><ul><li><strong>抽象工厂模式</strong>提供一个接口，用于创建一系列相关或相互依赖的对象，而无需指定具体的类。它适用于需要一次性创建多个相关对象，以形成一个产品族。抽象工厂模式通常由抽象工厂、具体工厂、抽象产品和具体产品组成。通过切换具体工厂实现类，可以改变整个产品族。</li></ul><p>提供一个创建一系列相关或互相依赖对象的接口，而无需指定它们具体的类</p><p><img src="/images/designpattern/image-20230228095654518.png" alt="image-20230228095654518"></p><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2>',5),p={href:"https://github.com/Q10Viking/learncode/tree/main/designpattern/src/org/hzz/abstractfactory",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Fv)('<blockquote><p>变化: mysql , sqlserver , oracle ........</p><p>c/s(稳定): connection, command, ......</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">//        IDBComponent db = new OracleComponent();</span>\n        <span class="token class-name">IDBComponent</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySQLComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">IConnection</span> connection <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ICommand</span> command <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        connection<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        command<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="/images/designpattern/image-20230228102518041.png" alt="image-20230228102518041"></p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><p>程序需要处理不同系列的相关产品，但是您不希望它依赖于这些产品的 具体类时， 可以使用抽象工厂</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ol><li>可以确信你从工厂得到的产品彼此是兼容的</li><li>可以避免具体产品和客户端代码之间的紧密耦合</li><li>符合单一职责原则 4.符合开闭原则</li></ol><h3 id="jdk源码中的应用" tabindex="-1"><a class="header-anchor" href="#jdk源码中的应用" aria-hidden="true">#</a> JDK源码中的应用</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Connection</span>\n<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Driver</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',9),o={},l=(0,s(66262).A)(o,[["render",function(n,a){const s=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,(0,e.Lk)("p",null,[(0,e.Lk)("a",p,[(0,e.eW)("Source Code"),(0,e.bF)(s)])]),c],64)}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);