"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[98130],{3784:(t,e,l)=>{l.r(e),l.d(e,{data:()=>a});const a={key:"v-0b892227",path:"/MySQL/53%20%E5%B9%B6%E5%8F%91%E4%BA%8B%E5%8A%A1%E5%8F%AF%E8%83%BD%E5%B8%A6%E6%9D%A5%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[],filePathRelative:"MySQL/53 并发事务可能带来哪些问题.md"}},2562:(t,e,l)=>{l.r(e),l.d(e,{default:()=>i});var a=l(20641);const r=[(0,a.Lk)("li",null,"**丢失修改（Lost Update）：**两个或多个事务同时修改同一数据，并且最终只有一个事务的修改被保留，其他事务的修改被覆盖或丢失。这种情况可能会导致数据的部分更新丢失，造成数据的不一致性。",-1),(0,a.Lk)("li",null,"**脏读（Dirty Read）：**一个事务读取了另一个事务未提交的数据。假设事务A修改了一条数据但未提交，事务B却读取了这个未提交的数据，导致事务B基于不准确的数据做出了错误的决策。",-1),(0,a.Lk)("li",null,"**不可重复读（Non-repeatable Read）：**一个事务在多次读取同一数据时，得到了不同的结果。假设事务A读取了一条数据，事务B修改或删除了该数据并提交，然后事务A再次读取同一数据，发现与之前的读取结果不一致，造成数据的不一致性。",-1),(0,a.Lk)("li",null,"**幻读（Phantom Read）：**一个事务在多次查询同一范围的数据时，得到了不同数量的结果。假设事务A根据某个条件查询了一组数据，事务B插入了符合该条件的新数据并提交，然后事务A再次查询同一条件下的数据，发现结果集发生了变化，产生了幻觉般的新增数据。",-1)],n={},i=(0,l(66262).A)(n,[["render",function(t,e){return(0,a.uX)(),(0,a.CE)("ol",null,r)}]])},66262:(t,e)=>{e.A=(t,e)=>{const l=t.__vccOpts||t;for(const[t,a]of e)l[t]=a;return l}}}]);