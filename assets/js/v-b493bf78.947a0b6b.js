"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[28883],{46415:(e,r,o)=>{o.r(r),o.d(r,{data:()=>n});const n={key:"v-b493bf78",path:"/Docker/16%20k8s%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Docker/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"理解Node Pod Container的关系",slug:"理解node-pod-container的关系",children:[]},{level:2,title:"K8S组件",slug:"k8s组件",children:[{level:3,title:"master node组件",slug:"master-node组件",children:[]},{level:3,title:"work node组件",slug:"work-node组件",children:[]}]},{level:2,title:"组件协调工作过程",slug:"组件协调工作过程",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"Docker/16 k8s核心架构.md"}},69327:(e,r,o)=>{o.r(r),o.d(r,{default:()=>S});var n=o(20641);const t=(0,n.Fv)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>K8S 的核心功能：自动化运维管理多个容器化程序</p><p>从宏观架构上来了解K8S 的设计思想，看看它是怎么管理容器的</p></div><p>在使用kubernetes之前，你需要把你的服务先容器化，或者使用dockerhub上人家包好的Image建立。比如一个nginx应用，mysql应用都可以架设在k8s上面。</p><h2 id="理解node-pod-container的关系" tabindex="-1"><a class="header-anchor" href="#理解node-pod-container的关系" aria-hidden="true">#</a> 理解Node Pod Container的关系</h2><p><img src="/images/Docker/IapesES8j6g.png" alt="img"></p><ul><li>Node是K8S中的一台机器</li><li>Pod是K8S中的基本单位，负责装一个或者多个Container（容器）</li><li>Container就是我们容器化好的应用</li></ul><blockquote><p>需要Pod来作为基本单位的原因是，如果每个Container都作为K8S的最小单位，那么管理网络会变得非常困难。一Pod来隔离，同一个Pod里面的Container能够在本地端互相连线，只有需要提供给外部的API才需要暴露端口</p></blockquote><h2 id="k8s组件" tabindex="-1"><a class="header-anchor" href="#k8s组件" aria-hidden="true">#</a> K8S组件</h2><p>K8S 是属于<strong>主从设备模型（Master-Slave 架构）</strong>，即有 Master 节点负责核心的调度、管理和运维，Slave 节点则执行用户的程序。但是在 K8S 中，主节点一般被称为<strong>Master Node 或者 Head Node</strong>，而从节点则被称为<strong>Worker Node 或者 Node</strong>。</p><p>注意：Master Node 和 Worker Node 是分别安装了 K8S 的 Master 和 Woker 组件的实体服务器，每个 Node 都对应了一台实体服务器（虽然 Master Node 可以和其中一个 Worker Node 安装在同一台服务器，但是建议 Master Node 单独部署），<strong>所有 Master Node 和 Worker Node 组成了 K8S 集群</strong>，同一个集群可能存在多个 Master Node 和 Worker Node。</p>',9),l={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/components/",target:"_blank",rel:"noopener noreferrer"},a=(0,n.Fv)('<blockquote><p>k8s的图</p></blockquote><p><img src="/images/Docker/110769.png" alt="https://note.youdao.com/yws/public/resource/bc7bee305611b52d6900ba209a92bd4d/xmlnote/A72D19C05A594433B65EB9E1633B0FA2/110769"></p><blockquote><p>目前的新图(感觉没有上图清晰)</p></blockquote><p><img src="/images/Docker/components-of-kubernetes.svg" alt="Kubernetes 的组件"></p><p>变化就是K8S Master改为了Control Plane</p><hr><h3 id="master-node组件" tabindex="-1"><a class="header-anchor" href="#master-node组件" aria-hidden="true">#</a> master node组件</h3><ul><li><strong>API Server</strong>。<strong>K8S 的请求入口服务</strong>。API Server 负责接收 K8S 所有请求（来自 UI 界面或者 CLI 命令行工具），然后，API Server 根据用户的具体请求，去通知其他组件干活。</li><li><strong>Scheduler</strong>。<strong>K8S 所有 Worker Node 的调度器</strong>。当用户要部署服务时，Scheduler 会选择最合适的 Worker Node（服务器）来部署。</li><li><strong>Controller Manager</strong>。<strong>K8S 所有 Worker Node 的监控器</strong>。Controller Manager 有很多具体的 Controller， Node Controller、Service Controller、Volume Controller 等。Controller 负责监控和调整在 Worker Node 上部署的服务的状态，比如用户要求 A 服务部署 2 个副本，那么当其中一个服务挂了的时候，Controller 会马上调整，让 Scheduler 再选择一个 Worker Node 重新部署服务。</li><li><strong>etcd</strong>。<strong>K8S 的存储服务</strong>。etcd 存储了 K8S 的关键配置和用户配置，K8S 中仅 API Server 才具备读写权限，其他组件必须通过 API Server 的接口才能读写数据</li></ul><h3 id="work-node组件" tabindex="-1"><a class="header-anchor" href="#work-node组件" aria-hidden="true">#</a> work node组件</h3>',9),s=(0,n.Lk)("li",null,[(0,n.Lk)("strong",null,"Kubelet"),(0,n.eW)("。"),(0,n.Lk)("strong",null,"Worker Node 的监视器，以及与 Master Node 的通讯器"),(0,n.eW)("。Kubelet 是 Master Node 安插在 Worker Node 上的“眼线”，它会定期向 Master Node 汇报自己 Node 上运行的服务的状态，并接受来自 Master Node 的指示采取调整措施。负责控制所有容器的启动停止，保证节点工作正常。")],-1),i=(0,n.Lk)("li",null,[(0,n.Lk)("strong",null,"Kube-Proxy"),(0,n.eW)("。"),(0,n.Lk)("strong",null,"K8S 的网络代理"),(0,n.eW)("。Kube-Proxy 负责 Node 在 K8S 的网络通讯、以及对外部网络流量的负载均衡。")],-1),d=(0,n.Lk)("strong",null,"Container Runtime",-1),c=(0,n.Lk)("strong",null,"Worker Node 的运行环境",-1),p={href:"https://containerd.io/docs/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://cri-o.io/#what-is-cri-o",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md",target:"_blank",rel:"noopener noreferrer"},g=(0,n.Lk)("li",null,"其实containerd只是从Docker中分离出来的底层容器运行时，使用起来和Docker并没有啥区别，从Docker转型containerd非常简单，基本没有什么门槛。只要把之前Docker命令中的docker改为crictl基本就可以了，都是同一个公司出品的东西，用法都一样",-1),b=(0,n.Lk)("h2",{id:"组件协调工作过程",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#组件协调工作过程","aria-hidden":"true"},"#"),(0,n.eW)(" 组件协调工作过程")],-1),h={href:"https://q10viking.github.io/Docker/15%20k8s%E9%83%A8%E7%BD%B2nginx.html",target:"_blank",rel:"noopener noreferrer"},m=(0,n.Fv)('<p><strong>我们在master节点执行一条命令要master部署一个nginx应用</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubectl create deployment nginx <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>这条命令首先发到master节点的网关api server，这是matser的唯一入口</p></li><li><p>api server将命令请求交给controller mannager进行控制</p></li><li><p>controller mannager 进行应用部署解析</p></li><li><p>controller mannager 会生成一次部署信息，并通过api server将信息存入etcd存储中</p></li><li><p>scheduler调度器通过api server从etcd存储中，拿到要部署的应用，开始调度看哪个节点有资源适合部署</p></li><li><p>scheduler把计算出来的调度信息通过api server再放到etcd中</p></li><li><p>每一个node节点的监控组件kubelet，随时和master保持联系（给api-server发送请求不断获取最新数据），拿到master节点存储在etcd中的部署信息</p></li><li><p>假设node1的kubelet拿到部署信息，显示他自己节点要部署某某应用</p><ul><li><img src="/images/Docker/image-20230425105647477.png" alt="image-20230425105647477"></li></ul></li><li><p>kubelet就自己run一个应用在当前机器上，并随时给master汇报当前应用的状态信息</p></li><li><p>node和master也是通过master的api-server组件联系的</p></li><li><p>每一个机器上的kube-proxy能知道集群的所有网络，只要node访问别人或者别人访问node，node上的kube-proxy网络代理自动计算进行流量转发</p><ul><li><p>nginx应用部署在k8s-node1上，我们访问k8s-node2的地址，bubelet会惊醒转发</p><p><img src="/images/Docker/image-20230425105853193.png" alt="image-20230425105853193"></p></li></ul></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',4),v={href:"https://medium.com/starbugs/kubernetes-%E6%95%99%E5%AD%B8-%E4%B8%80-%E6%A6%82%E5%BF%B5%E8%88%87%E6%9E%B6%E6%A7%8B-954caa9b1558",target:"_blank",rel:"noopener noreferrer"},K={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/components/",target:"_blank",rel:"noopener noreferrer"},N={},S=(0,o(66262).A)(N,[["render",function(e,r){const o=(0,n.g2)("OutboundLink");return(0,n.uX)(),(0,n.CE)(n.FK,null,[t,(0,n.Lk)("p",null,[(0,n.Lk)("a",l,[(0,n.eW)("Kubernetes 组件 | Kubernetes"),(0,n.bF)(o)])]),a,(0,n.Lk)("ul",null,[s,i,(0,n.Lk)("li",null,[d,(0,n.eW)("。"),c,(0,n.eW)("。负责运行容器的软件，即安装了容器化所需的软件环境确保容器化程序能够跑起来，比如 Docker Engine运行环境。 "),(0,n.Lk)("ul",null,[(0,n.Lk)("li",null,[(0,n.eW)("Kubernetes 支持许多容器运行环境，例如 "),(0,n.Lk)("a",p,[(0,n.eW)("containerd"),(0,n.bF)(o)]),(0,n.eW)("、 "),(0,n.Lk)("a",u,[(0,n.eW)("CRI-O"),(0,n.bF)(o)]),(0,n.eW)(" 以及 "),(0,n.Lk)("a",k,[(0,n.eW)("Kubernetes CRI (容器运行环境接口)"),(0,n.bF)(o)]),(0,n.eW)(" 的其他任何实现")]),g])])]),b,(0,n.Lk)("blockquote",null,[(0,n.Lk)("p",null,[(0,n.eW)("用K8S部署Nginx的过程中，K8S内部各组件是如何协同工作的 "),(0,n.Lk)("a",h,[(0,n.eW)("k8s部署Nginx"),(0,n.bF)(o)])])]),m,(0,n.Lk)("p",null,[(0,n.Lk)("a",v,[(0,n.eW)("Medium-Kubernetes 教學 — 什麼是 Pod？什麼 Node"),(0,n.bF)(o)])]),(0,n.Lk)("p",null,[(0,n.Lk)("a",K,[(0,n.eW)("Kubernetes 组件 | Kubernetes"),(0,n.bF)(o)])])],64)}]])},66262:(e,r)=>{r.A=(e,r)=>{const o=e.__vccOpts||e;for(const[e,n]of r)o[e]=n;return o}}}]);