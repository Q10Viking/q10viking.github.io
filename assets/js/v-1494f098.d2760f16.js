"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[61001],{60717:(e,r,t)=>{t.r(r),t.d(r,{data:()=>p});const p={key:"v-1494f098",path:"/gRPC/",title:"",lang:"zh-CN",frontmatter:{prev:{text:"Back To 目录",link:"/topicNav/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[],filePathRelative:"gRPC/README.md"}},48641:(e,r,t)=>{t.r(r),t.d(r,{default:()=>c});var p=t(20641);const n={href:"https://www.grpc.io/",target:"_blank",rel:"noopener noreferrer"},a={href:"http://doc.oschina.net/grpc",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Lk)("p",null,"RPC 框架的目标就是让远程服务调用更加简单、透明，其负责屏蔽底层的传输方式（TCP/UDP）、序列化方式（XML/Json）和通信细节。服务调用者可以像调用本地接口一样调用远程的服务提供者，而不需要关心底层通信细节和调用过程。",-1),o={href:"http://www.oschina.net/p/grpc-framework",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Fv)('<p>在 gRPC 里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC 系统类似，gRPC 也是基于以下理念：定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个 gRPC 服务器来处理客户端调用。在客户端拥有一个存根能够像服务端一样的方法。</p><p><img src="/images/grpc/1635738359289-a699b333-938d-4aa3-b0e7-568cb7d8bf8d.png" alt="img"></p><p>gRPC 的功能优点：</p><ul><li>高兼容性、高性能、使用简单</li></ul><p>gRPC 的组成部分：</p><ul><li>使用 http2 作为网络传输层</li><li>使用 protobuf 这个高性能的数据包序列化协议</li><li>通过 protoc gprc 插件生成易用的 SDK</li></ul><p><img src="/images/grpc/1636530118846-4046bead-72ea-4dfb-92c6-fcfa27337bdb.png" alt="image.png"></p>',7),i={},c=(0,t(66262).A)(i,[["render",function(e,r){const t=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("p",null,[(0,p.Lk)("a",n,[(0,p.eW)("官网"),(0,p.bF)(t)])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",a,[(0,p.eW)("gRPC 官方文档中文版"),(0,p.bF)(t)])]),l,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("gRPC"),(0,p.bF)(t)]),(0,p.eW)(" 是一个高性能、开源和通用的 RPC 框架，面向移动和 HTTP/2 设计。目前提供 C、Java 和 Go 语言版本，分别是：grpc, grpc-java, grpc-go")]),g],64)}]])},66262:(e,r)=>{r.A=(e,r)=>{const t=e.__vccOpts||e;for(const[e,p]of r)t[e]=p;return t}}}]);