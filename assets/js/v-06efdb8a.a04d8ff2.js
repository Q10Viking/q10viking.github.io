"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[26392],{85076:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-06efdb8a",path:"/JVM/06%20JVM%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BF%87%E7%A8%8B.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/JVM/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"对象创建过程",slug:"对象创建过程",children:[]},{level:2,title:"类加载检查",slug:"类加载检查",children:[]},{level:2,title:"分配内存",slug:"分配内存",children:[{level:3,title:"划分内存的方法",slug:"划分内存的方法",children:[]},{level:3,title:"解决并发问题的方法",slug:"解决并发问题的方法",children:[]}]},{level:2,title:"初始化零值",slug:"初始化零值",children:[]},{level:2,title:"设置对象头",slug:"设置对象头",children:[{level:3,title:"计算对象大小",slug:"计算对象大小",children:[]}]},{level:2,title:"执行< init >方法",slug:"执行-init-方法",children:[]}],filePathRelative:"JVM/06 JVM创建对象的过程.md"}},41727:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(20641).Fv)('<h2 id="对象创建过程" tabindex="-1"><a class="header-anchor" href="#对象创建过程" aria-hidden="true">#</a> 对象创建过程</h2><p>在Java中，<strong>对象分配规则</strong>是关于如何为新对象分配内存的一套规则，以确保内存的有效使用和对象的<strong>正确初始化</strong>。以下是关于对象分配的主要规则：</p><ol><li><strong>内存分配</strong>：新对象通常在堆内存中分配内存空间。</li><li><strong>对象头</strong>：在为对象分配内存空间后，Java虚拟机会为对象分配一个<strong>对象头</strong>。对象头包含了一些关于对象的<strong>元信息</strong>，如对象的<strong>哈希码、锁状态、垃圾回收信息</strong>等。</li><li><strong>零值初始化</strong>：在对象内存分配后，所有的成员变量会被初始化为零值。具体的零值取决于变量的数据类型。例如，整数类型会初始化为0，布尔类型会初始化为false，对象引用会初始化为null。</li><li><strong>构造函数调用</strong>：一旦对象内存分配和零值初始化完成，Java虚拟机会调用对象的构造函数。</li><li><strong>对象引用</strong>：最后，<strong>new</strong> 关键字会返回对象的引用，将这个引用分配给一个变量，以便后续可以通过该变量访问对象的属性和方法。</li><li><strong>垃圾回收管理</strong>：Java虚拟机会自动管理对象的内存。如果对象不再被引用，它会被标记为垃圾，并在适当的时机由垃圾回收器回收，释放占用的内存。</li></ol><p>这些规则确保了对象在创建时的正确初始化和内存管理。对于程序员来说，最重要的是编写好构造函数以确保对象在创建后具有合适的初始状态，并且不忘记在不再需要对象时将引用置为null，以便垃圾回收器能够回收不再使用的对象。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Math</span> math <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/jvm/103841" alt="img"></p><h2 id="类加载检查" tabindex="-1"><a class="header-anchor" href="#类加载检查" aria-hidden="true">#</a> 类加载检查</h2><p>虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能<strong>在常量池中定位到一个类的符号引用</strong>，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p><p>new指令对应到语言层面上讲是，<strong>new关键词、对象克隆、对象序列化</strong>等</p><hr><h2 id="分配内存" tabindex="-1"><a class="header-anchor" href="#分配内存" aria-hidden="true">#</a> 分配内存</h2><p><strong>对象所需内存的大小在类 加载完成后便可完全确定</strong>，为对象分配空间的任务等同于<strong>把 一块确定大小的内存从Java堆中划分出来</strong>。</p><h3 id="划分内存的方法" tabindex="-1"><a class="header-anchor" href="#划分内存的方法" aria-hidden="true">#</a> 划分内存的方法</h3><h4 id="指针碰撞" tabindex="-1"><a class="header-anchor" href="#指针碰撞" aria-hidden="true">#</a> 指针碰撞</h4><p>指针碰撞Bump the Pointer（默认用指针碰撞）：如果J<strong>ava堆中内存是绝对规整的</strong>，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，<strong>那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离</strong>。</p><h4 id="空闲列表" tabindex="-1"><a class="header-anchor" href="#空闲列表" aria-hidden="true">#</a> 空闲列表</h4><p>空闲列表Free List: 如果Java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，那就没有办法简单地进行指针碰撞了，<strong>虚拟机就必须维护一个列表，记录上哪些内存块是可用的</strong>，在分配的时候从列表中<strong>找到一块足够大的空间划分给对象实例， 并更新列表上的记录</strong></p><h3 id="解决并发问题的方法" tabindex="-1"><a class="header-anchor" href="#解决并发问题的方法" aria-hidden="true">#</a> 解决并发问题的方法</h3><h4 id="cas" tabindex="-1"><a class="header-anchor" href="#cas" aria-hidden="true">#</a> CAS</h4><p>虚拟机采用<strong>CAS配上失败重试</strong>的方式保证更新操作的原子性来对分配内存空间的动作进行同步处理.</p><h4 id="tlab" tabindex="-1"><a class="header-anchor" href="#tlab" aria-hidden="true">#</a> TLAB</h4><ol><li>本地线程分配缓冲（Thread Local Allocation Buffer,TLAB）</li><li>把内存分配的动作按照线程划分在不同的空间之中进行，即<strong>每个线程在Java堆中预先分配一小块内存</strong>。</li><li>通过**-XX:+/-UseTLAB<strong>参数来设定虚拟机是否使用TLAB(JVM会默认开启</strong>-XX:+UseTLAB**)，<strong>-XX:TLABSize</strong> 指定TLAB大小。</li></ol><hr><h2 id="初始化零值" tabindex="-1"><a class="header-anchor" href="#初始化零值" aria-hidden="true">#</a> 初始化零值</h2><blockquote><p>private int initData = 666;</p></blockquote><p>内存分配完成后，<strong>虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头）</strong>， 如果使用TLAB，这一工作过程也可以提前至TLAB分配时进行。这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值</p><h2 id="设置对象头" tabindex="-1"><a class="header-anchor" href="#设置对象头" aria-hidden="true">#</a> <strong>设置对象头</strong></h2><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、 实例数据（Instance Data）和对齐填充（Padding）</p><p><img src="/images/jvm/95007" alt="img"></p><p><img src="/images/jvm/2557" alt="img"></p><p><img src="/images/jvm/100689" alt="img"></p><blockquote><p>Klass Pointer类型指针,指向存储在方法区的类元信息(Math.class,存储着代码的信息)。实例数据以及，Class对象都存在堆中 (Math实例，Class&lt; Math &gt;)</p><p><strong>关于对齐填充：<strong>对于大部分处理器，对象以</strong>8字节整数倍来对齐填充都是最高效的存取方式</strong>。</p></blockquote><h3 id="计算对象大小" tabindex="-1"><a class="header-anchor" href="#计算对象大小" aria-hidden="true">#</a> 计算对象大小</h3><p>在Java中，对象的大小通常是由对象的实例变量、对象头和内部填充组成的。对象的大小计算方法可以简化为以下几个步骤：</p><ol><li><strong>计算对象头大小</strong>：对象头包含了一些关于对象的<strong>元信息</strong>，如对象的哈希码、锁状态、垃圾回收信息等。对象头的大小在不同的JVM实现和配置下会有所不同。通常，对象头的大小在64位JVM是8个字节，在32位JVM是4个字节。</li><li><strong>计算实例变量大小</strong>：对象的实例变量是对象的数据部分，它们占用的内存空间由它们的数据类型和数量决定。例如，一个整数类型的实例变量在64位JVM是8个字节，在32位JVM是4个字节。</li><li><strong>计算内部填充大小</strong>：为了对齐数据，Java虚拟机通常在实例变量之间插入一些内部填充。填充的大小取决于虚拟机和操作系统的要求，通常是8字节的倍数。这样可以提高内存的访问效率。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jol<span class="token punctuation">.</span>info<span class="token punctuation">.</span></span><span class="token class-name">ClassLayout</span></span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 计算对象大小\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JOLSample</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ClassLayout</span> layout <span class="token operator">=</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>layout<span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ClassLayout</span> layout1 <span class="token operator">=</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>layout1<span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ClassLayout</span> layout2 <span class="token operator">=</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>layout2<span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// -XX:+UseCompressedOops           默认开启的压缩所有指针</span>\n    <span class="token comment">// -XX:+UseCompressedClassPointers  默认开启的压缩对象头里的类型指针Klass Pointer</span>\n    <span class="token comment">// Oops : Ordinary Object Pointers</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n                       <span class="token comment">//8B mark word</span>\n                       <span class="token comment">//4B Klass Pointer   如果关闭压缩-XX:-UseCompressedClassPointers或-XX:-UseCompressedOops，则占用8B</span>\n        <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token comment">//4B</span>\n        <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">//4B  如果关闭压缩-XX:-UseCompressedOops，则占用8B</span>\n        <span class="token keyword">byte</span> b<span class="token punctuation">;</span>        <span class="token comment">//1B </span>\n        <span class="token class-name">Object</span> o<span class="token punctuation">;</span>      <span class="token comment">//4B  如果关闭压缩-XX:-UseCompressedOops，则占用8B</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token number">64</span>位机器下面 运行结果：\n<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span> object internals<span class="token operator">:</span>\n <span class="token constant">OFFSET</span>  <span class="token constant">SIZE</span>   <span class="token constant">TYPE</span> <span class="token constant">DESCRIPTION</span>                               <span class="token constant">VALUE</span>\n      <span class="token number">0</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000001</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">//mark word</span>\n      <span class="token number">4</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">//mark word     </span>\n      <span class="token number">8</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           e5 <span class="token number">01</span> <span class="token number">00</span> f8 <span class="token punctuation">(</span><span class="token number">11100101</span> <span class="token number">00000001</span> <span class="token number">00000000</span> <span class="token number">11111000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">134217243</span><span class="token punctuation">)</span>    <span class="token comment">//Klass Pointer</span>\n     <span class="token number">12</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>loss due <span class="token keyword">to</span> <span class="token namespace">the</span> next object alignment<span class="token punctuation">)</span>\n<span class="token class-name">Instance</span> size<span class="token operator">:</span> <span class="token number">16</span> bytes\n<span class="token class-name">Space</span> losses<span class="token operator">:</span> <span class="token number">0</span> bytes internal <span class="token operator">+</span> <span class="token number">4</span> bytes external <span class="token operator">=</span> <span class="token number">4</span> bytes total\n\n\n<span class="token punctuation">[</span><span class="token class-name">I</span> object internals<span class="token operator">:</span>\n <span class="token constant">OFFSET</span>  <span class="token constant">SIZE</span>   <span class="token constant">TYPE</span> <span class="token constant">DESCRIPTION</span>                               <span class="token constant">VALUE</span>\n      <span class="token number">0</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000001</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token number">4</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token number">8</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span> <span class="token comment">// Klass Pointer          6d 01 00 f8 (01101101 00000001 00000000 11111000) (-134217363)</span>\n     <span class="token number">12</span>     <span class="token number">4</span>        <span class="token punctuation">(</span>object header<span class="token punctuation">)</span><span class="token comment">//数组长度                  00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span>\n     <span class="token number">16</span>     <span class="token number">0</span>    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>elements<span class="token punctuation">&gt;</span></span>                             <span class="token class-name">N</span><span class="token operator">/</span><span class="token class-name">A</span>\n<span class="token class-name">Instance</span> size<span class="token operator">:</span> <span class="token number">16</span> bytes\n<span class="token class-name">Space</span> losses<span class="token operator">:</span> <span class="token number">0</span> bytes internal <span class="token operator">+</span> <span class="token number">0</span> bytes external <span class="token operator">=</span> <span class="token number">0</span> bytes total\n\n\n<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span></span>JOLSample</span>$<span class="token class-name">A</span> object internals<span class="token operator">:</span>\n <span class="token constant">OFFSET</span>  <span class="token constant">SIZE</span>               <span class="token constant">TYPE</span> <span class="token constant">DESCRIPTION</span>                               <span class="token constant">VALUE</span>\n      <span class="token number">0</span>     <span class="token number">4</span>                    <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000001</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token number">4</span>     <span class="token number">4</span>                    <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">(</span><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token number">8</span>     <span class="token number">4</span>                    <span class="token punctuation">(</span>object header<span class="token punctuation">)</span>                           <span class="token number">61</span> cc <span class="token number">00</span> f8 <span class="token punctuation">(</span><span class="token number">01100001</span> <span class="token number">11001100</span> <span class="token number">00000000</span> <span class="token number">11111000</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">134165407</span><span class="token punctuation">)</span>\n     <span class="token number">12</span>     <span class="token number">4</span>                <span class="token keyword">int</span> <span class="token class-name">A</span><span class="token punctuation">.</span>id                                      <span class="token number">0</span>\n     <span class="token number">16</span>     <span class="token number">1</span>               <span class="token keyword">byte</span> <span class="token class-name">A</span><span class="token punctuation">.</span>b                                       <span class="token number">0</span>\n     <span class="token number">17</span>     <span class="token number">3</span>                    <span class="token punctuation">(</span>alignment<span class="token operator">/</span>padding gap<span class="token punctuation">)</span>                  \n     <span class="token number">20</span>     <span class="token number">4</span>   <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token class-name">A</span><span class="token punctuation">.</span>name                                    <span class="token keyword">null</span>\n     <span class="token number">24</span>     <span class="token number">4</span>   <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span> <span class="token class-name">A</span><span class="token punctuation">.</span>o                                       <span class="token keyword">null</span>\n     <span class="token number">28</span>     <span class="token number">4</span>                    <span class="token punctuation">(</span>loss due <span class="token keyword">to</span> <span class="token namespace">the</span> next object alignment<span class="token punctuation">)</span>\n<span class="token class-name">Instance</span> size<span class="token operator">:</span> <span class="token number">32</span> bytes\n<span class="token class-name">Space</span> losses<span class="token operator">:</span> <span class="token number">3</span> bytes internal <span class="token operator">+</span> <span class="token number">4</span> bytes external <span class="token operator">=</span> <span class="token number">7</span> bytes total\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div><h2 id="执行-init-方法" tabindex="-1"><a class="header-anchor" href="#执行-init-方法" aria-hidden="true">#</a> <strong>执行&lt; init &gt;方法</strong></h2><p>执行方法，即对象按照程序员的意愿进行初始化。对应到语言层面上讲，就是为<strong>属性赋值</strong>（注意，这与上面的赋零值不同，这是由程序员赋的值），和<strong>执行构造方法</strong>。</p>',38),e={},t=(0,a(66262).A)(e,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);