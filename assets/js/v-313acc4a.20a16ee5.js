"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[74259],{99193:(e,t,r)=>{r.r(t),r.d(t,{data:()=>c});const c={key:"v-313acc4a",path:"/netty/01%20socket.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/netty/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Socket",slug:"socket",children:[]},{level:2,title:"短连接",slug:"短连接",children:[]},{level:2,title:"长连接",slug:"长连接",children:[]},{level:2,title:"长连接与短连接的选择",slug:"长连接与短连接的选择",children:[]},{level:2,title:"网络编程通识",slug:"网络编程通识",children:[]}],filePathRelative:"netty/01 socket.md"}},33153:(e,t,r)=>{r.r(t),r.d(t,{default:()=>a});const c=(0,r(20641).Fv)('<h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><p><strong>ocket</strong>是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口，一般由操作系统提供。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议处理和通信缓存管理等等都隐藏在Socket接口后面，对用户来说，使用一组简单的接口就能进行网络应用编程，让Socket去组织数据，以符合指定的协议。主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接。</p><p><strong>ocket</strong>是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口，一般由操作系统提供。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议处理和通信缓存管理等等都隐藏在Socket接口后面，对用户来说，使用一组简单的接口就能进行网络应用编程，让Socket去组织数据，以符合指定的协议。主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接。</p><p><img src="/images/netty/10063" alt="img"></p><h2 id="短连接" tabindex="-1"><a class="header-anchor" href="#短连接" aria-hidden="true">#</a> 短连接</h2><blockquote><p>连接-&gt;传输数据-&gt;关闭连接</p></blockquote><p>传统HTTP是无状态的，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。</p><p>也可以这样说：短连接是指SOCKET连接后发送后接收完数据后马上断开连接。</p><h2 id="长连接" tabindex="-1"><a class="header-anchor" href="#长连接" aria-hidden="true">#</a> 长连接</h2><blockquote><p>连接-&gt;传输数据-&gt;保持连接 -&gt; 传输数据-&gt; 。。。 -&gt;关闭连接。</p></blockquote><p>长连接指建立SOCKET连接后不管是否使用都保持连接。</p><h2 id="长连接与短连接的选择" tabindex="-1"><a class="header-anchor" href="#长连接与短连接的选择" aria-hidden="true">#</a> 长连接与短连接的选择</h2><p>长连接多用于操作频繁，点对点的通讯。每个TCP连接都需要三步握手，这需要时间，如果每个操作都是先连接，再操作的话那么处理速度会降低很多，所以每个操作完后都不断开，下次处理时直接发送数据包就OK了，不用建立TCP连接。例如：数据库的连接用长连接， 如果用短连接频繁的通信会造成socket错误，而且频繁的socket 创建也是对资源的浪费。</p><p>而像WEB网站的http服务按照Http协议规范早期一般都用短链接，因为长连接对于服务端来说会耗费一定的资源，而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源。但是现在的Http协议，Http1.1，尤其是Http2、Http3已经开始向长连接演化。</p><p>总之，长连接和短连接的选择要视情况而定。</p><h2 id="网络编程通识" tabindex="-1"><a class="header-anchor" href="#网络编程通识" aria-hidden="true">#</a> 网络编程通识</h2><p>在开发过程中，如果类的名字有Server或者ServerSocket的，表示这个类是给服务端容纳网络服务用的，如果类的名字只包含Socket的，那么表示这是负责具体的网络读写的。</p><p>对于服务端来说ServerSocket就只是个场所，它必须要绑定某个IP地址（就像地址），还需指定某个端口号（电话号码）</p><p>在通信编程里，ServerSocket并不负责具体的网络读写，ServerSocket就只是负责接收客户端连接后，新启一个socket来和客户端进行沟通。这一点对所有模式的通信编程都是适用的。</p><blockquote><p>在通信编程里，我们关注的其实也就是三个事情：</p><ul><li><p>连接（客户端连接服务器，服务器等待和接收连接）</p></li><li><p>读网络数据</p></li><li><p>写网络数据</p></li></ul><p>所有模式的通信编程都是围绕着这三件事情进行的。服务端提供IP和监听端口，客户端通过连接操作想服务端监听的地址发起连接请求，通过三次握手连接，如果连接成功建立，双方就可以通过套接字进行通信</p></blockquote>',20),o={},a=(0,r(66262).A)(o,[["render",function(e,t){return c}]])},66262:(e,t)=>{t.A=(e,t)=>{const r=e.__vccOpts||e;for(const[e,c]of t)r[e]=c;return r}}}]);