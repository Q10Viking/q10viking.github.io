"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[53468],{22657:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-09178a4d",path:"/RocketMQ/02%20%E5%AE%89%E8%A3%85RocketMQ.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/RocketMQ/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"下载RocketMQ",slug:"下载rocketmq",children:[]},{level:2,title:"快速安装RocketMQ",slug:"快速安装rocketmq",children:[]},{level:2,title:"启动RocketMQ",slug:"启动rocketmq",children:[{level:3,title:"启动NameServer⭐",slug:"启动nameserver⭐",children:[]},{level:3,title:"启动Broker⭐",slug:"启动broker⭐",children:[]},{level:3,title:"jps查看是否启动成功",slug:"jps查看是否启动成功",children:[]}]},{level:2,title:"命令行快速验证",slug:"命令行快速验证",children:[]},{level:2,title:"查看broker是否连接到了Namesrv⭐",slug:"查看broker是否连接到了namesrv⭐",children:[]},{level:2,title:"关闭RocketMQ服务",slug:"关闭rocketmq服务",children:[]}],filePathRelative:"RocketMQ/02 安装RocketMQ.md"}},39917:(s,n,a)=>{a.r(n),a.d(n,{default:()=>q});var e=a(20641);const p=(0,e.Lk)("h2",{id:"下载rocketmq",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#下载rocketmq","aria-hidden":"true"},"#"),(0,e.eW)(" 下载RocketMQ")],-1),o=(0,e.Lk)("p",null,"依赖环境java",-1),t={href:"http://rocketmq.apache.org/docs/quick-start/",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Lk)("p",null,[(0,e.Lk)("img",{src:"/images/RocketMQ/image-20211101195412586.png",alt:"image-20211101195412586"})],-1),l={href:"https://dlcdn.apache.org/rocketmq/4.9.2/rocketmq-all-4.9.2-source-release.zip",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Lk)("strong",null,"https://dlcdn.apache.org/rocketmq/4.9.2/rocketmq-all-4.9.2-source-release.zip",-1),i={href:"https://dlcdn.apache.org/rocketmq/4.9.2/rocketmq-all-4.9.2-bin-release.zip",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Lk)("strong",null,"https://dlcdn.apache.org/rocketmq/4.9.2/rocketmq-all-4.9.2-bin-release.zip",-1),b=(0,e.Fv)('<p>这两个版本我们都下载下来。</p><h2 id="快速安装rocketmq" tabindex="-1"><a class="header-anchor" href="#快速安装rocketmq" aria-hidden="true">#</a> 快速安装RocketMQ</h2><p>RocketMQ的安装非常简单，就是上传解压就可以了。</p><ol><li><p>把下载的rocketmq-all-4.9.2-bin-release.zip在本地完成解压，并上传到/usr/rocketmq目录。</p></li><li><p>把rocketmq的bin目录也配置到环境变量当中。 vi /etc/profile，加入以下rocket的内容，并执行source /etc/profile让环境变量生效：</p></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># /etc/profile</span>\n<span class="token comment">#----------------Java Environment config----------------------</span>\n\n<span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/java/jdk1.8.0_311\n<span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/\n<span class="token comment">#-------------------Rocket config-----------------------------</span>\n<span class="token assign-left variable">ROCKETMQ_HOME</span><span class="token operator">=</span>/usr/rocketmq/rocketmq-4.9.2\n\n<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$ROCKETMQ_HOME</span>/bin\n<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span> JAVA_HOME CLASSPATH ROCKETMQ_HOME\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样RocketMQ就安装完成了。我们把他运行起来。</p><blockquote><p>这个ROCKETMQ_HOME的环境变量是必须要单独配置的，如果不配置的话，启动NameSever和Broker都会报错。</p><p>这个环境变量的作用是用来加载$ROCKETMQ_HOME/conf下的除broker.conf以外的几个配置文件。所以实际情况中，可以不按这个配置，但是一定要能找到配置文件。</p></blockquote><h2 id="启动rocketmq" tabindex="-1"><a class="header-anchor" href="#启动rocketmq" aria-hidden="true">#</a> 启动RocketMQ</h2><h3 id="启动nameserver⭐" tabindex="-1"><a class="header-anchor" href="#启动nameserver⭐" aria-hidden="true">#</a> 启动NameServer⭐</h3><p>启动NameServer非常简单， 在$ROCKETMQ_HOME/bin目录下有个mqnamesrv。直接执行这个脚本就可以启动RocketMQ的NameServer服务。</p>',10),k={href:"http://xn--runserver-z89na9857bcqmtlfda85rmzcf95l5zb.sh/",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Fv)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">${JAVA_OPT}</span> -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span>\n<span class="token comment"># 修改为</span>\n<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">${JAVA_OPT}</span> -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后我们用静默启动的方式启动NameServer服务：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">nohup</span> bin/mqnamesrv <span class="token operator">&amp;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>启动完成后，在nohup.out(该文件会在当前目录自动生成)里看到这一条关键日志就是启动成功了。并且使用jps指令可以看到有一个NamesrvStartup进程。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost rocketmq-4.9.2<span class="token punctuation">]</span><span class="token comment"># ll</span>\ntotal <span class="token number">44</span>\ndrwxrwxrwx. <span class="token number">2</span> root root   <span class="token number">126</span> Nov  <span class="token number">1</span> 07:59 benchmark\ndrwxrwxrwx. <span class="token number">3</span> root root  <span class="token number">4096</span> Nov  <span class="token number">1</span> 07:59 bin\ndrwxrwxrwx. <span class="token number">6</span> root root   <span class="token number">211</span> Nov  <span class="token number">1</span> 07:59 conf\ndrwxrwxrwx. <span class="token number">2</span> root root  <span class="token number">4096</span> Nov  <span class="token number">1</span> 07:59 lib\n-rwxrwxrwx. <span class="token number">1</span> root root <span class="token number">17327</span> Nov  <span class="token number">1</span> 07:59 LICENSE\n-rw-------. <span class="token number">1</span> root root   <span class="token number">344</span> Nov  <span class="token number">1</span> 08:25 nohup.out\n-rwxrwxrwx. <span class="token number">1</span> root root  <span class="token number">1338</span> Nov  <span class="token number">1</span> 07:59 NOTICE\n-rwxrwxrwx. <span class="token number">1</span> root root  <span class="token number">5342</span> Nov  <span class="token number">1</span> 07:59 README.md\n<span class="token punctuation">[</span>root@localhost rocketmq-4.9.2<span class="token punctuation">]</span><span class="token comment"># cat nohup.out</span>\nJava HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM warning: Using the DefNew young collector with the CMS collector is deprecated and will likely be removed <span class="token keyword">in</span> a future release\nJava HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM warning: UseCMSCompactAtFullCollection is deprecated and will likely be removed <span class="token keyword">in</span> a future release.\nThe Name Server boot success. <span class="token assign-left variable">serializeType</span><span class="token operator">=</span>JSON\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="出现权限问题" tabindex="-1"><a class="header-anchor" href="#出现权限问题" aria-hidden="true">#</a> 出现权限问题</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost rocketmq-4.9.2<span class="token punctuation">]</span><span class="token comment"># nohup: ignoring input and appending output to ‘nohup.out’</span>\nnohup: failed to run <span class="token builtin class-name">command</span> ‘bin/mqnamesrv’: Permission denied\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># -R 是指级联应用到目录里的所有子目录和文件</span>\n<span class="token comment"># 777 是所有用户都拥有最高权限</span>\n<span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> rocketmq-4.9.2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="启动broker⭐" tabindex="-1"><a class="header-anchor" href="#启动broker⭐" aria-hidden="true">#</a> 启动Broker⭐</h3>',9),d={href:"http://xn--brokerrunbroker-wy8y53qb44gl6dtn1h9p4b.sh/",target:"_blank",rel:"noopener noreferrer"},h={href:"http://runbroker.sh/",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Fv)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">${JAVA_OPT}</span> -server -Xms8g -Xmx8g&quot;</span>\n<span class="token comment">#修改为</span>\n<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">${JAVA_OPT}</span> -server -Xms512m -Xmx512m -Xmn256m&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后我们需要找到$ROCKETMQ_HOME/conf/broker.conf， vi指令进行编辑，在最下面加入一个配置：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">autoCreateTopicEnable</span><span class="token operator">=</span>true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',3),v={href:"http://xn--runbroker-zz6n89bg5xa221choab1448bmczanv9bfgw6s1niq8a.sh/",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Fv)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">nohup</span> bin/mqbroker <span class="token operator">&amp;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>启动完成后，同样是检查nohup.out日志，有这一条关键日志就标识启动成功了。 并且jps指令可以看到一个BrokerStartup进程。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>The broker<span class="token punctuation">[</span>localhost.localdomain, <span class="token number">192.168</span>.187.135:10911<span class="token punctuation">]</span> boot success. <span class="token assign-left variable">serializeType</span><span class="token operator">=</span>JSON\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>在观察runserver.sh和runbroker.sh时，我们还可以查看到其他的JVM执行参数，这些参数都可以进行定制。例如我们观察到一个比较有意思的地方，nameServer使用的是CMS垃圾回收器，而Broker使用的是G1垃圾回收器。 关于垃圾回收器的知识你还记得吗？</p></blockquote><h4 id="出现no-route-info-of-this-topic-topictest问题" tabindex="-1"><a class="header-anchor" href="#出现no-route-info-of-this-topic-topictest问题" aria-hidden="true">#</a> 出现No route info of this topic, TopicTest问题</h4><p>https://blog.csdn.net/jiangyu1013/article/details/81478754</p><hr><h3 id="jps查看是否启动成功" tabindex="-1"><a class="header-anchor" href="#jps查看是否启动成功" aria-hidden="true">#</a> jps查看是否启动成功</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost rocketmq-4.9.2<span class="token punctuation">]</span><span class="token comment"># jps</span>\n<span class="token number">1907</span> BrokerStartup\n<span class="token number">1866</span> NamesrvStartup\n<span class="token number">1962</span> Jps\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="命令行快速验证" tabindex="-1"><a class="header-anchor" href="#命令行快速验证" aria-hidden="true">#</a> 命令行快速验证</h2><p>在RocketMQ的安装包中，提供了一个tools.sh工具可以用来在命令行快速验证RocketMQ服务。我们在worker2上进入RocketMQ的安装目录：</p><p>首先需要配置一个环境变量NAMESRV_ADDR指向我们启动的NameServer服务。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">NAMESRV_ADDR</span><span class="token operator">=</span><span class="token string">&#39;localhost:9876&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后启动消息生产者发送消息：默认会发1000条消息</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bin/tools.sh org.apache.rocketmq.example.quickstart.Producer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们可以看到发送消息的日志：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">..</span>.\nSendResult <span class="token punctuation">[</span>sendStatus<span class="token operator">=</span>SEND_OK, <span class="token assign-left variable">msgId</span><span class="token operator">=</span>7F00000109334517D9A301E6B28203E6, <span class="token assign-left variable">offsetMsgId</span><span class="token operator">=</span>C0A8BB8700002A9F000000000002EC12, <span class="token assign-left variable">messageQueue</span><span class="token operator">=</span>MessageQueue <span class="token punctuation">[</span>topic<span class="token operator">=</span>TopicTest, <span class="token assign-left variable">brokerName</span><span class="token operator">=</span>localhost.localdomain, <span class="token assign-left variable">queueId</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">]</span>, <span class="token assign-left variable">queueOffset</span><span class="token operator">=</span><span class="token number">249</span><span class="token punctuation">]</span>\nSendResult <span class="token punctuation">[</span>sendStatus<span class="token operator">=</span>SEND_OK, <span class="token assign-left variable">msgId</span><span class="token operator">=</span>7F00000109334517D9A301E6B28303E7, <span class="token assign-left variable">offsetMsgId</span><span class="token operator">=</span>C0A8BB8700002A9F000000000002ECD2, <span class="token assign-left variable">messageQueue</span><span class="token operator">=</span>MessageQueue <span class="token punctuation">[</span>topic<span class="token operator">=</span>TopicTest, <span class="token assign-left variable">brokerName</span><span class="token operator">=</span>localhost.localdomain, <span class="token assign-left variable">queueId</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>, <span class="token assign-left variable">queueOffset</span><span class="token operator">=</span><span class="token number">249</span><span class="token punctuation">]</span>\n08:51:36.255 <span class="token punctuation">[</span>NettyClientSelector_1<span class="token punctuation">]</span> INFO  RocketmqRemoting - closeChannel: close the connection to remote address<span class="token punctuation">[</span><span class="token number">127.0</span>.0.1:9876<span class="token punctuation">]</span> result: <span class="token boolean">true</span>\n08:51:36.341 <span class="token punctuation">[</span>NettyClientSelector_1<span class="token punctuation">]</span> INFO  RocketmqRemoting - closeChannel: close the connection to remote address<span class="token punctuation">[</span><span class="token number">192.168</span>.187.135:10911<span class="token punctuation">]</span> result: <span class="token boolean">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这日志中，上面部分就是我们发送的消息的内容。后面两句标识消息生产者正常关闭。</p><p>然后启动消息消费者接收消息：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bin/tools.sh  org.apache.rocketmq.example.quickstart.Consumer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>启动后，可以看到消费到的消息。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ConsumeMessageThread_20 Receive New Messages: <span class="token punctuation">[</span>MessageExt <span class="token punctuation">[</span>brokerName<span class="token operator">=</span>localhost.localdomain, <span class="token assign-left variable">queueId</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">storeSize</span><span class="token operator">=</span><span class="token number">192</span>, <span class="token assign-left variable">queueOffset</span><span class="token operator">=</span><span class="token number">147</span>, <span class="token assign-left variable">sysFlag</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">bornTimestamp</span><span class="token operator">=</span><span class="token number">1635771095196</span>, <span class="token assign-left variable">bornHost</span><span class="token operator">=</span>/192.168.187.135:36366, <span class="token assign-left variable">storeTimestamp</span><span class="token operator">=</span><span class="token number">1635771095208</span>, <span class="token assign-left variable">storeHost</span><span class="token operator">=</span>/192.168.187.135:10911, <span class="token assign-left variable">msgId</span><span class="token operator">=</span>C0A8BB8700002A9F000000000001BAD2, <span class="token assign-left variable">commitLogOffset</span><span class="token operator">=</span><span class="token number">113362</span>, <span class="token assign-left variable">bodyCRC</span><span class="token operator">=</span><span class="token number">566808141</span>, <span class="token assign-left variable">reconsumeTimes</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">preparedTransactionOffset</span><span class="token operator">=</span><span class="token number">0</span>, toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span>Message<span class="token punctuation">{</span>topic<span class="token operator">=</span><span class="token string">&#39;TopicTest&#39;</span>, <span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">properties</span><span class="token operator">=</span><span class="token punctuation">{</span>MIN_OFFSET<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">MAX_OFFSET</span><span class="token operator">=</span><span class="token number">500</span>, <span class="token assign-left variable">CONSUME_START_TIME</span><span class="token operator">=</span><span class="token number">1635771295321</span>, <span class="token assign-left variable">UNIQ_KEY</span><span class="token operator">=</span>7F00000109334517D9A301E6AE9C024F, <span class="token assign-left variable">CLUSTER</span><span class="token operator">=</span>DefaultCluster, <span class="token assign-left variable">TAGS</span><span class="token operator">=</span>TagA<span class="token punctuation">}</span>, <span class="token assign-left variable">body</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">72</span>, <span class="token number">101</span>, <span class="token number">108</span>, <span class="token number">108</span>, <span class="token number">111</span>, <span class="token number">32</span>, <span class="token number">82</span>, <span class="token number">111</span>, <span class="token number">99</span>, <span class="token number">107</span>, <span class="token number">101</span>, <span class="token number">116</span>, <span class="token number">77</span>, <span class="token number">81</span>, <span class="token number">32</span>, <span class="token number">53</span>, <span class="token number">57</span>, <span class="token number">49</span><span class="token punctuation">]</span>, <span class="token assign-left variable">transactionId</span><span class="token operator">=</span><span class="token string">&#39;null&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>日志中MessageExt后的整个内容就是一条完整的RocketMQ消息。我们要对这个消息的结构有个大概的了解，后面会对这个消息进行深入的理解。</p><p>其中比较关键的属性有：brokerName，queueId，msgId，topic，cluster，tags，body，transactionId。先找下这些属性在哪里。</p></blockquote><p>而这个<strong>Consume指令并不会结束，他会继续挂起</strong>，<strong>等待消费其他的消息</strong>。我们可以使用CTRL+C停止该进程。</p><h2 id="查看broker是否连接到了namesrv⭐" tabindex="-1"><a class="header-anchor" href="#查看broker是否连接到了namesrv⭐" aria-hidden="true">#</a> 查看broker是否连接到了Namesrv⭐</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># mqadmin clusterList -n localhost:9876</span>\nRocketMQLog:WARN No appenders could be found <span class="token keyword">for</span> logger <span class="token punctuation">(</span>io.netty.util.internal.InternalThreadLocalMap<span class="token punctuation">)</span>.\nRocketMQLog:WARN Please initialize the logger system properly.\n<span class="token comment">#Cluster Name     #Broker Name            #BID  #Addr                  #Version                #InTPS(LOAD)       #OutTPS(LOAD) #PCWait(ms) #Hour #SPACE</span>\nDefaultCluster    localhost.localdomain   <span class="token number">0</span>     <span class="token number">192.168</span>.187.135:10911  V4_9_2                   <span class="token number">0.00</span><span class="token punctuation">(</span><span class="token number">0</span>,0ms<span class="token punctuation">)</span>         <span class="token number">0.00</span><span class="token punctuation">(</span><span class="token number">0</span>,0ms<span class="token punctuation">)</span>          <span class="token number">0</span> <span class="token number">454380.83</span> <span class="token number">0.4200</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="关闭rocketmq服务" tabindex="-1"><a class="header-anchor" href="#关闭rocketmq服务" aria-hidden="true">#</a> 关闭RocketMQ服务</h2><p>要关闭RocketMQ服务可以通过mqshutdown脚本直接关闭</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 1.关闭NameServer</span>\n<span class="token function">sh</span> bin/mqshutdown namesrv\n<span class="token comment"># 2.关闭Broker</span>\n<span class="token function">sh</span> bin/mqshutdown broker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',29),M={},q=(0,a(66262).A)(M,[["render",function(s,n){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[p,o,(0,e.Lk)("p",null,[(0,e.Lk)("a",t,[(0,e.eW)("Quick Start - Apache RocketMQ"),(0,e.bF)(a)])]),r,(0,e.Lk)("p",null,[(0,e.eW)("RocketMQ源码版本下载地址："),(0,e.Lk)("a",l,[c,(0,e.bF)(a)])]),(0,e.Lk)("p",null,[(0,e.eW)("RocketMQ运行版本下载地址： "),(0,e.Lk)("a",i,[u,(0,e.bF)(a)])]),b,(0,e.Lk)("p",null,[(0,e.eW)("但是要注意，RocketMQ默认预设的JVM内存是4G，这是RocketMQ给我们的最佳配置。但是通常我们用虚拟机的话都是不够4G内存的，所以需要调整下JVM内存大小。"),(0,e.Lk)("a",k,[(0,e.eW)("修改的方式是直接修改runserver.sh"),(0,e.bF)(a)]),(0,e.eW)("。 用vi runserver.sh编辑这个脚本，在脚本中找到这一行调整内存大小为512M")]),m,(0,e.Lk)("p",null,[(0,e.Lk)("a",d,[(0,e.eW)("启动Broker的脚本是runbroker.sh"),(0,e.bF)(a)]),(0,e.eW)("。Broker的默认预设内存是8G，启动前，如果内存不够，同样需要调整下JVM内存。vi "),(0,e.Lk)("a",h,[(0,e.eW)("runbroker.sh"),(0,e.bF)(a)]),(0,e.eW)("，找到这一行，进行内存调整")]),g,(0,e.Lk)("p",null,[(0,e.Lk)("a",v,[(0,e.eW)("然后也以静默启动的方式启动runbroker.sh"),(0,e.bF)(a)])]),f],64)}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);