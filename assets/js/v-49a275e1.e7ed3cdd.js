"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[77146],{18442:(e,r,t)=>{t.r(r),t.d(r,{data:()=>n});const n={key:"v-49a275e1",path:"/concurrency/31%20%E7%BA%BF%E7%A8%8B%E6%B1%A0.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/concurrency/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"线程池",slug:"线程池",children:[]},{level:2,title:"web请求与线程",slug:"web请求与线程",children:[]},{level:2,title:"使用线程池的时机",slug:"使用线程池的时机",children:[]},{level:2,title:"线程池优势",slug:"线程池优势",children:[]},{level:2,title:"线程池中线程复用原理",slug:"线程池中线程复用原理",children:[]}],filePathRelative:"concurrency/31 线程池.md"}},21217:(e,r,t)=>{t.r(r),t.d(r,{default:()=>a});const n=(0,t(20641).Fv)('<h2 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h2><p>“线程池”，顾名思义就是一个<strong>线程缓存</strong>，线程是稀缺资源，如果被无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，因此Java中提供<strong>线程池对线程进行统一分配、调优和监控</strong></p><h2 id="web请求与线程" tabindex="-1"><a class="header-anchor" href="#web请求与线程" aria-hidden="true">#</a> web请求与线程</h2><p>在web开发中，服务器需要接受并处理请求，所以会为一个请求来分配一个线程来进行处理。如果每次请求都新创建一个线程的话实现起来非常简便，但是存在一个问题：</p><p><strong>如果并发的请求数量非常多，但每个线程执行的时间很短，这样就会频繁的创建和销毁线程，如此一来会大大降低系统的效率。可能出现服务器在为每个请求创建新线程和销毁线程上花费的时间和消耗的系统资源要比处理实际的用户请求的时间和资源更多。</strong></p><p>那么有没有一种办法使执行完一个任务，并不被销毁，而是可以继续执行其他的任务呢？</p><p>这就是线程池的目的了。线程池为线程生命周期的开销和资源不足问题提供了解决方案。通过<strong>对多个任务重用线程，线程创建的开销被分摊到了多个任务上。</strong></p><h2 id="使用线程池的时机" tabindex="-1"><a class="header-anchor" href="#使用线程池的时机" aria-hidden="true">#</a> 使用线程池的时机</h2><p>什么时候使用线程池？</p><ul><li><strong>单个任务处理时间比较短</strong></li><li><strong>需要处理的任务数量很大</strong></li></ul><h2 id="线程池优势" tabindex="-1"><a class="header-anchor" href="#线程池优势" aria-hidden="true">#</a> 线程池优势</h2><ul><li>重用存在的线程，<strong>减少线程创建，消亡的开销，提高性能</strong></li><li>提高响应速度。当任务到达时，<strong>任务可以不需要的等到线程创建就能立即执行</strong>。</li><li>提高线程的<strong>可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><h2 id="线程池中线程复用原理" tabindex="-1"><a class="header-anchor" href="#线程池中线程复用原理" aria-hidden="true">#</a> 线程池中线程复用原理</h2><p>程池的线程复用原理是指，将线程放入线程池中重复利用，<strong>而不是每执行一个任务就创建一个新线程</strong>。线程池会对线程进行封装，<strong>核心原理在于将线程的创建和管理与任务的执行分离</strong>。</p><p>线程池通过工作队列（WorkQueue）来存储待执行的任务，队列中可能有多个任务等待被执行。线程池中的线程数量是有限的，核心线程数通常是固定的，最大线程数可以设置，超过最大线程数后，任务会被拒绝。</p><p>当提交任务时，<strong>线程池首先会检查当前线程数是否小于核心线程数</strong>，如果是，则新建一个线程来执行任务；如果<strong>当前线程数已经达到核心线程数</strong>，但队列中没有正在执行的任务，则将任务放入队列中等待执行；如果<strong>队列已满，且线程池中的线程数量未达到最大线程数</strong>，则新建线程来执行任务；如果<strong>队列已满，且线程池中的线程数量达到最大线程数</strong>，则根据拒绝策略来处理无法执行的任务。</p><p>线程复用的关键是将任务的提交和线程的创建、管理、执行分离，通过线程池来统一管理和调度，减少了创建和销毁线程的开销，提高了系统的效率。同时，由于线程池的复用特性，可以有效控制并发度，避免大量线程的创建和销毁导致的系统负载过大。</p>',17),s={},a=(0,t(66262).A)(s,[["render",function(e,r){return n}]])},66262:(e,r)=>{r.A=(e,r)=>{const t=e.__vccOpts||e;for(const[e,n]of r)t[e]=n;return t}}}]);