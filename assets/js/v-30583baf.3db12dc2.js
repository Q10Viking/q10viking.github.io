"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[46648],{82379:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-30583baf",path:"/designpattern/07%20%E9%97%A8%E9%9D%A2(%E5%A4%96%E8%A7%82)%E6%A8%A1%E5%BC%8F.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/designpattern/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Facade模式定义",slug:"facade模式定义",children:[{level:3,title:"生活中的例子",slug:"生活中的例子",children:[]}]},{level:2,title:"开发优点",slug:"开发优点",children:[]},{level:2,title:"实例代码",slug:"实例代码",children:[]},{level:2,title:"应用场景",slug:"应用场景",children:[]},{level:2,title:"源码应用",slug:"源码应用",children:[]},{level:2,title:"案例",slug:"案例",children:[{level:3,title:"文件加密模块的设计",slug:"文件加密模块的设计",children:[]},{level:3,title:"文件加密模块抽象门类",slug:"文件加密模块抽象门类",children:[]},{level:3,title:"写信件",slug:"写信件",children:[]},{level:3,title:"投资基金代码",slug:"投资基金代码",children:[]}]}],filePathRelative:"designpattern/07 门面(外观)模式.md"}},8059:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var p=a(20641);const t=(0,p.Fv)('<h2 id="facade模式定义" tabindex="-1"><a class="header-anchor" href="#facade模式定义" aria-hidden="true">#</a> Facade模式定义</h2><p><strong>为子系统中的一组接口提供一个一致的接口</strong>,提供统一入口</p><h3 id="生活中的例子" tabindex="-1"><a class="header-anchor" href="#生活中的例子" aria-hidden="true">#</a> 生活中的例子</h3><p>大家有没有比较过自己泡茶和去茶馆喝茶的区别？自己泡茶需要自行准备茶叶、茶具和开水，而去茶馆喝茶，最简单的方式就是跟茶馆服务员说想要一杯什么样的茶（铁观音、碧螺春或者西湖龙井）。正因为茶馆有服务员，顾客无须直接和茶叶、茶具、开水等交互，整个泡茶过程由服务员来完成，顾客只需与服务员交互即可，非常简单省事。</p><p>在软件开发中，有时候为了完成一项较为复杂的功能，一个类需要和多个其他业务类交互，而这些需要交互的业务类经常会作为一个完整的整体出现，由于涉及的类比较多，导致使用时代码较为复杂。此时，特别需要一个类似服务员一样的角色，由它来负责和多个业务类进行交互，而使用这些业务类的类只需和该类交互即可。外观模式通过引入一个新的外观类来实现该功能。外观类充当了软件系统中的“服务员”，它为多个业务类的调用提供了一个统一的入口，简化了类与类之间的交互。</p><blockquote><p>在客户端代码和业务类之间增加一个外观类，由外观类来封装与业务类之间的交互，而客户端只需与外观类交互即可</p></blockquote><p>Facade 模式定义了一个<strong>高层接口</strong>，这个接口<strong>使得这一子系统更加容易使用</strong></p><img src="/images/designpattern/image-20210328153816988.png" alt="image-20210328153816988"><h2 id="开发优点" tabindex="-1"><a class="header-anchor" href="#开发优点" aria-hidden="true">#</a> 开发优点</h2><p>简化客户端的调用</p><h2 id="实例代码" tabindex="-1"><a class="header-anchor" href="#实例代码" aria-hidden="true">#</a> 实例代码</h2>',11),e={href:"https://github.com/Q10Viking/learncode/tree/main/designpattern/src/org/hzz/facade",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SubSystem1</span> subSystem1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystem1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">SubSystem2</span> subSystem2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystem2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">SubSystem3</span> subSystem3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystem3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        subSystem1<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        subSystem2<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        subSystem3<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client2</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Facade</span> facade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        facade<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>测试</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Client1</span> client1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Client2</span> client2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        client1<span class="token punctuation">.</span><span class="token function">doSomething1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        client2<span class="token punctuation">.</span><span class="token function">doSomething2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><ol><li>当您需要使<strong>用复杂子系统的有限但直接的接口时</strong>，请使用Facade模式。</li><li>当您想要<strong>将子系统组织成层</strong>时，请使用Facade。</li></ol><h2 id="源码应用" tabindex="-1"><a class="header-anchor" href="#源码应用" aria-hidden="true">#</a> 源码应用</h2><p>tomcat中的<strong>requestFacade</strong>，作为门面来隔离用户Servlet业务处理与tomcat对协议的处理</p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><h3 id="文件加密模块的设计" tabindex="-1"><a class="header-anchor" href="#文件加密模块的设计" aria-hidden="true">#</a> 文件加密模块的设计</h3>',10),o={href:"https://gitee.com/q10viking/design-patterns/tree/master/springboot-design-patterns/src/main/java/org/hzz/%E7%BB%93%E6%9E%84%E6%80%A7%E6%A8%A1%E5%BC%8F/SP1_%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/%E6%A1%88%E4%BE%8B/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%9D%97%E7%9A%84%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Fv)('<p>对文件中的数据进行加密并将加密之后的数据存储在一个新文件中。具体的流程包括3个部分，分别是读取源文件、加密、保存加密之后的文件。其中，读取文件和保存文件使用流来实现，加密操作通过求模运算实现。这3个操作相对独立，为了实现代码的独立重用，让设计更符合单一职责原则，这3个操作的业务代码封装在3个不同的类中。</p><p>FileReader类用于读取文件，CipherMachine类用于对数据进行加密，FileWriter用于保存文件。由于该文件加密模块的通用性，它在多款软件中都得以使用，包括财务管理软件、公文审批系统、邮件管理系统</p><p><img src="/images/designpattern/image-20240327200617966.png" alt="image-20240327200617966"></p><blockquote><p>在每次使用这3个类时，客户端代码需要与它们逐个进行交互，导致客户端代码较为复杂，且在每次使用它们时很多代码都将重复出现。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// 文件读取类</span>\n        <span class="token class-name">CipherMachine</span> cipher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CipherMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// 数据加密类</span>\n        <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// 文件保存类</span>\n        \n        <span class="token class-name">String</span> plainStr <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;facade/src.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取源文件</span>\n        <span class="token class-name">String</span> encryptStr <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plainStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// 加密</span>\n        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encryptStr<span class="token punctuation">,</span><span class="token string">&quot;facade/des.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// 将加密结果写入新文件</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>为了降低系统耦合度，封装与多个子系统进行交互的代码</p><p><img src="/images/designpattern/image-20240327201201936.png" alt="image-20240327201201936"></p><h4 id="子系统" tabindex="-1"><a class="header-anchor" href="#子系统" aria-hidden="true">#</a> 子系统</h4><h5 id="filereader" tabindex="-1"><a class="header-anchor" href="#filereader" aria-hidden="true">#</a> FileReader</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">//文件读取类：子系统类</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReader</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileNameSrc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;读取文件，获取明文：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span><span class="token punctuation">{</span>\n            <span class="token class-name">FileInputStream</span> inFS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fileNameSrc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> data<span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> inFS<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                sb <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            inFS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件不存在！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件操作错误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h5 id="filewriter" tabindex="-1"><a class="header-anchor" href="#filewriter" aria-hidden="true">#</a> FileWriter</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 文件保存类，子系统类</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileWriter</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> encryptStr<span class="token punctuation">,</span><span class="token class-name">String</span> fileNameDes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;保密文件,写入文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span><span class="token punctuation">{</span>\n            <span class="token class-name">FileOutputStream</span> outFS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileNameDes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            outFS<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encryptStr<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            outFS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件操作错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h5 id="ciphermachine" tabindex="-1"><a class="header-anchor" href="#ciphermachine" aria-hidden="true">#</a> CipherMachine</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">;</span>\n\n<span class="token comment">//数据加密类：子系统类</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CipherMachine</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> plainText<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;数据加密，将明文转换为密文：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> es <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> plainText<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>plainText<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            es <span class="token operator">+=</span> c<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> es<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="门面类" tabindex="-1"><a class="header-anchor" href="#门面类" aria-hidden="true">#</a> 门面类</h4><p><img src="/images/designpattern/image-20240327203159014.png" alt="image-20240327203159014"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">.</span>CipherMachine<span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span>\n\n<span class="token comment">//加密外观类：外观类</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncryptFacade</span> <span class="token punctuation">{</span>\n    <span class="token comment">//维持对其他对象的引用</span>\n    <span class="token keyword">private</span> <span class="token class-name">FileReader</span> reader<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">CipherMachine</span> cipher<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">FileWriter</span> writer<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">EncryptFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        cipher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CipherMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//调用其他对象的业务方法</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileEncrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileNameSrc<span class="token punctuation">,</span> <span class="token class-name">String</span> fileNameDes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> plainStr <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileNameSrc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> encryptStr <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plainStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encryptStr<span class="token punctuation">,</span>fileNameDes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p><img src="/images/designpattern/image-20240327203226581.png" alt="image-20240327203226581"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>EncryptFacade<span class="token punctuation">;</span>\n\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo1</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">EncryptFacade</span> ef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EncryptFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ef<span class="token punctuation">.</span><span class="token function">fileEncrypt</span><span class="token punctuation">(</span><span class="token string">&quot;facade//src.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;facade//des.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//        File file = new File(&quot;facade//src.txt&quot;);</span>\n<span class="token comment">//        System.out.println(file.getAbsolutePath());</span>\n        <span class="token comment">// D:\\gitee\\design-patterns\\springboot-design-patterns\\facade\\src.txt</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * 读取文件，获取明文：hello world\n * 数据加密，将明文转换为密文：63336406232\n * 保密文件,写入文件\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="文件加密模块抽象门类" tabindex="-1"><a class="header-anchor" href="#文件加密模块抽象门类" aria-hidden="true">#</a> 文件加密模块抽象门类</h3><p>在不修改客户端代码的前提下使用新的外观类？解决方法是：引入一个抽象外观类，客户端针对抽象外观类编程，而在运行时再确定具体外观类。使其复合开闭原则。</p><blockquote><p>文件加密模块中需要更换一个加密类，不再使用原有的基于求模运算的加密类CipherMachine，而改为基于移位运算的新加密类NewCipherMachine</p></blockquote><p><img src="/images/designpattern/image-20240327204005053.png" alt="image-20240327204005053"></p><p><img src="/images/designpattern/image-20240327205421549.png" alt="image-20240327205421549"></p><h4 id="新加密算法" tabindex="-1"><a class="header-anchor" href="#新加密算法" aria-hidden="true">#</a> 新加密算法</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewCipherMachine</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> plainText<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;数据加密，将明文转换为密文：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> es <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//设置密钥，移位数为10</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> plainText<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">char</span> c <span class="token operator">=</span> plainText<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//小写字母移位</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                c <span class="token operator">+=</span> key <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span> c <span class="token operator">-=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span> c <span class="token operator">+=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">//大写字母移位</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                c <span class="token operator">+=</span> key <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span> c <span class="token operator">-=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span> c <span class="token operator">+=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            es <span class="token operator">+=</span> c<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> es<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h4 id="抽象门面" tabindex="-1"><a class="header-anchor" href="#抽象门面" aria-hidden="true">#</a> 抽象门面</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 抽象门面\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span>  <span class="token class-name">AbstractEncryptFacade</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fileEncrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileNameSrc<span class="token punctuation">,</span> <span class="token class-name">String</span> fileNameDes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="新门面" tabindex="-1"><a class="header-anchor" href="#新门面" aria-hidden="true">#</a> 新门面</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>子系统<span class="token punctuation">.</span>NewCipherMachine<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewEncryptFacade</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractEncryptFacade</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">FileReader</span> reader<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">NewCipherMachine</span> cipher<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">FileWriter</span> writer<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">NewEncryptFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        cipher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewCipherMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileEncrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileNameSrc<span class="token punctuation">,</span> <span class="token class-name">String</span> fileNameDes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> plainStr <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileNameSrc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> encryptStr <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plainStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encryptStr<span class="token punctuation">,</span>fileNameDes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="配置文件xml" tabindex="-1"><a class="header-anchor" href="#配置文件xml" aria-hidden="true">#</a> 配置文件xml</h4><p>在xml文件中指定需要的门面</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>className</span><span class="token punctuation">&gt;</span></span>org.hzz.结构性模式.SP1_门面模式.案例.文件加密模块的设计.门面.NewEncryptFacade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>className</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="解析xml" tabindex="-1"><a class="header-anchor" href="#解析xml" aria-hidden="true">#</a> 解析xml</h4><p>解析xml并加载类，和创建实例</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>utils<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span></span><span class="token class-name">Node</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span></span><span class="token class-name">NodeList</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token class-name">DocumentBuilder</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token class-name">DocumentBuilderFactory</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLUtil</span> <span class="token punctuation">{</span>\n    <span class="token comment">//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">//创建DOM文档对象</span>\n            <span class="token class-name">DocumentBuilderFactory</span> dFactory <span class="token operator">=</span> <span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">DocumentBuilder</span> builder <span class="token operator">=</span> dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Document</span> doc<span class="token punctuation">;</span>\n            doc <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src//main//resources//facade//config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">//获取包含类名的文本节点</span>\n            <span class="token class-name">NodeList</span> nl <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;className&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Node</span> classNode<span class="token operator">=</span>nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> cName<span class="token operator">=</span>classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">//通过类名生成实例对象并将其返回</span>\n            <span class="token class-name">Class</span> c<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Object</span> obj<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1" aria-hidden="true">#</a> 测试</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>XMLUtil<span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>文件加密模块的设计<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>AbstractEncryptFacade<span class="token punctuation">;</span>\n\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 使用抽象类，运行时动态决定使用哪个具体的门面。这里由配置文件决定</span>\n        <span class="token class-name">AbstractEncryptFacade</span> ef  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AbstractEncryptFacade</span><span class="token punctuation">)</span> <span class="token class-name">XMLUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>\n        <span class="token keyword">assert</span> ef <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        ef<span class="token punctuation">.</span><span class="token function">fileEncrypt</span><span class="token punctuation">(</span><span class="token string">&quot;facade//src.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;facade//des.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * 读取文件，获取明文：hello world\n * 数据加密，将明文转换为密文：rovvy gybvn\n * 保密文件,写入文件\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="写信件" tabindex="-1"><a class="header-anchor" href="#写信件" aria-hidden="true">#</a> 写信件</h3>',40),u={href:"https://gitee.com/q10viking/design-patterns/tree/master/springboot-design-patterns/src/main/java/org/hzz/%E7%BB%93%E6%9E%84%E6%80%A7%E6%A8%A1%E5%BC%8F/SP1_%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/%E6%A1%88%E4%BE%8B/%E5%86%99%E4%BF%A1%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Fv)('<p>这个案例和最开始提到的喝茶类似。这里我们用现代邮局来替代了喝茶中服务员的角色,也就是门面（外观）</p><p><img src="/images/designpattern/image-20240327211047812.png" alt="image-20240327211047812"></p><h4 id="写信具体步骤" tabindex="-1"><a class="header-anchor" href="#写信具体步骤" aria-hidden="true">#</a> 写信具体步骤</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>写信件<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILetterProcess</span> <span class="token punctuation">{</span>\n    <span class="token comment">//首先要写信的内容</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeContext</span><span class="token punctuation">(</span><span class="token class-name">String</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//其次写信封</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fillEnvelope</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//把信放到信封里</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">letterInotoEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//然后邮递</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>写信件<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>写信件<span class="token punctuation">.</span>ILetterProcess<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LetterProcessImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ILetterProcess</span> <span class="token punctuation">{</span>\n    <span class="token comment">//写信</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeContext</span><span class="token punctuation">(</span><span class="token class-name">String</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;填写信的内容....&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//在信封上填写必要的信息</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fillEnvelope</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;填写收件人地址及姓名....&quot;</span> <span class="token operator">+</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//把信放到信封中，并封好</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">letterInotoEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;把信放到信封中....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//塞到邮箱中，邮递</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;邮递信件...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>一个检查程序</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>写信件<span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 检查信件，比如是不是恐吓信，有没有炭疽病毒，寄往某地的邮件都要检查\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Police</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">//检查信件，检查完毕后警察在信封上盖个戳：此信无病毒</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkLetter</span><span class="token punctuation">(</span><span class="token class-name">ILetterProcess</span> letterProcess<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>letterProcess<span class="token operator">+</span><span class="token string">&quot; 信件已经检查过了.....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="门面邮局" tabindex="-1"><a class="header-anchor" href="#门面邮局" aria-hidden="true">#</a> 门面邮局</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>写信件<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>写信件<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>LetterProcessImpl<span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 相当于门面\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModenPostOffice</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">ILetterProcess</span> letterProcess <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LetterProcessImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Police</span> letterPolice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Police</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//写信，封装，投递，一体化了</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendLetter</span><span class="token punctuation">(</span><span class="token class-name">String</span> context<span class="token punctuation">,</span><span class="token class-name">String</span> address<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n        <span class="token comment">//帮你写信</span>\n        letterProcess<span class="token punctuation">.</span><span class="token function">writeContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//写好信封</span>\n        letterProcess<span class="token punctuation">.</span><span class="token function">fillEnvelope</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//警察要检查信件了</span>\n        letterPolice<span class="token punctuation">.</span><span class="token function">checkLetter</span><span class="token punctuation">(</span>letterProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//把信放到信封中</span>\n        letterProcess<span class="token punctuation">.</span><span class="token function">letterInotoEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//邮递信件</span>\n        letterProcess<span class="token punctuation">.</span><span class="token function">sendLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h4 id="测试-2" tabindex="-1"><a class="header-anchor" href="#测试-2" aria-hidden="true">#</a> 测试</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>写信件<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//现代化的邮局，有这项服务，邮局名称叫Hell Road</span>\n        <span class="token class-name">ModenPostOffice</span> hellRoadPostOffice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModenPostOffice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//你只要把信的内容和收信人地址给他，他会帮你完成一系列的工作；</span>\n        <span class="token comment">//定义一个地址</span>\n        <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">&quot;广东省深圳市福田区,卡卡收&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">//信的内容</span>\n        <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">&quot;桂林风景甲天下，阳朔风景甲桂林&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">//一个门面搞定</span>\n        hellRoadPostOffice<span class="token punctuation">.</span><span class="token function">sendLetter</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * 填写信的内容....桂林风景甲天下，阳朔风景甲桂林\n * 填写收件人地址及姓名....广东省深圳市福田区,卡卡收\n * org.hzz.结构性模式.SP1_门面模式.案例.写信件.impl.LetterProcessImpl@4d7e1886 信件已经检查过了.....\n * 把信放到信封中....\n * 邮递信件...\n */</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="投资基金代码" tabindex="-1"><a class="header-anchor" href="#投资基金代码" aria-hidden="true">#</a> 投资基金代码</h3>',12),r={href:"https://gitee.com/q10viking/design-patterns/tree/master/springboot-design-patterns/src/main/java/org/hzz/%E7%BB%93%E6%9E%84%E6%80%A7%E6%A8%A1%E5%BC%8F/SP1_%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/%E6%A1%88%E4%BE%8B/%E6%8A%95%E8%B5%84%E5%9F%BA%E9%87%91%E4%BB%A3%E7%A0%81",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Fv)('<p><img src="/images/designpattern/image-20240328003205992.png" alt="image-20240328003205992"></p><h4 id="股票" tabindex="-1"><a class="header-anchor" href="#股票" aria-hidden="true">#</a> 股票</h4><p>接口</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>投资基金代码<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>股票<span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@author</span> hzz\n * <span class="token keyword">@date</span> 2024/03/28\n * <span class="token keyword">@desc</span> 股票行为接口\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStock</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 买入</span>\n    <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 卖出</span>\n    <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>投资基金代码<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>股票<span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@author</span> hzz\n * <span class="token keyword">@date</span> 2024/03/28\n * <span class="token keyword">@desc</span> 股票实现类\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stock</span> <span class="token keyword">implements</span> <span class="token class-name">IStock</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 股票名称</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;买入&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;卖出&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="基金门面" tabindex="-1"><a class="header-anchor" href="#基金门面" aria-hidden="true">#</a> 基金门面</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>投资基金代码<span class="token punctuation">.</span>门面<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>投资基金代码<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>股票<span class="token punctuation">.</span>Stock<span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@author</span> hzz\n * <span class="token keyword">@date</span> 2024/03/28\n * <span class="token keyword">@desc</span> 基金门面\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fund</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Stock</span> stock1<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Stock</span> stock2<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Stock</span> stock3<span class="token punctuation">;</span>\n    <span class="token comment">// 国债1</span>\n    <span class="token keyword">private</span> <span class="token class-name">Stock</span> nationalDebt1<span class="token punctuation">;</span>\n    <span class="token comment">// 房地产1</span>\n    <span class="token keyword">private</span> <span class="token class-name">Stock</span> realty1<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;股票1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;股票2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stock3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;股票3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>nationalDebt1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;国债1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>realty1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token string">&quot;房地产1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 购买基金\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyFund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------------基金买入--------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stock1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stock2<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stock3<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>nationalDebt1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>realty1<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 卖出基金\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellFund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------------基金买入--------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stock1<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stock2<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stock3<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>nationalDebt1<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>realty1<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h4 id="测试-3" tabindex="-1"><a class="header-anchor" href="#测试-3" aria-hidden="true">#</a> 测试</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>投资基金代码<span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span></span>结构性模式<span class="token punctuation">.</span><span class="token constant">SP1_</span>门面模式<span class="token punctuation">.</span>案例<span class="token punctuation">.</span>投资基金代码<span class="token punctuation">.</span>门面<span class="token punctuation">.</span>Fund<span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@author</span> hzz\n * <span class="token keyword">@date</span> 2024/03/27\n * <span class="token keyword">@desc</span> 投资基金代码\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 基金</span>\n        <span class="token class-name">Fund</span> fund <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 买入</span>\n        fund<span class="token punctuation">.</span><span class="token function">buyFund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 卖出</span>\n        fund<span class="token punctuation">.</span><span class="token function">sellFund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * --------------基金买入--------------------\n * 股票1买入\n * 股票2买入\n * 股票3买入\n * 国债1买入\n * 房地产1买入\n * -----------------------------------------\n *\n * --------------基金买入--------------------\n * 股票1卖出\n * 股票2卖出\n * 股票3卖出\n * 国债1卖出\n * 房地产1卖出\n * -----------------------------------------\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div>',9),b={},m=(0,a(66262).A)(b,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),c,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),l,(0,p.Lk)("p",null,[(0,p.Lk)("a",u,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),i,(0,p.Lk)("p",null,[(0,p.Lk)("a",r,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),k],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);