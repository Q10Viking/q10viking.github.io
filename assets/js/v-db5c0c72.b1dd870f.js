"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[10238],{85437:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-db5c0c72",path:"/Algorithm/%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Algorithm/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"找链表中间节点",slug:"找链表中间节点",children:[]},{level:2,title:"反转链表",slug:"反转链表",children:[]},{level:2,title:"插入",slug:"插入",children:[]}],filePathRelative:"Algorithm/重排链表.md"}},77529:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(20641);const e={class:"custom-container tip"},t=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),o={href:"https://leetcode.cn/problems/reorder-list/",target:"_blank",rel:"noopener noreferrer"},l={href:"https://github.com/Q10Viking/learncode/blob/main/algorithm/src/main/java/org/hzz/linkedlist/ReorderList_143.java",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Fv)('<p>分析示例可以发现，需要做的其实就是，找到链表的中间节点，然后将中间节点的以后的链表反转，再以“梅花间隔”的形式将反转后的链表插入到前半部分链表即可。</p><p>比如，示例2中的1-&gt;2-&gt;3-&gt;4-&gt;5，找到中间节点3，将3后的链表反转为5-&gt;4，然后将5插入1和2的中间，4插入2和3的中间即可，就形成了1-&gt;5-&gt;2-&gt;4-&gt;3。</p><h2 id="找链表中间节点" tabindex="-1"><a class="header-anchor" href="#找链表中间节点" aria-hidden="true">#</a> 找链表中间节点</h2><p><img src="/images/algorithm/image-20220816035708230.png" alt="image-20220816035708230"></p><h2 id="反转链表" tabindex="-1"><a class="header-anchor" href="#反转链表" aria-hidden="true">#</a> 反转链表</h2><p><img src="/images/algorithm/image-20220816035545696.png" alt="image-20220816035545696"></p><p><img src="/images/algorithm/image-20220816035554277.png" alt="image-20220816035554277"></p><p><img src="/images/algorithm/image-20220816035607255.png" alt="image-20220816035607255"></p><p><img src="/images/algorithm/image-20220816035619442.png" alt="image-20220816035619442"></p><h2 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h2><p><img src="/images/algorithm/image-20220816035746972.png" alt="image-20220816035746972"></p><p><img src="/images/algorithm/image-20220816035756003.png" alt="image-20220816035756003"></p><p><img src="/images/algorithm/image-20220816035803938.png" alt="image-20220816035803938"></p><p><img src="/images/algorithm/image-20220816035817572.png" alt="image-20220816035817572"></p><p><img src="/images/algorithm/image-20220816035837877.png" alt="image-20220816035837877"></p><p><img src="/images/algorithm/image-20220816035858718.png" alt="image-20220816035858718"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>链表的反转还是需要画图才好，思路理清楚了，编码的时候才方便处理，也方便找bug。同时测试的时候要注意，奇数和偶数链表的测试。</p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReorderList_143</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reorderList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token comment">// 找中间节点 奇数节点时返回第一个</span>\n        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 中间节点</span>\n        <span class="token class-name">ListNode</span> preMid <span class="token operator">=</span> slow<span class="token punctuation">;</span>\n        <span class="token comment">// 反转</span>\n        <span class="token class-name">ListNode</span> preCur <span class="token operator">=</span> preMid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>preCur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 这一步骤很巧妙</span>\n            <span class="token class-name">ListNode</span> current <span class="token operator">=</span> preCur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 这一步也骤很巧妙</span>\n            preCur<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            current<span class="token punctuation">.</span>next <span class="token operator">=</span> preMid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            preMid<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">/*“梅花间隔”的形式将反转后的链表插入到前半部分链表*/</span>\n        slow <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        fast <span class="token operator">=</span> preMid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> preMid<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// fast != null [1,2,3,4] 会出现死循环，因为当slow=preMid的时候，fast用于不可能为空</span>\n            preMid<span class="token punctuation">.</span>next <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            fast<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            slow<span class="token punctuation">.</span>next <span class="token operator">=</span> fast<span class="token punctuation">;</span>\n            <span class="token comment">// move</span>\n            slow <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            fast <span class="token operator">=</span> preMid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>',18),r={},i=(0,a(66262).A)(r,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",e,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("143. 重排链表 - 力扣（LeetCode）"),(0,p.bF)(a)])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",l,[(0,p.eW)("Source Code ReorderList_143.java"),(0,p.bF)(a)])])]),c],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);