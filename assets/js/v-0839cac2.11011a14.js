"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[19223],{35717:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-0839cac2",path:"/FileSystem/03%20bio%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/FileSystem/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"1. File类理解",slug:"_1-file类理解",children:[{level:3,title:"1.1 File抽象表示",slug:"_1-1-file抽象表示",children:[]},{level:3,title:"1.2 File的构造方法",slug:"_1-2-file的构造方法",children:[]},{level:3,title:"1.3 File的创建功能",slug:"_1-3-file的创建功能",children:[]},{level:3,title:"1.4 File删除",slug:"_1-4-file删除",children:[]},{level:3,title:"1.5 File的判断",slug:"_1-5-file的判断",children:[]},{level:3,title:"1.6 File的获取",slug:"_1-6-file的获取",children:[]},{level:3,title:"1.7 玩法:递归遍历目录",slug:"_1-7-玩法-递归遍历目录",children:[]}]},{level:2,title:"2. IO流",slug:"_2-io流",children:[{level:3,title:"2.1 IO流的分类",slug:"_2-1-io流的分类",children:[]},{level:3,title:"2.2 字节流对象",slug:"_2-2-字节流对象",children:[]},{level:3,title:"2.3 字节流输出对象FileOutputStream",slug:"_2-3-字节流输出对象fileoutputstream",children:[]},{level:3,title:"2.4 玩法: 复制文件",slug:"_2-4-玩法-复制文件",children:[]}]},{level:2,title:"3 File转流",slug:"_3-file转流",children:[]}],filePathRelative:"FileSystem/03 bio文件操作.md"}},35349:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(20641).Fv)('<h2 id="_1-file类理解" tabindex="-1"><a class="header-anchor" href="#_1-file类理解" aria-hidden="true">#</a> 1. File类理解</h2><h3 id="_1-1-file抽象表示" tabindex="-1"><a class="header-anchor" href="#_1-1-file抽象表示" aria-hidden="true">#</a> 1.1 File抽象表示</h3><ol><li>它是<strong>文件和目录路径名的抽象表示</strong></li><li>文件和目录是可以<strong>通过File封装成对象的</strong></li><li>对于File而言，其封装的<strong>并不是一个真正存在的文件，仅仅是一个路径名而已</strong>。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//  路径名的抽象表示</span>\n<span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\develop\\\\tmp\\\\file\\\\hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//  在末尾多添加一个斜杠也没事</span>\n<span class="token comment">//  File parentFile = new File(&quot;D:\\\\develop\\\\tmp\\\\file\\\\&quot;);</span>\n<span class="token class-name">File</span> parentFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\develop\\\\tmp\\\\file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentFile<span class="token punctuation">,</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_1-2-file的构造方法" tabindex="-1"><a class="header-anchor" href="#_1-2-file的构造方法" aria-hidden="true">#</a> 1.2 File的构造方法</h3><img src="/images/filesystem/image-20201008234459052.png" alt="image-20201008234459052"><h3 id="_1-3-file的创建功能" tabindex="-1"><a class="header-anchor" href="#_1-3-file的创建功能" aria-hidden="true">#</a> 1.3 File的创建功能</h3><img src="/images/filesystem/image-20201008235026103.png" alt="image-20201008235026103"><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//  路径名的抽象表示</span>\n<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\develop\\\\tmp\\\\file\\\\world.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//  创建一个文件，成功返回true,如果文件已经存在则返回false</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//  路径名的抽象表示</span>\n<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\develop\\\\tmp\\\\file\\\\java\\\\test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//  创建一个多级文件夹</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_1-4-file删除" tabindex="-1"><a class="header-anchor" href="#_1-4-file删除" aria-hidden="true">#</a> 1.4 File删除</h3><p>该方法不支持多级删除</p><img src="/images/filesystem/image-20201009000134530.png" alt="image-20201009000134530"><h3 id="_1-5-file的判断" tabindex="-1"><a class="header-anchor" href="#_1-5-file的判断" aria-hidden="true">#</a> 1.5 File的判断</h3><img src="/images/filesystem/image-20201009001031331.png" alt="image-20201009001031331"><h3 id="_1-6-file的获取" tabindex="-1"><a class="header-anchor" href="#_1-6-file的获取" aria-hidden="true">#</a> 1.6 File的获取</h3><img src="/images/filesystem/image-20201009000948556.png" alt="image-20201009000948556"><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//  路径名的抽象表示</span>\n<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\Hello.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//  D:\\develop\\spring\\.\\Hello.java</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//  .\\Hello.java</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Hello.java</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_1-7-玩法-递归遍历目录" tabindex="-1"><a class="header-anchor" href="#_1-7-玩法-递归遍历目录" aria-hidden="true">#</a> 1.7 玩法:递归遍历目录</h3><blockquote><p>通过递归完成遍历目录下所有内容，并把所有文件的绝对路径输出在控制台</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\develop\\\\tmp\\\\file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">printAbsolutePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//  遍历该目录下的所有文件的绝对路径</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printAbsolutePath</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token comment">//  文件</span>\n            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> anotherFile<span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">printAbsolutePath</span><span class="token punctuation">(</span>anotherFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**output\n * D:\\develop\\tmp\\file\\hello.txt\n * D:\\develop\\tmp\\file\\java\\world.txt\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><hr><h2 id="_2-io流" tabindex="-1"><a class="header-anchor" href="#_2-io流" aria-hidden="true">#</a> 2. IO流</h2><p>流的本质是数据传输</p><h3 id="_2-1-io流的分类" tabindex="-1"><a class="header-anchor" href="#_2-1-io流的分类" aria-hidden="true">#</a> 2.1 IO流的分类</h3><h4 id="_2-1-1-数据流向" tabindex="-1"><a class="header-anchor" href="#_2-1-1-数据流向" aria-hidden="true">#</a> 2.1.1 数据流向</h4><ol><li>输入流：读数据</li><li>输出流：写数据</li></ol><h4 id="_2-2-2-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-2-2-数据类型" aria-hidden="true">#</a> 2.2.2 数据类型</h4><ol><li>字节流 <ol><li>字节输入流</li><li>字节输出流</li></ol></li><li>字符流 <ol><li>字符输入流</li><li>字符输出流</li></ol></li></ol><h4 id="_2-2-3-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-2-3-使用场景" aria-hidden="true">#</a> 2.2.3 使用场景</h4><ol><li>如果操作的是纯文本文件，优先使用字符流</li><li>如果操作的是图片、视频、音频等二进制文件。优先使用字节流</li><li>如果不确定文件类型，优先使用字节流。字节流是万能的流</li></ol><h3 id="_2-2-字节流对象" tabindex="-1"><a class="header-anchor" href="#_2-2-字节流对象" aria-hidden="true">#</a> 2.2 字节流对象</h3><h4 id="_2-2-1-字节流抽象基类" tabindex="-1"><a class="header-anchor" href="#_2-2-1-字节流抽象基类" aria-hidden="true">#</a> 2.2.1 字节流抽象基类</h4><ol><li><code>InputStream</code>：这个抽象类是表示字节输入流的所有类的超类</li><li><code>OutputStream</code>：这个抽象类是表示字节输出流的所有类的超类</li><li>子类名特点：子类名称都是<strong>以其父类名作为子类名的后缀</strong></li></ol><h3 id="_2-3-字节流输出对象fileoutputstream" tabindex="-1"><a class="header-anchor" href="#_2-3-字节流输出对象fileoutputstream" aria-hidden="true">#</a> 2.3 字节流输出对象FileOutputStream</h3><h4 id="_2-3-1-写数据的步骤" tabindex="-1"><a class="header-anchor" href="#_2-3-1-写数据的步骤" aria-hidden="true">#</a> 2.3.1 写数据的步骤</h4><ol><li>创建字节输出流对象 <ol><li><strong>调用系统功能创建了文件</strong></li><li>创建字节输出流对象</li><li>让字节输出流对象指向文件</li></ol></li><li>调用字节输出流对象的写数据方法</li><li>释放资源(关闭此文件输出流并释放与此流相关联的任何系统资源)</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 1. 调用系统功能创建了文件\n * 2. 创建字节输出流对象\n * 3. 让字节输出流对象指向文件\n */</span>\n<span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\world.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>\n\n<span class="token comment">//  写入一个字节</span>\n<span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>   <span class="token comment">//  &#39;a&#39;的ascii码</span>\nout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//  换行</span>\nout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//  写入一个字节数组</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sentence <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_2-3-2-写数据的三种方式" tabindex="-1"><a class="header-anchor" href="#_2-3-2-写数据的三种方式" aria-hidden="true">#</a> 2.3.2 写数据的三种方式</h4><img src="/images/filesystem/image-20201009075906099.png" alt="image-20201009075906099"><h4 id="_2-3-3-换行" tabindex="-1"><a class="header-anchor" href="#_2-3-3-换行" aria-hidden="true">#</a> 2.3.3 换行</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>windows:<span class="token punctuation">\\</span>r<span class="token punctuation">\\</span>n\nlinux:<span class="token punctuation">\\</span>n\nmac:<span class="token punctuation">\\</span>r\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-3-4-追加" tabindex="-1"><a class="header-anchor" href="#_2-3-4-追加" aria-hidden="true">#</a> 2.3.4 追加</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 如果第二个参数为true ，则字节将写入文件的末尾而不是开头</span>\n<span class="token keyword">public</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> append<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-4-玩法-复制文件" tabindex="-1"><a class="header-anchor" href="#_2-4-玩法-复制文件" aria-hidden="true">#</a> 2.4 玩法: 复制文件</h3><blockquote><p>将文件进行复制可以是图片，文本，视频等</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token comment">//  根据目的地，创建字节输出流对象</span>\n    <span class="token class-name">OutputStream</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\develop\\\\tmp\\\\file\\\\video_copy.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//  根据数据源，创建字节输入流对象</span>\n    <span class="token class-name">InputStream</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\develop\\\\tmp\\\\file\\\\video.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//  复制数据</span>\n    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> len<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        target<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//  关闭资源</span>\n    target<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    src<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_3-file转流" tabindex="-1"><a class="header-anchor" href="#_3-file转流" aria-hidden="true">#</a> 3 File转流</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//  读取一个文件</span>\n<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//  转化为流</span>\n<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//\tInputStream inputStream = new FileInputStream(path)</span>\n<span class="token comment">//  指定文件</span>\n<span class="token class-name">Reader</span> reader <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',49),p={},t=(0,a(66262).A)(p,[["render",function(n,s){return e}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);