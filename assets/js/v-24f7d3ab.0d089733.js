"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[25613],{50873:(n,t,s)=>{s.r(t),s.d(t,{data:()=>o});const o={key:"v-24f7d3ab",path:"/MySQL/18%20count%E4%BC%98%E5%8C%96.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"count(*) 的实现方式",slug:"count-的实现方式",children:[]},{level:2,title:"count(*)很慢解决方案",slug:"count-很慢解决方案",children:[{level:3,title:"用缓存系统保存计数",slug:"用缓存系统保存计数",children:[]},{level:3,title:"在数据库保存计数❤️",slug:"在数据库保存计数❤️",children:[]}]},{level:2,title:"不同count的用法",slug:"不同count的用法",children:[]},{level:2,title:"count(1)、count(*) 与 count(列名) 的区别",slug:"count-1-、count-与-count-列名-的区别",children:[]}],filePathRelative:"MySQL/18 count优化.md"}},92988:(n,t,s)=>{s.r(t),s.d(t,{default:()=>e});const o=(0,s(20641).Fv)('<h2 id="count-的实现方式" tabindex="-1"><a class="header-anchor" href="#count-的实现方式" aria-hidden="true">#</a> count(*) 的实现方式</h2><p>在不同的 MySQL 引擎中，count(*) 有不同的实现方式。</p><ul><li>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高；</li><li>而 InnoDB 引擎就麻烦了，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。</li></ul><p>这里需要注意的是，在这里讨论的是没有过滤条件的 count(*)，如果加了 where 条件的话，MyISAM 表也是不能返回得这么快的。</p><blockquote><p>那<strong>为什么 InnoDB 不跟 MyISAM 一样，也把数字存起来呢？</strong></p></blockquote><p>这是因为即使是在同一个时刻的多个查询，由于多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。这里，我用一个算 count(*) 的例子来为你解释一下。</p><p>假设表 t 中现在有 10000 条记录，我们设计了三个用户并行的会话。</p><ul><li>会话 A 先启动事务并查询一次表的总行数；</li><li>会话 B 启动事务，插入一行后记录后，查询表的总行数；</li><li>会话 C 先启动一个单独的语句，插入一行记录后，查询表的总行数。</li></ul><p><img src="/images/MySQL/image-20230509221218260.png" alt="image-20230509221218260"></p><h2 id="count-很慢解决方案" tabindex="-1"><a class="header-anchor" href="#count-很慢解决方案" aria-hidden="true">#</a> count(*)很慢解决方案</h2><h3 id="用缓存系统保存计数" tabindex="-1"><a class="header-anchor" href="#用缓存系统保存计数" aria-hidden="true">#</a> 用缓存系统保存计数</h3><p>可以用一个 Redis 服务来保存这个表的总行数。这个表每被插入一行 Redis 计数就加 1，每被删除一行 Redis 计数就减 1。这种方式下，读和更新操作都很快。</p><p>但是缓存系统可能会丢失更新。而且会有数据不一致性的问题</p><ol><li>一种是，查到的 100 行结果里面有最新插入记录，而 Redis 的计数里还没加 1；</li><li>另一种是，查到的 100 行结果里没有最新插入的记录，而 Redis 的计数里已经加了 1</li></ol><p><img src="/images/MySQL/image-20230509221425761.png" alt="image-20230509221425761"></p><h3 id="在数据库保存计数❤️" tabindex="-1"><a class="header-anchor" href="#在数据库保存计数❤️" aria-hidden="true">#</a> 在数据库保存计数❤️</h3><blockquote><p><strong>把这个计数直接放到数据库里单独的一张计数表 C 中</strong>.通过事务的一致性来保证</p></blockquote><p><img src="/images/MySQL/image-20230509221538424.png" alt="image-20230509221538424"></p><h2 id="不同count的用法" tabindex="-1"><a class="header-anchor" href="#不同count的用法" aria-hidden="true">#</a> 不同count的用法</h2><p>在 select count(?) from t 这样的查询语句里面，count(*)、count(主键 id)、count(字段) 和 count(1) 等不同用法的性能</p><blockquote><p>阿里规范：【强制】不要使用 count(列名)或 count(常量)来替代 count(*)，count(*)是 SQL92 定义的标 准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。 说明：<strong>count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行</strong>。</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code> <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">;</span>\n <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">;</span>\n <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">;</span>\n <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">;</span>      \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>注意：以上4条sql只有根据某个字段count不会统计字段为null值的数据行</strong></p><p><strong>四个sql的执行计划一样，说明这四个sql执行效率应该差不多</strong></p><p><img src="/images/MySQL/image-20211028201409693.png" alt="image-20211028201409693"></p><p><strong>字段有索引：count(*)≈count(1)&gt;count(字段)&gt;count(主键 id) //字段有索引，count(字段)统计走二级索引，二级索引存储数据比主键索引少，所以count(字段)&gt;count(主键 id)</strong></p><p><strong>字段无索引：count(*)≈count(1)&gt;count(主键 id)&gt;count(字段) //字段没有索引count(字段)统计走不了索引，count(主键 id)还可以走主键索引，所以count(主键 id)&gt;count(字段)</strong></p><p>⭐⭐⭐</p><ol><li><p>count(1)跟count(字段)执行过程类似，不过count(1)不需要取出字段统计，就用常量1做统计，count(字段)还需要取出字段，所以理论上count(1)比count(字段)会快一点。</p></li><li><p>count(*) 是例外，mysql并不会把全部字段取出来，而是<strong>专门做了优化，不取值，按行累加</strong>，效率很高，所以<strong>不需要用count(列名)或count(常量)来替代 count(*)。</strong></p></li><li><p>为什么对于count(id)，mysql最终选择辅助索引而不是主键聚集索引？因为<strong>二级索引相对主键索引存储数据更少，检索性能应该更高</strong>，mysql内部做了点优化(应该是在5.7版本才优化)。</p></li></ol><h2 id="count-1-、count-与-count-列名-的区别" tabindex="-1"><a class="header-anchor" href="#count-1-、count-与-count-列名-的区别" aria-hidden="true">#</a> count(1)、count(*) 与 count(列名) 的区别</h2><ol><li>**COUNT(1)：**这种写法中，1表示一个常量值，它会被用于计算查询结果集的行数。由于1是一个常量，在执行COUNT(1)时，数据库不会去访问或读取任何实际的数据，仅仅是对满足条件的行进行计数，因此执行速度相对较快。</li><li>**COUNT( * )：**这种写法中，表示选取所有列，它会对满足条件的行进行计数。与COUNT(1)不同的是，执行COUNT( * )时，数据库需要读取每一行的数据，然后进行计数操作，因此它可能会比COUNT(1)稍微慢一些。不过，在大多数数据库中，优化器会对COUNT( * )进行特殊处理，可以通过索引等方式进行优化，使得性能相对较好。</li><li>**COUNT(列名)：**这种写法中，列名表示具体的表列，<strong>它会对非空（NULL）值的行进行计数</strong>。相比于COUNT(1)和COUNT(*)，COUNT(列名)会跳过值为NULL的行，只统计非空值的行数。这在某些特定的情况下可能更符合实际需求，例如统计某个列的非空值个数。</li></ol><p><strong>总体来说</strong>，COUNT(1)和COUNT(*)的性能较好且结果一致，而COUNT(列名)则对非空值进行计数。在实际使用时，可以根据具体的查询需求和性能要求选择适当的写法。</p>',32),a={},e=(0,s(66262).A)(a,[["render",function(n,t){return o}]])},66262:(n,t)=>{t.A=(n,t)=>{const s=n.__vccOpts||n;for(const[n,o]of t)s[n]=o;return s}}}]);