"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[62086],{29044:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-00cccb61",path:"/Docker/18%20k8s%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Docker/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Deployment",slug:"deployment",children:[]},{level:2,title:"Pod",slug:"pod",children:[]},{level:2,title:"Service",slug:"service",children:[]},{level:2,title:"k8s中的资源",slug:"k8s中的资源",children:[{level:3,title:"资源清单",slug:"资源清单",children:[]}]},{level:2,title:"使用资源清单yaml来创建k8s的资源对象",slug:"使用资源清单yaml来创建k8s的资源对象",children:[{level:3,title:"创建deployment资源",slug:"创建deployment资源",children:[]},{level:3,title:"创建service资源",slug:"创建service资源",children:[]},{level:3,title:"端口问题❤️",slug:"端口问题❤️",children:[]},{level:3,title:"对已有资源输出资源清单",slug:"对已有资源输出资源清单",children:[]}]}],filePathRelative:"Docker/18 k8s核心概念.md"}},64624:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(20641).Fv)('<h2 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment" aria-hidden="true">#</a> <strong>Deployment</strong></h2><p>Deployment负责创建和更新应用程序的实例。创建Deployment后，Kubernetes Master 将应用程序实例调度到集群中的各个节点上。如果托管实例的节点关闭或被删除，Deployment控制器会将该实例替换为群集中另一个节点上的实例。这提供了一种自我修复机制来解决机器故障维护问题。</p><p><img src="/images/Docker/110770.png" alt="https://note.youdao.com/yws/public/resource/bc7bee305611b52d6900ba209a92bd4d/xmlnote/63A0FDF8D9374087B3E6EA4A535C7CAD/110770"></p><h2 id="pod" tabindex="-1"><a class="header-anchor" href="#pod" aria-hidden="true">#</a> Pod</h2><p>Pod相当于<strong>逻辑主机</strong>的概念，负责托管应用实例。包括一个或多个应用程序容器（如 Docker），以及这些容器的一些共享资源（共享存储、网络、运行信息等）</p><p><img src="/images/Docker/110768.png" alt="https://note.youdao.com/yws/public/resource/bc7bee305611b52d6900ba209a92bd4d/xmlnote/5E19A047D14F4E89AF6D97004738B9E7/110768"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@k8s-master ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -o wide -l app=my-tomcat</span>\nNAME                         READY   STATUS    RESTARTS   AGE   IP            NODE        NOMINATED NODE   READINESS GATES\nmy-tomcat-685b8fd9c9-g2kkp   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37m   <span class="token number">10.244</span>.2.13   k8s-node2   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>\nmy-tomcat-685b8fd9c9-wcr2k   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37m   <span class="token number">10.244</span>.2.14   k8s-node2   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>\nmy-tomcat-685b8fd9c9-wnzc9   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37m   <span class="token number">10.244</span>.1.15   k8s-node1   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="/images/Docker/image-20230425150143689.png" alt="image-20230425150143689"></p><blockquote><p>可以看到虽然都在主机k8s-node2上，各自的pod拥有自己独立的内网IP</p></blockquote><h2 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h2><p>Service是一个抽象层，它定义了一组Pod的逻辑集，<strong>并为这些Pod支持外部流量暴露、负载均衡和服务发现</strong>。</p><p>尽管每个Pod 都有一个唯一的IP地址，但是如果没有Service，这些IP不会暴露在群集外部。Service允许您的应用程序接收流量。Service也可以用在ServiceSpec标记type的方式暴露，type类型如下：</p><ul><li>ClusterIP（默认）：在集群的内部IP上公开Service。这种类型使得Service只能从集群内访问。</li><li>NodePort：使用NAT在集群中每个选定Node的相同端口上公开Service。使用 <strong>:</strong> 从集群外部访问Service。是ClusterIP的超集。</li><li>LoadBalancer：在当前云中创建一个外部负载均衡器(如果支持的话)，并为Service分配一个固定的外部IP。是NodePort的超集。</li><li>ExternalName：通过返回带有该名称的CNAME记录，使用任意名称（由spec中的externalName指定）公开Service。不使用代理。</li></ul><p><img src="/images/Docker/110767.png" alt="0"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 该port为tomcat自己运行的port,暴露出去的端口，系统会随机选择一个</span>\nkubectl expose deployment my-tomcat <span class="token parameter variable">--name</span><span class="token operator">=</span>tomcat <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token parameter variable">--type</span><span class="token operator">=</span>NodePort\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h2 id="k8s中的资源" tabindex="-1"><a class="header-anchor" href="#k8s中的资源" aria-hidden="true">#</a> k8s中的资源</h2><p>k8s中所有的内容都抽象为资源， 资源实例化之后，叫做对象，上面说的那些核心概念都是k8s中的资源。</p><p><strong>k8s中有哪些资源</strong></p><ul><li>工作负载型资源(workload)： Pod，ReplicaSet，Deployment，StatefulSet，DaemonSet等等</li><li>服务发现及负载均衡型资源(ServiceDiscovery LoadBalance): Service，Ingress等等</li><li>配置与存储型资源： Volume(存储卷)，CSI(容器存储接口,可以扩展各种各样的第三方存储卷)</li><li>特殊类型的存储卷：ConfigMap(当配置中心来使用的资源类型)，Secret(保存敏感数据)，DownwardAPI(把外部环境中的信息输出给容器)</li></ul><p>以上这些资源都是配置在名称空间级别</p><ul><li>集群级资源：Namespace，Node，Role，ClusterRole，RoleBinding(角色绑定)，ClusterRoleBinding(集群角色绑定)</li><li>元数据型资源：HPA(Pod水平扩展)，PodTemplate(Pod模板,用于让控制器创建Pod时使用的模板)，LimitRange(用来定义硬件资源限制的)</li></ul><hr><h3 id="资源清单" tabindex="-1"><a class="header-anchor" href="#资源清单" aria-hidden="true">#</a> 资源清单</h3><p>之前我们直接用命令创建deployment，pod，service这些资源，其实在k8s中，<strong>我们一般都会使用yaml格式的文件来创建符合我们预期期望的资源</strong>，这样的yaml文件我们一般称为资源清单</p><blockquote><p>资源清单yaml格式</p></blockquote><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> group/apiversion  <span class="token comment"># 如果没有给定group名称，那么默认为croe，可以使用kubectl api-versions 获取当前k8s版本上所有的apiVersion版本信息(每个版本可能不同)</span>\n<span class="token key atrule">kind</span><span class="token punctuation">:</span>       <span class="token comment">#资源类别</span>\nmetadata：  <span class="token comment">#资源元数据</span>\n   name\n   namespace  <span class="token comment">#k8s自身的namespace</span>\n   lables\n   annotations   <span class="token comment">#主要目的是方便用户阅读查找</span>\nspec<span class="token punctuation">:</span>期望的状态（disired state）\nstatus：当前状态，本字段由kubernetes自身维护，用户不能去定义\n<span class="token comment">#配置清单主要有五个一级字段，其中status字段用户不能定义，由k8s自身维护</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="使用资源清单yaml来创建k8s的资源对象" tabindex="-1"><a class="header-anchor" href="#使用资源清单yaml来创建k8s的资源对象" aria-hidden="true">#</a> 使用资源清单yaml来创建k8s的资源对象</h2><h3 id="创建deployment资源" tabindex="-1"><a class="header-anchor" href="#创建deployment资源" aria-hidden="true">#</a> 创建deployment资源</h3><p>我们可以用创建deployment的命令加上参数 <code>--dry-run -o yaml</code> 就可以输出这次部署的资源清单yaml</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@k8s-master ~<span class="token punctuation">]</span><span class="token comment"># kubectl create deployment my-tomcat --image=tomcat:7.0.75-alpine --dry-run -o yaml</span>\nW0425 <span class="token number">15</span>:13:14.313403   <span class="token number">63019</span> helpers.go:535<span class="token punctuation">]</span> --dry-run is deprecated and can be replaced with --dry-run<span class="token operator">=</span>client.\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: my-tomcat\n  name: my-tomcat\nspec:\n  replicas: <span class="token number">1</span>\n  selector:\n    matchLabels:\n      app: my-tomcat\n  strategy: <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: my-tomcat\n    spec:\n      containers:\n      - image: tomcat:7.0.75-alpine\n        name: tomcat\n        resources: <span class="token punctuation">{</span><span class="token punctuation">}</span>\nstatus: <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>我们可以对上面的yaml适当的修改下保存为文件<code>deployment-demo.yaml</code></p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>\n  <span class="token key atrule">labels</span><span class="token punctuation">:</span>\n    <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>tomcat<span class="token punctuation">-</span>yaml <span class="token comment"># 修改label</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>tomcat<span class="token punctuation">-</span>yaml  <span class="token comment"># 修改deployment的名称</span>\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token comment">#修改pod副本为两个</span>\n  <span class="token key atrule">selector</span><span class="token punctuation">:</span>\n    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>\n      <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>tomcat<span class="token punctuation">-</span>yaml <span class="token comment"># 修改</span>\n  <span class="token key atrule">strategy</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token key atrule">template</span><span class="token punctuation">:</span>\n    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n      <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>\n      <span class="token key atrule">labels</span><span class="token punctuation">:</span>\n        <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>tomcat<span class="token punctuation">-</span>yaml <span class="token comment">#修改</span>\n    <span class="token key atrule">spec</span><span class="token punctuation">:</span>\n      <span class="token key atrule">containers</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>7.0.75<span class="token punctuation">-</span>alpine\n        <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat\n        <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>然后执行如下命令就可以用yaml文件来创建这次部署</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubectl get all\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/Docker/image-20230425160811891.png" alt="image-20230425160811891"></p><h3 id="创建service资源" tabindex="-1"><a class="header-anchor" href="#创建service资源" aria-hidden="true">#</a> 创建service资源</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubectl expose deployment my-tomcat <span class="token parameter variable">--name</span><span class="token operator">=</span>tomcat <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token parameter variable">--type</span><span class="token operator">=</span>NodePort --dry-run <span class="token parameter variable">-o</span> yaml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/Docker/image-20230425162731694.png" alt="image-20230425162731694"></p><p>修改下上面yaml内容，保存为文件：<code>service-demo.yaml </code></p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>\n  <span class="token key atrule">labels</span><span class="token punctuation">:</span>\n    <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>tomcat<span class="token punctuation">-</span>yaml\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>tomcat<span class="token punctuation">-</span>yaml\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>       <span class="token comment"># service的虚拟ip对应的端口，在集群内网机器可以访问用service的虚拟ip加该端口号访问服务</span>\n    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30001</span>  <span class="token comment"># service在宿主机上映射的外网访问端口，端口范围必须在30000-32767之间</span>\n    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP\n    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token comment"># pod暴露的端口，一般与pod内部容器暴露的端口一致</span>\n  <span class="token key atrule">selector</span><span class="token punctuation">:</span>\n    <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>tomcat<span class="token punctuation">-</span>yaml\n  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort\n<span class="token key atrule">status</span><span class="token punctuation">:</span>\n  <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="端口问题❤️" tabindex="-1"><a class="header-anchor" href="#端口问题❤️" aria-hidden="true">#</a> 端口问题❤️</h3><blockquote><p>cluster 外部请求通过节点端口 nodePort 转发到 service 的 port，并被 pod 在 targetPort 端口上接收</p></blockquote><ul><li><p>nodePort对应外网的接口</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@k8s-master learnk8s<span class="token punctuation">]</span><span class="token comment"># kubectl get svc -l app=my-tomcat-yaml</span>\nNAME             TYPE       CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGE\nmy-tomcat-yaml   NodePort   <span class="token number">10.100</span>.93.127   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">80</span>:30001/TCP   26m\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>30001</code>就是外网可以访问的</p><p><img src="/images/Docker/image-20230425170014181.png" alt="image-20230425170014181"></p></li><li><p>port 对应service级别</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@k8s-master learnk8s<span class="token punctuation">]</span><span class="token comment"># kubectl get svc -l app=my-tomcat-yaml</span>\nNAME             TYPE       CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGE\nmy-tomcat-yaml   NodePort   <span class="token number">10.100</span>.93.127   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>        <span class="token number">80</span>:30001/TCP   26m\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>80</code>是内网服务的端口 如在内网上通过service的IP（<code>10.100.93.127</code>）+port(<code>80</code>)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@k8s-master learnk8s<span class="token punctuation">]</span><span class="token comment"># curl 10.100.93.127:80</span>\n\n<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span>\n\n\n<span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>targetPort 对应pod中容器暴露的端口</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@k8s-master learnk8s<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -o wide -l app=my-tomcat-yaml</span>\nNAME                              READY   STATUS    RESTARTS   AGE   IP            NODE        NOMINATED NODE   READINESS GATES\nmy-tomcat-yaml-67c6fb7f89-8r79d   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          59m   <span class="token number">10.244</span>.1.16   k8s-node1   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>\nmy-tomcat-yaml-67c6fb7f89-d2pff   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          59m   <span class="token number">10.244</span>.1.17   k8s-node1   <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>none<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>访问，IP(pod的ip地址)+容器暴露的端口targetPort</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@k8s-master learnk8s<span class="token punctuation">]</span><span class="token comment"># curl 10.244.1.16:8080</span>\n<span class="token punctuation">[</span>root@k8s-master learnk8s<span class="token punctuation">]</span><span class="token comment"># curl 10.244.1.17:8080</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><hr><p>然后执行命令如下命令就可以用yaml文件来创建service</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> service-demo.yaml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="对已有资源输出资源清单" tabindex="-1"><a class="header-anchor" href="#对已有资源输出资源清单" aria-hidden="true">#</a> 对已有资源输出资源清单</h3><blockquote><p>将资源的配置以yaml的格式输出出来</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#使用 -o 参数加yaml，可以将资源的配置以yaml的格式输出出来，也可以使用json，输出为json格式</span>\nkubectl get pod my-tomcat-yaml-67c6fb7f89-d2pff <span class="token parameter variable">-o</span> yaml  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr>',51),p={},t=(0,a(66262).A)(p,[["render",function(n,s){return e}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);