"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[38693],{11575:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5f189718",path:"/golang/18%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/golang/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"面向对象编程",slug:"面向对象编程",children:[]},{level:2,title:"构造函数",slug:"构造函数",children:[{level:3,title:"自定义构造函数",slug:"自定义构造函数",children:[]}]},{level:2,title:"单例模式",slug:"单例模式",children:[]}],filePathRelative:"golang/18 面向对象.md"}},42336:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(20641);const t=(0,p.Lk)("h2",{id:"面向对象编程",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#面向对象编程","aria-hidden":"true"},"#"),(0,p.eW)(" 面向对象编程")],-1),e={href:"https://github.com/Q10Viking/Learn-golang/blob/main/basic/17%20oop/oop.go",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Fv)('<details class="custom-container details"><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">//洗衣机</span>\n<span class="token keyword">type</span> Washer <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tState  <span class="token builtin">bool</span>\n\tPowder <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//衣服</span>\n<span class="token keyword">type</span> Closes <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tClean <span class="token builtin">bool</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>washer <span class="token operator">*</span>Washer<span class="token punctuation">)</span> <span class="token function">prepare</span><span class="token punctuation">(</span>closes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Closes<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> washer<span class="token punctuation">.</span>State <span class="token operator">||</span> washer<span class="token punctuation">.</span>Powder <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>closes<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;请确保在关机的状态下加入适量衣物和洗衣粉&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>washer <span class="token operator">*</span>Washer<span class="token punctuation">)</span> <span class="token function">wash</span><span class="token punctuation">(</span>closes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Closes<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> err <span class="token operator">:=</span> washer<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>closes<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> err\n\t<span class="token punctuation">}</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;开机&quot;</span><span class="token punctuation">)</span>\n\twasher<span class="token punctuation">.</span>State <span class="token operator">=</span> <span class="token boolean">true</span>\n\n\t<span class="token comment">//检查是否有脏衣服</span>\n\tclean <span class="token operator">:=</span> <span class="token boolean">true</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ele <span class="token operator">:=</span> <span class="token keyword">range</span> closes <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token operator">!</span>ele<span class="token punctuation">.</span>Clean <span class="token punctuation">{</span>\n\t\t\tclean <span class="token operator">=</span> <span class="token boolean">false</span>\n\t\t\t<span class="token keyword">break</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> clean <span class="token punctuation">{</span>\n\t\twasher<span class="token punctuation">.</span>State <span class="token operator">=</span> <span class="token boolean">false</span>\n\t\t<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;所有衣服都是干净的，不需要洗&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">//开始洗衣服</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;注水&quot;</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;滚动&quot;</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;关机&quot;</span><span class="token punctuation">)</span>\n\twasher<span class="token punctuation">.</span>State <span class="token operator">=</span> <span class="token boolean">false</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ele <span class="token operator">:=</span> <span class="token keyword">range</span> closes <span class="token punctuation">{</span>\n\t\tele<span class="token punctuation">.</span>Clean <span class="token operator">=</span> <span class="token boolean">true</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>washer <span class="token operator">*</span>Washer<span class="token punctuation">)</span> <span class="token function">check</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> closes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Closes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;洗衣失败:%v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;洗干净了%d件衣服\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>closes<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> washer<span class="token punctuation">.</span>State <span class="token punctuation">{</span>\n\t\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;你忘关洗衣机了&quot;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div></details><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\twasher <span class="token operator">:=</span> <span class="token operator">&amp;</span>Washer<span class="token punctuation">{</span>State<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> Powder<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span>\n\tcloses <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Closes<span class="token punctuation">{</span><span class="token punctuation">{</span>Clean<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Clean<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n\terr <span class="token operator">:=</span> washer<span class="token punctuation">.</span><span class="token function">wash</span><span class="token punctuation">(</span>closes<span class="token punctuation">)</span>\n\twasher<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> closes<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h2><p><img src="/images/golang/image-20221109212000043.png" alt="image-20221109212000043"></p><h3 id="自定义构造函数" tabindex="-1"><a class="header-anchor" href="#自定义构造函数" aria-hidden="true">#</a> 自定义构造函数</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewDefaultUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>User<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span>\n        Name<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n        Age<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>\n        Sex<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewUser</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span>age <span class="token builtin">int</span><span class="token punctuation">,</span>sex <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token operator">*</span>User<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span>\n        Name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>\n        Age<span class="token punctuation">:</span> age<span class="token punctuation">,</span>\n        Sex<span class="token punctuation">:</span> sex<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h2>',8),c={href:"https://github.com/Q10Viking/Learn-golang/blob/main/basic/17%20oop/constructor/singleton.go",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Fv)('<div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>\n\tsUser     <span class="token operator">*</span>User\n\tsUserOnce sync<span class="token punctuation">.</span>Once\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">GetUserInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>User <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> sUser <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tsUserOnce<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> sUser <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t\t\tsUser <span class="token operator">=</span> <span class="token function">NewDefaultUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> sUser\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',1),u={},r=(0,a(66262).A)(u,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.eW)("面向对象，"),(0,p.Lk)("a",e,[(0,p.eW)("github oop.go"),(0,p.bF)(a)])]),o,(0,p.Lk)("p",null,[(0,p.Lk)("a",c,[(0,p.eW)("Github singleton.go"),(0,p.bF)(a)])]),l],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);