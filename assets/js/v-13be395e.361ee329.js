"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[35097],{79426:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-13be395e",path:"/java/50%20Map.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/java/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"EnumMap",slug:"enummap",children:[]},{level:2,title:"TreeMap",slug:"treemap",children:[{level:3,title:"TreeMap 怎么实现根据 value 值倒序",slug:"treemap-怎么实现根据-value-值倒序",children:[]}]},{level:2,title:"HashMap 和 Hashtable 有什么区别",slug:"hashmap-和-hashtable-有什么区别",children:[{level:3,title:"",slug:"",children:[]}]},{level:2,title:"有哪些方法可以解决哈希冲突",slug:"有哪些方法可以解决哈希冲突",children:[]},{level:2,title:"HashMap 的扩容为什么是 2^n",slug:"hashmap-的扩容为什么是-2-n",children:[]},{level:2,title:"有哈希冲突的情况下 HashMap 如何取值",slug:"有哈希冲突的情况下-hashmap-如何取值",children:[]},{level:2,title:"为什么重写 equals() 时一定要重写 hashCode()",slug:"为什么重写-equals-时一定要重写-hashcode",children:[]}],filePathRelative:"java/50 Map.md"}},84641:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var p=a(20641);const t={href:"https://github.com/Q10Viking/learncode/tree/main/javabasic/src/org/hzz/collection/map",target:"_blank",rel:"noopener noreferrer"},e=(0,p.Fv)('<p>集合有两个大接口：Collection 和 Map</p><p><img src="/images/java/e9786a20-e691-11e9-80c2-21d8cc9d922e" alt=""></p><h2 id="enummap" tabindex="-1"><a class="header-anchor" href="#enummap" aria-hidden="true">#</a> EnumMap</h2><p>因为<code>HashMap</code>是一种通过对key计算<code>hashCode()</code>，通过空间换时间的方式，直接定位到value所在的内部数组的索引，因此，查找效率非常高。</p><p>如果作为key的对象是<code>enum</code>类型，那么，还可以使用Java集合库提供的一种<code>EnumMap</code>，它在内部以一个非常紧凑的数组存储value，并且根据<code>enum</code>类型的key直接定位到内部数组的索引，并不需要计算<code>hashCode()</code>，不但效率最高，而且没有额外的空间浪费</p><p>但是一般不建议使用，比如Android的官网</p><blockquote><p>不建议使用enums，占用内存多（Enums often require more than twice as much memory as static constants.）</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DayOfWeek</span> <span class="token punctuation">{</span>\n    <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>完全可以用静态常量替换</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DayOfWeekConsts</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> <span class="token constant">MONDAY</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token constant">TUESDAY</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token constant">WEDNESDAY</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n    <span class="token keyword">int</span> <span class="token constant">THURSDAY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token constant">FRIDAY</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token constant">SATURDAY</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token constant">SUNDAY</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>测试</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumMapTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">,</span><span class="token string">&quot;星期一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">SUNDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * <span class="token punctuation">{</span>MONDAY=星期一, TUESDAY=星期二, WEDNESDAY=星期三, THURSDAY=星期四, FRIDAY=星期五, SATURDAY=星期六, SUNDAY=星期日<span class="token punctuation">}</span>\n * 星期一\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><hr><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeekConsts</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">,</span><span class="token string">&quot;星期一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeekConsts</span><span class="token punctuation">.</span><span class="token constant">TUESDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeekConsts</span><span class="token punctuation">.</span><span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeekConsts</span><span class="token punctuation">.</span><span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeekConsts</span><span class="token punctuation">.</span><span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeekConsts</span><span class="token punctuation">.</span><span class="token constant">SATURDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeekConsts</span><span class="token punctuation">.</span><span class="token constant">SUNDAY</span><span class="token punctuation">,</span> <span class="token string">&quot;星期日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeekConsts</span><span class="token punctuation">.</span><span class="token constant">MONDAY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n     * <span class="token punctuation">{</span>0=星期一, 1=星期二, 2=星期三, 3=星期四, 4=星期五, 5=星期六, 6=星期日<span class="token punctuation">}</span>\n     * 星期一\n     */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="treemap" tabindex="-1"><a class="header-anchor" href="#treemap" aria-hidden="true">#</a> TreeMap</h2><blockquote><p>默认是根据key升序排序</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;pear&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {apple=2, orange=1, pear=3}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="treemap-怎么实现根据-value-值倒序" tabindex="-1"><a class="header-anchor" href="#treemap-怎么实现根据-value-值倒序" aria-hidden="true">#</a> TreeMap 怎么实现根据 value 值倒序</h3><p>先把 TreeMap 转换为 ArrayList，在使用 Collections.sort() 根据 value进行倒序牌排序</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeMapDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;pear&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {apple=2, orange=1, pear=3}</span>\n        <span class="token function">orderValueDesc</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">orderValueDesc</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 定义一个比较器Comparator</span>\n        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> descValue <span class="token operator">=</span> <span class="token punctuation">(</span>item1<span class="token punctuation">,</span>item2<span class="token punctuation">)</span>\n                <span class="token operator">-&gt;</span> item2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>item1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>descValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [pear=3, apple=2, orange=1]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="hashmap-和-hashtable-有什么区别" tabindex="-1"><a class="header-anchor" href="#hashmap-和-hashtable-有什么区别" aria-hidden="true">#</a> HashMap 和 Hashtable 有什么区别</h2><p>HashMap 和 Hashtable 区别如下：</p><ul><li>Hashtable 使用了 synchronized 关键字来保障线程安全，而 HashMap 是非线程安全的；</li><li>HashMap 允许 K/V 都为 null，而 Hashtable K/V 都不允许 null；</li><li>HashMap 继承自 AbstractMap 类；而 Hashtable 继承自 Dictionary 类。</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><h2 id="有哪些方法可以解决哈希冲突" tabindex="-1"><a class="header-anchor" href="#有哪些方法可以解决哈希冲突" aria-hidden="true">#</a> 有哪些方法可以解决哈希冲突</h2><ul><li>开放定址法：当关键字的哈希地址 p=H（key）出现冲突时，以 p 为基础，产生另一个哈希地址 p1，如果 p1 仍然冲突，再以 p 为基础，产生另一个哈希地址 p2，循环此过程直到找出一个不冲突的哈希地址，将相应元素存入其中。</li><li>再哈希法：这种方法是同时构造多个不同的哈希函数，当哈希地址 Hi=RH1（key）发生冲突时，再计算 Hi=RH2（key），循环此过程直到找到一个不冲突的哈希地址，这种方法唯一的缺点就是增加了计算时间。</li><li>链地址法：这种方法的基本思想是将所有哈希地址为 i 的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第 i 个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。</li><li>建立公共溢出区：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表。</li></ul><h2 id="hashmap-的扩容为什么是-2-n" tabindex="-1"><a class="header-anchor" href="#hashmap-的扩容为什么是-2-n" aria-hidden="true">#</a> HashMap 的扩容为什么是 <code>2^n</code></h2><p>这样做的目的是为了让散列更加均匀，从而减少哈希碰撞，以提供代码的执行效率。</p><h2 id="有哈希冲突的情况下-hashmap-如何取值" tabindex="-1"><a class="header-anchor" href="#有哈希冲突的情况下-hashmap-如何取值" aria-hidden="true">#</a> 有哈希冲突的情况下 HashMap 如何取值</h2><p>如果有哈希冲突，HashMap 会循环链表中的每项 key 进行 equals 对比，返回对应的元素。相关源码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>\n        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 比对时还是先看 hash 值是否相同、再看地址或 equals</span>\n        <span class="token keyword">return</span> e<span class="token punctuation">;</span> <span class="token comment">// 如果当前节点 e 的键对象和 key 相同，那么返回 e</span>\n<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 看看是否还有下一个节点，如果有，继续下一轮比对，否则跳出循环</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="为什么重写-equals-时一定要重写-hashcode" tabindex="-1"><a class="header-anchor" href="#为什么重写-equals-时一定要重写-hashcode" aria-hidden="true">#</a> 为什么重写 equals() 时一定要重写 hashCode()</h2><p>因为 Java 规定，如果两个对象 equals 比较相等（结果为 true），那么调用 hashCode 也必须相等。如果重写了 equals() 但没有重写 hashCode()，就会与规定相违背</p>',33),c={},o=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("p",null,[(0,p.Lk)("a",t,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),e],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);