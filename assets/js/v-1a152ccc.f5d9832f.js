"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[8699],{10359:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-1a152ccc",path:"/javahelper/02%20fastjson.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/javahelper/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"依赖",slug:"依赖",children:[]},{level:2,title:"常用语法",slug:"常用语法",children:[{level:3,title:"普通对象",slug:"普通对象",children:[]},{level:3,title:"集合",slug:"集合",children:[]},{level:3,title:"TypeReference泛型处理❤️",slug:"typereference泛型处理❤️",children:[]},{level:3,title:"枚举❤️",slug:"枚举❤️",children:[]}]},{level:2,title:"Annotations❤️",slug:"annotations❤️",children:[{level:3,title:"@JSONField",slug:"jsonfield",children:[]},{level:3,title:"@JSONType",slug:"jsontype",children:[]}]},{level:2,title:"Feature",slug:"feature",children:[{level:3,title:"序列化常用",slug:"序列化常用",children:[]},{level:3,title:"常用配置😊😊",slug:"常用配置😊😊",children:[]}]},{level:2,title:"属性命名策略❤️",slug:"属性命名策略❤️",children:[]},{level:2,title:"mixin",slug:"mixin",children:[]},{level:2,title:"JSONPath❤️",slug:"jsonpath❤️",children:[{level:3,title:"支持语法",slug:"支持语法",children:[]},{level:3,title:"函数",slug:"函数",children:[]},{level:3,title:"聚合函数",slug:"聚合函数",children:[]},{level:3,title:"Filter Operators",slug:"filter-operators",children:[]},{level:3,title:"语法举例",slug:"语法举例",children:[]},{level:3,title:"使用",slug:"使用",children:[]}]}],filePathRelative:"javahelper/02 fastjson.md"}},60518:(n,s,a)=>{a.r(s),a.d(s,{default:()=>L});var t=a(20641);const p={href:"https://github.com/alibaba/fastjson2/wiki",target:"_blank",rel:"noopener noreferrer"},e={href:"https://github.com/alibaba/fastjson/wiki",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Lk)("code",null,"TypeReference",-1),c={href:"https://javadoc.io/doc/com.alibaba.fastjson2/fastjson2/latest/index.html",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Fv)('<p><code>FASTJSON 2</code>是一个性能极致并且简单易用的Java JSON库。</p><ul><li><code>FASTJSON 2</code>是<code>FASTJSON</code>项目的重要升级，和FASTJSON 1相比，性能有非常大的提升，解决了autoType功能因为兼容和白名单的安全性问题。</li><li>性能极致，性能远超过其他流行JSON库，包括jackson/gson/org.json</li></ul><p><img src="/images/javahelper/image-20230516124030558.png" alt="image-20230516124030558"></p><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>\n    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson2<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>\n    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>fastjson2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>\n    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.0</span><span class="token number">.32</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>与fastjson1兼容的版本：官网说-》如果原来使用<code>fastjson 1.2.x</code>版本，可以使用兼容包，兼容包不能保证100%兼容，请仔细测试验证，发现问题请及时反馈</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>\n    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>\n    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>\n    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.0</span><span class="token number">.32</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',7),u={class:"custom-container tip"},i=(0,t.Lk)("p",{class:"custom-container-title"},"TIP",-1),r={href:"https://github.com/Q10Viking/learncode/tree/main/javahelper/fastjson2-demo/src/main/java/org/hzz",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Fv)('<h2 id="常用语法" tabindex="-1"><a class="header-anchor" href="#常用语法" aria-hidden="true">#</a> 常用语法</h2><h3 id="普通对象" tabindex="-1"><a class="header-anchor" href="#普通对象" aria-hidden="true">#</a> 普通对象</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;Thinking in Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bruce Eckel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;author&quot;:&quot;Bruce Eckel&quot;,&quot;name&quot;:&quot;Thinking in Java&quot;}</span>\n    <span class="token class-name">Book</span> book1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// assertSame(book, book1); // 失败，报错</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> book1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token annotation punctuation">@NoArgsConstructor</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>注意属性为null，fastjson默认是不会输出这个json字段的</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_object2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Thinking in Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;name&quot;:&quot;Thinking in Java&quot;}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',5),d={href:"https://github.com/alibaba/fastjson2/wiki/Features_cn",target:"_blank",rel:"noopener noreferrer"},b=(0,t.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_object3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Thinking in Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>WriteNulls</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;author&quot;:null,&quot;name&quot;:&quot;Thinking in Java&quot;}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>null</code>在json中是合法的字段</p><p><img src="/images/javahelper/image-20230516225739888.png" alt="image-20230516225739888"></p><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_list_tojson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entity</span><span class="token punctuation">&gt;</span></span> entities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    entities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    entities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token string">&quot;hzz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>entities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{&quot;id&quot;:1,&quot;name&quot;:&quot;Q10Viking&quot;},{&quot;name&quot;:&quot;hzz&quot;}]</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_json_tolist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;[{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;Q10Viking\\&quot;},{\\&quot;name\\&quot;:\\&quot;hzz\\&quot;}]&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entity</span><span class="token punctuation">&gt;</span></span> entities <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Entity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// [Entity(id=1, name=Q10Viking, value=null), Entity(id=null, name=hzz, value=null)]</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>entities<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Object</span> value<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="typereference泛型处理❤️" tabindex="-1"><a class="header-anchor" href="#typereference泛型处理❤️" aria-hidden="true">#</a> TypeReference泛型处理❤️</h3>',6),m={href:"https://github.com/alibaba/fastjson/wiki/TypeReference",target:"_blank",rel:"noopener noreferrer"},g=(0,t.Fv)('<h4 id="单参数" tabindex="-1"><a class="header-anchor" href="#单参数" aria-hidden="true">#</a> 单参数</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>\n    <span class="token class-name">T</span> data<span class="token punctuation">;</span>\n    <span class="token class-name">Status</span> status<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span><span class="token class-name">Status</span> status<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> t<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">single_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 反序列化</span>\n    <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> result1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p>官方建议使用如下的方式，性能更高</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">single_test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 反序列化</span>\n    <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> result1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="多参数" tabindex="-1"><a class="header-anchor" href="#多参数" aria-hidden="true">#</a> 多参数</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiResult</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">T</span> data1<span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name">R</span> data2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Type</span> type2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MultiResult</span><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multi_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">MultiResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> multiResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiResult</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                                                          <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;hzz&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>multiResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;data1&quot;:[3,20],&quot;data2&quot;:[&quot;hzz&quot;,&quot;Q10Viking&quot;]}</span>\n    <span class="token comment">// 反序列化</span>\n    <span class="token class-name">MultiResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> multiResult1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>type2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>multiResult<span class="token punctuation">,</span> multiResult1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n     <span class="token keyword">public</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseToMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> json<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> \n                            <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseToMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> json<span class="token punctuation">,</span> \n                                            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> keyType<span class="token punctuation">,</span> \n                                            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> valueType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> \n                            <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>keyType<span class="token punctuation">,</span> valueType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 可以这样使用</span>\n<span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{1:{name:\\&quot;ddd\\&quot;},2:{name:\\&quot;zzz\\&quot;}}&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Model</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token function">parseToMap</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Model</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;ddd&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;zzz&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="枚举❤️" tabindex="-1"><a class="header-anchor" href="#枚举❤️" aria-hidden="true">#</a> 枚举❤️</h3><p>fastjson在序列化枚举类型的时候，会使用枚举字面常量。比如</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;data&quot;</span><span class="token operator">:</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;status&quot;</span><span class="token operator">:</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>但是我们期望的是具体的值，比如</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;data&quot;</span><span class="token operator">:</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h4>',15),v={href:"https://github.com/alibaba/fastjson2/issues/1449",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/alibaba/fastjson2/releases/tag/2.0.32",target:"_blank",rel:"noopener noreferrer"},h={href:"https://segmentfault.com/a/1190000039984173",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Lk)("p",null,"这里我们使用fastjson2,ObjectWriter替换了ObjectSerializer，但是兼容版本还保留着ObjectSerializer",-1),w={href:"https://github.com/Q10Viking/learncode/tree/main/javahelper/fastjson2-demo/src/main/java/org/hzz/enumm",target:"_blank",rel:"noopener noreferrer"},j=(0,t.Fv)('<blockquote><p>定义一个枚举类型，然后实现一个接口，方便我们接下来实现的ObjectWriter和ObjectReader通用。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">Status</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">HttpStatus</span> <span class="token keyword">implements</span> <span class="token class-name">Status</span><span class="token punctuation">{</span>\n    <span class="token function">OK</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">BAD_REQUEST</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">&quot;Bad Request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">NOT_FOUND</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span><span class="token string">&quot;Not Found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><blockquote><p>序列化与反序列化实现</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson2<span class="token punctuation">.</span></span><span class="token class-name">JSONReader</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson2<span class="token punctuation">.</span>reader<span class="token punctuation">.</span></span><span class="token class-name">ObjectReader</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Type</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatusEnumReader</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectReader</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * 读取json中的status字段，转换为枚举类型\n     * <span class="token keyword">@param</span> <span class="token parameter">jsonReader</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">fieldType</span> 比如：class org.hzz.enumm.HttpStatus\n     * <span class="token keyword">@param</span> <span class="token parameter">fieldName</span> 比如：status\n     * <span class="token keyword">@param</span> <span class="token parameter">features</span> 一个标识位 6755399441055744\n     * <span class="token keyword">@return</span>\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">JSONReader</span> jsonReader<span class="token punctuation">,</span> <span class="token class-name">Type</span> fieldType<span class="token punctuation">,</span> <span class="token class-name">Object</span> fieldName<span class="token punctuation">,</span> <span class="token keyword">long</span> features<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 读取json中的status字段，转换为枚举类型</span>\n        <span class="token class-name">Integer</span> code <span class="token operator">=</span> jsonReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 从class转变为枚举类型</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldType <span class="token keyword">instanceof</span> <span class="token class-name">Class</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> fieldType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> fieldType<span class="token punctuation">;</span>\n            <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> enums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">:</span> enums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Status</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">)</span> e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatusEnumWriter</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectWriter</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">JSONWriter</span> jsonWriter<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Object</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Type</span> fieldType<span class="token punctuation">,</span> <span class="token keyword">long</span> features<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>object <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> jsonWriter<span class="token punctuation">.</span><span class="token function">writeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Status</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            jsonWriter<span class="token punctuation">.</span><span class="token function">writeInt32</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">)</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;not support type&quot;</span><span class="token operator">+</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>使用</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">{</span>\n    <span class="token class-name">T</span> data<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serializeUsing <span class="token operator">=</span> <span class="token class-name">StatusEnumWriter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n               deserializeUsing <span class="token operator">=</span> <span class="token class-name">StatusEnumReader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token class-name">HttpStatus</span> status<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>测试</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_enum_writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;data&quot;:&quot;hello&quot;,&quot;status&quot;:200}</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_enum_reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;data\\&quot;:\\&quot;hello\\&quot;,\\&quot;status\\&quot;:200}&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// R(data=hello, status=OK)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="annotations❤️" tabindex="-1"><a class="header-anchor" href="#annotations❤️" aria-hidden="true">#</a> Annotations❤️</h2>',10),q={href:"https://github.com/alibaba/fastjson2/wiki/fastjson2_annotations#11-%E5%AE%9A%E5%88%B6%E5%90%8D%E5%AD%97%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},S=(0,t.Fv)('<h3 id="jsonfield" tabindex="-1"><a class="header-anchor" href="#jsonfield" aria-hidden="true">#</a> @JSONField</h3><blockquote><p>重命名</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 配置在属性上</span>\n<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n\n<span class="token comment">// 配置在getter/setter上</span>\n<span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>忽略字段</p><p>可以通过JSONField.serialize配置该字段是否要序列化，通过JSONField.deserialize配置该字段是否需要反序列化</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>deserialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>配置字段的序列化输出的的顺序</p><p>可以通过JSONField.ordinal来配置序列化输出的顺序</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> templateId<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="jsontype" tabindex="-1"><a class="header-anchor" href="#jsontype" aria-hidden="true">#</a> @JSONType</h3><p>可以配置改类型的所有字段的NamingStrategy、序列化和反序列化忽略的字段、JSONReader/JSONWriter的Features等</p><blockquote><p>序列化和反序列化忽略的字段</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@JSONType</span><span class="token punctuation">(</span>ignores <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;id2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;id3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">101</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">102</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">103</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="feature" tabindex="-1"><a class="header-anchor" href="#feature" aria-hidden="true">#</a> Feature</h2><p><strong>可以全局配置</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>WriteNulls</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>也可以局部配置，在具体的类上,但是我在测试的时候，只有驼峰生效了，feature并没有生效。所以<strong>推荐使用全局配置</strong>也方便前端做统一</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@JSONType</span><span class="token punctuation">(</span>\n    naming <span class="token operator">=</span> <span class="token class-name">PropertyNamingStrategy<span class="token punctuation">.</span>SnakeCase</span><span class="token punctuation">,</span> <span class="token comment">// 驼峰转下划线</span>\n    serializeFeatures <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>NullAsDefaultValue</span><span class="token punctuation">,</span>\n        <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>PrettyFormat</span><span class="token punctuation">,</span>\n        <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>UseSingleQuotes</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',16),O={href:"https://github.com/alibaba/fastjson2/wiki/Features_cn",target:"_blank",rel:"noopener noreferrer"},N=(0,t.Fv)('<p>在fastjson 2.x中，有两个Feature，分别用来配置序列化和反序列化的行为。</p><ul><li>JSONWriter.Feature 配置序列化的行为</li><li>JSONReader.Feature 配置反序列化的行为</li></ul><h3 id="序列化常用" tabindex="-1"><a class="header-anchor" href="#序列化常用" aria-hidden="true">#</a> 序列化常用</h3><table><thead><tr><th>JSONWriter.Feature</th><th>介绍</th></tr></thead><tbody><tr><td>WriteNulls</td><td>序列化输出空值字段</td></tr><tr><td>NullAsDefaultValue</td><td>将空置输出为缺省值，Number类型的null都输出为0，String类型的null输出为&quot;&quot;，数组和Collection类型的输出为[]</td></tr><tr><td>WriteBooleanAsNumber</td><td>将true输出为1，false输出为0</td></tr><tr><td>PrettyFormat</td><td>格式化输出</td></tr><tr><td>UseSingleQuotes</td><td>使用单引号（但是注意字段key单引号不符合规范）如会生成这样子<code>{&#39;pass_word&#39;:&#39;123456&#39;}</code> 所以不建议使用这个，使用默认的双引号就好</td></tr><tr><td>BrowserCompatible</td><td>在大范围超过JavaScript支持的整数，输出为字符串格式</td></tr><tr><td>WriteBigDecimalAsPlain</td><td>序列化BigDecimal使用toPlainString，避免科学计数法</td></tr></tbody></table><blockquote><p>BrowserCompatible 在大范围超过JavaScript支持的整数，输出为字符串格式。因为前端会将大整形处理成精度丢失</p><p>还提供了一个类WriteLongAsString。文档中却没有写</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token number">1220708537638920191</span>\n<span class="token number">1220708537638920200</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="/images/springboot/format,png" alt="img"></p><blockquote><p>最好用String来处理</p></blockquote><hr><table><thead><tr><th>JSONReader.Feature</th><th>介绍</th></tr></thead><tbody><tr><td>SupportSmartMatch</td><td>❤️默认下是camel case精确匹配，打开这个后，能够智能识别<code>camel/upper/pascal/snake/Kebab</code>五中case</td></tr><tr><td>IgnoreSetNullValue</td><td>忽略输入为null的字段</td></tr><tr><td>InitStringFieldAsEmpty</td><td>初始化String字段为空字符串&quot;&quot;</td></tr></tbody></table><h3 id="常用配置😊😊" tabindex="-1"><a class="header-anchor" href="#常用配置😊😊" aria-hidden="true">#</a> 常用配置😊😊</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>通过全局配置进行试验</p></div><blockquote><p>序列化</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>\n<span class="token annotation punctuation">@Setter</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>ordinal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n    <span class="token comment">// 不会转驼峰，优先级更高</span>\n    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;authorAlias&quot;</span><span class="token punctuation">,</span> ordinal <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Double</span> price<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> subGoods<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//配置</span>\n    <span class="token comment">// 使用下划线命名法</span>\n    <span class="token class-name">ObjectWriterProvider</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectWriterProvider</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategy<span class="token punctuation">.</span>SnakeCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 配置feature</span>\n    <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Context</span><span class="token punctuation">(</span>provider<span class="token punctuation">,</span>\n                                                        <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>NullAsDefaultValue</span><span class="token punctuation">,</span>\n                                                        <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>PrettyFormat</span>\n                                                       <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    goods<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Java编程思想&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    goods<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    goods<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">&quot;Bruce Eckel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>goods<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n     * <span class="token punctuation">{</span>\n     * \t&quot;sub_goods&quot;:[],\n     * \t&quot;name&quot;:&quot;Java编程思想&quot;,\n     * \t&quot;authorAlias&quot;:&quot;Bruce Eckel&quot;\n     * <span class="token punctuation">}</span>\n     */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><blockquote><p>反序列化</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_context2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 配置feature</span>\n    <span class="token class-name">JSONReader<span class="token punctuation">.</span>Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONReader<span class="token punctuation">.</span>Context</span><span class="token punctuation">(</span>\n        <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>SupportSmartMatch</span><span class="token punctuation">,</span> <span class="token comment">// 自动匹配snake, camel等</span>\n        <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>IgnoreSetNullValue</span><span class="token punctuation">,</span>\n        <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>InitStringFieldAsEmpty</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;sub_goods\\&quot;:[],\\&quot;name\\&quot;:\\&quot;Java编程思想\\&quot;,\\&quot;authorAlias\\&quot;:\\&quot;Bruce Eckel\\&quot;}&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Goods</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Goods(name=Java编程思想, author=Bruce Eckel, price=null, subGoods=[])</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如果没有sub_goods,则为null</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;Java编程思想\\&quot;,\\&quot;authorAlias\\&quot;:\\&quot;Bruce Eckel\\&quot;}&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// Goods(name=Java编程思想, author=Bruce Eckel, price=null, subGoods=null)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="属性命名策略❤️" tabindex="-1"><a class="header-anchor" href="#属性命名策略❤️" aria-hidden="true">#</a> 属性命名策略❤️</h2>',19),J={href:"https://github.com/alibaba/fastjson/wiki/PropertyNamingStrategy_cn",target:"_blank",rel:"noopener noreferrer"},x=(0,t.Fv)('<p>常用</p><ul><li>驼峰转下划线PropertyNamingStrategy.SnakeCase</li><li>下划线转驼峰PropertyNamingStrategy.PascalCase</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>SnakeCase: 所有字母都是小写并以下划线分隔，如number_of_donuts\nKebabCase：和Snake很像只不过分隔符不同：如 number-of-donuts\nCamelCase：java常用的驼峰形式：如 numberOfDonuts\nPascalCase：与CamelCase很像，只不过首字母大写，如: NumberOfDonuts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> passWord<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_camel_to_snakeCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//配置</span>\n    <span class="token comment">// 使用下划线命名法</span>\n    <span class="token class-name">ObjectWriterProvider</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectWriterProvider</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategy<span class="token punctuation">.</span>SnakeCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 配置feature</span>\n    <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Context</span><span class="token punctuation">(</span>provider<span class="token punctuation">,</span> <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>PrettyFormat</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n     * <span class="token punctuation">{</span>\n     * \t&quot;pass_word&quot;:&quot;123456&quot;,\n     * \t&quot;user_name&quot;:&quot;Q10Viking&quot;\n     * <span class="token punctuation">}</span>\n     */</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_snake_to_camel_case</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 配置feature</span>\n    <span class="token class-name">JSONReader<span class="token punctuation">.</span>Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONReader<span class="token punctuation">.</span>Context</span><span class="token punctuation">(</span>\n        <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>SupportSmartMatch</span><span class="token punctuation">,</span> <span class="token comment">// 自动匹配snake, camel等</span>\n        <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>IgnoreSetNullValue</span><span class="token punctuation">,</span>\n        <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>InitStringFieldAsEmpty</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;pass_word\\&quot;:\\&quot;123456\\&quot;,\\&quot;user_name\\&quot;:\\&quot;Q10Viking\\&quot;}&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User(userName=Q10Viking, passWord=123456)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin" aria-hidden="true">#</a> mixin</h2>',5),F={href:"https://github.com/alibaba/fastjson2/blob/main/docs/mixin_cn.md",target:"_blank",rel:"noopener noreferrer"},T=(0,t.Lk)("h2",{id:"jsonpath❤️",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#jsonpath❤️","aria-hidden":"true"},"#"),(0,t.eW)(" JSONPath❤️")],-1),E={href:"https://github.com/alibaba/fastjson2/blob/main/docs/jsonpath_cn.md",target:"_blank",rel:"noopener noreferrer"},_=(0,t.Fv)('<ul><li>在FASTJSON2中，JSONPath是一等公民，支持<strong>通过JSONPath在不完整解析JSON Document的情况下，根据JSONPath读取内容</strong></li><li>也支持用JSONPath对JavaBean求值，可以在Java框架中当做对象查询语言（OQL）来使用</li></ul><h3 id="支持语法" tabindex="-1"><a class="header-anchor" href="#支持语法" aria-hidden="true">#</a> 支持语法</h3><table><thead><tr><th>JSONPATH</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>根对象，例如$.name</td></tr><tr><td>[num]</td><td>数组访问，其中num是数字，可以是负数。例如$[0].leader.departments[-1].name</td></tr><tr><td>[num0,num1,num2...]</td><td>数组多个元素访问，其中num是数字，可以是负数，返回数组中的多个元素。例如$[0,3,-2,5]</td></tr><tr><td>[start:end]</td><td>数组范围访问，其中start和end是开始小表和结束下标，可以是负数，返回数组中的多个元素。例如$[0:5]</td></tr><tr><td>[start:end :step]</td><td>数组范围访问，其中start和end是开始小表和结束下标，可以是负数；step是步长，返回数组中的多个元素。例如$[0:5:2]</td></tr><tr><td>[?(@.key)]</td><td>对象属性非空过滤，例如$.departs[?(@.name)]</td></tr><tr><td>[?(@.key &gt; 123)]</td><td>数值类型对象属性比较过滤，例如$.departs[id &gt;= 123]，比较操作符支持=,!=,&gt;,&gt;=,&lt;,&lt;=</td></tr><tr><td>[?(@.key = &#39;123&#39;)]</td><td>字符串类型对象属性比较过滤，例如$.departs[?(@..name = &#39;123&#39;)]，比较操作符支持=,!=,&gt;,&gt;=,&lt;,&lt;=</td></tr><tr><td>[?(@.key like &#39;aa%&#39;)]</td><td>字符串类型like过滤， 例如$.departs[?(@..name like &#39;sz*&#39;)]，通配符只支持%支持not like</td></tr><tr><td>[?(@.key rlike &#39;regexpr&#39;)]</td><td>字符串类型正则匹配过滤，</td></tr><tr><td>[?(@.key in (&#39;v0&#39;, &#39;v1&#39;))]</td><td>IN过滤, 支持字符串和数值类型 例如: $.departs[?(@.name in (&#39;wenshao&#39;,&#39;Yako&#39;))] $.departs[id not in (101,102)]</td></tr><tr><td>[?(@.key between 234 and 456)]</td><td>BETWEEN过滤, 支持数值类型，支持not between 例如: $.departs[?(@.id between 101 and 201)] <br> $.departs[?(@.id not between 101 and 201)]</td></tr><tr><td>length() 或者 size()</td><td>数组长度。例如$.values.size() 支持类型java.util.Map和java.util.Collection和数组</td></tr><tr><td>keySet()</td><td>获取Map的keySet或者对象的非空属性名称。例如$.val.keySet() 支持类型：Map和普通对象. 不支持：Collection和数组（返回null）</td></tr><tr><td>.</td><td>属性访问，例如$.name</td></tr><tr><td>..</td><td>deepScan属性访问，例如$..name</td></tr><tr><td>*</td><td>对象的所有属性，例如$.leader.*</td></tr><tr><td>[&#39;key&#39;]</td><td>属性访问。例如$[&#39;name&#39;]</td></tr><tr><td>[&#39;key0&#39;,&#39;key1&#39;]</td><td>多个属性访问。例如$[&#39;id&#39;,&#39;name&#39;]</td></tr></tbody></table><p>以下两种写法的语义是相同的：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>$<span class="token punctuation">.</span>store<span class="token punctuation">.</span>book<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>和</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>$<span class="token punctuation">[</span><span class="token char">&#39;store&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">&#39;book&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">&#39;title&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><table><thead><tr><th>Function</th><th>返回类型</th><th>Description</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>返回对象的类型</td></tr><tr><td>length/size</td><td>integer</td><td>返回集合或者字符串的长度</td></tr><tr><td>first</td><td>Any</td><td>集合中第一个元素</td></tr><tr><td>last</td><td>Any</td><td>集合中最后一个元素</td></tr><tr><td>keys / keySet</td><td>sequence</td><td>返回Map类型的KeySet</td></tr><tr><td>values</td><td>sequence</td><td>Map类型的Values</td></tr><tr><td>entries</td><td>sequence</td><td>Map类型的EntrySet</td></tr><tr><td>trim</td><td>string</td><td>对字符串做trim后返回</td></tr><tr><td>double</td><td>double</td><td>将目标类型转换为double类型</td></tr><tr><td>ceil</td><td>number</td><td>对数值类型做ceil处理返回</td></tr><tr><td>abs</td><td>number</td><td>返回对数值类型的绝对值</td></tr><tr><td>lower</td><td>string</td><td>将字符串转换小写</td></tr><tr><td>upper</td><td>string</td><td>将字符串转换成大写</td></tr><tr><td>index(x)</td><td>int</td><td>其中参数x支持数值和字符串</td></tr></tbody></table><h3 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h3><table><thead><tr><th>Function</th><th>返回类型</th><th>Description</th></tr></thead><tbody><tr><td>min</td><td></td><td></td></tr><tr><td>max</td><td></td><td></td></tr><tr><td>first</td><td></td><td>返回集合中的第一个元素</td></tr><tr><td>last</td><td></td><td>返回集合中的最后一个个元素</td></tr><tr><td>avg</td><td>double</td><td></td></tr></tbody></table><h3 id="filter-operators" tabindex="-1"><a class="header-anchor" href="#filter-operators" aria-hidden="true">#</a> Filter Operators</h3><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td>=</td><td>相等</td></tr><tr><td>!= or &lt;&gt;</td><td>不等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>~=</td><td></td></tr><tr><td>like</td><td>类似SQL中LIKE语法</td></tr><tr><td>not like</td><td></td></tr><tr><td>rlike</td><td></td></tr><tr><td>not rlike</td><td></td></tr><tr><td>in</td><td></td></tr><tr><td>not in</td><td></td></tr><tr><td>between</td><td></td></tr><tr><td>not between</td><td></td></tr><tr><td>starts_with</td><td></td></tr><tr><td>not starts_with</td><td></td></tr><tr><td>ends_with</td><td></td></tr><tr><td>not ends_with</td><td></td></tr><tr><td>contains</td><td></td></tr><tr><td>not contains</td><td></td></tr></tbody></table><h3 id="语法举例" tabindex="-1"><a class="header-anchor" href="#语法举例" aria-hidden="true">#</a> 语法举例</h3><table><thead><tr><th>JSONPath</th><th>语义</th></tr></thead><tbody><tr><td>$</td><td>根对象</td></tr><tr><td>$[-1]</td><td>最后元素</td></tr><tr><td>$[:-2]</td><td>第1个至倒数第2个</td></tr><tr><td>$[1:]</td><td>第2个之后所有元素</td></tr><tr><td>$[1,2,3]</td><td>集合中1,2,3个元素</td></tr></tbody></table><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><blockquote><p>重点是<code>JSONPath.eval</code>执行表达式,它有两个方法，通过jsonpath表达式既能从java对象也能从json字符串获取数据</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Object</span> rootObject<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Object</span> value<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="简单对象" tabindex="-1"><a class="header-anchor" href="#简单对象" aria-hidden="true">#</a> 简单对象</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_jsonpath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Entity</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span><span class="token string">&quot;$.id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>\n    <span class="token function">assertSame</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">&quot;$.value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">&quot;$.value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// fastjson版本2中没有containsValue方法和size方法</span>\n    <span class="token comment">// fastjson版本1中有containsValue方法和size方法</span>\n\n    <span class="token comment">//assertTrue(JSONPath.containsValue(entity, &quot;$.id&quot;, 123));</span>\n    <span class="token comment">//assertTrue(JSONPath.containsValue(entity, &quot;$.value&quot;, entity.getValue()));</span>\n    <span class="token comment">//assertEquals(2, JSONPath.size(entity, &quot;$&quot;));</span>\n    <span class="token comment">//assertEquals(0, JSONPath.size(new Object[], &quot;$&quot;));</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="集合❤️" tabindex="-1"><a class="header-anchor" href="#集合❤️" aria-hidden="true">#</a> 集合❤️</h4><blockquote><p>读取集合所有元素的name</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read_list_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entity</span><span class="token punctuation">&gt;</span></span> entities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    entities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    entities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token string">&quot;hzz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token class-name">JSONPath</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>entities<span class="token punctuation">,</span> <span class="token string">&quot;$[*].name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Q10Viking, hzz]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>读取json的所有name</p></blockquote><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>@Test\npublic void readNameFromJsonList()<span class="token punctuation">{</span>\n    String json = <span class="token string">&quot;[{\\&quot;id\\&quot;:1,\\&quot;name\\&quot;:\\&quot;Q10Viking\\&quot;},{\\&quot;name\\&quot;:\\&quot;hzz\\&quot;}]&quot;</span>;\n    List&lt;String&gt; list = (List&lt;String&gt;)JSONPath.eval(json<span class="token punctuation">,</span> <span class="token string">&quot;$[*].name&quot;</span>);\nSystem.out.println(Arrays.toString(list.toArray())); <span class="token comment">// [Q10Viking, hzz]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',26),R={},L=(0,a(66262).A)(R,[["render",function(n,s){const a=(0,t.g2)("OutboundLink");return(0,t.uX)(),(0,t.CE)(t.FK,null,[(0,t.Lk)("p",null,[(0,t.Lk)("a",p,[(0,t.eW)("fastjson 2"),(0,t.bF)(a)]),(0,t.eW)("的wiki文档目前看还比较少，没有"),(0,t.Lk)("a",e,[(0,t.eW)("fastjson1 wike"),(0,t.bF)(a)]),(0,t.eW)("全面，比如"),o,(0,t.eW)("的介绍使用都没有")]),(0,t.Lk)("p",null,[(0,t.Lk)("a",c,[(0,t.eW)("fastjson2 2.0.32 javadoc (com.alibaba.fastjson2)"),(0,t.bF)(a)])]),l,(0,t.Lk)("div",u,[i,(0,t.Lk)("p",null,[(0,t.eW)("本次试验使用fastjson2的2.0.32版本,"),(0,t.Lk)("a",r,[(0,t.eW)("Source Code"),(0,t.bF)(a)])])]),k,(0,t.Lk)("p",null,[(0,t.eW)("那么前端如果需要这个字段，如何输出呢？使用"),(0,t.Lk)("a",d,[(0,t.eW)("Features_· alibaba/fastjson2 Wiki (github.com)"),(0,t.bF)(a)])]),b,(0,t.Lk)("p",null,[(0,t.Lk)("a",m,[(0,t.eW)("TypeReference · alibaba/fastjson Wiki (github.com)"),(0,t.bF)(a)])]),g,(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,[(0,t.eW)("使用serializeUsing，我在实验的时候，使用的是2.0.31版本，这个版本没有ObjectSerializer接口["),(0,t.Lk)("a",v,[(0,t.eW)("QUESTION]fastjson2 的 serializeUsing属性 不再支持了？ · Issue #1449 · alibaba/fastjson2 (github.com)"),(0,t.bF)(a)])])]),(0,t.Lk)("p",null,[(0,t.eW)("然后11小时之前，发布了2.0.32版本，其中修复了这个问题。"),(0,t.Lk)("a",y,[(0,t.eW)("Release fastjson 2.0.32发布 · alibaba/fastjson2 (github.com)"),(0,t.bF)(a)])]),(0,t.Lk)("p",null,[(0,t.eW)("版本1的ObjectSerializer使用，参考"),(0,t.Lk)("a",h,[(0,t.eW)("Fastjson处理枚举 - 个人文章 - SegmentFault 思否"),(0,t.bF)(a)])]),f,(0,t.Lk)("p",null,[(0,t.Lk)("a",w,[(0,t.eW)("Source Code"),(0,t.bF)(a)])]),j,(0,t.Lk)("p",null,[(0,t.Lk)("a",q,[(0,t.eW)("fastjson2_annotations · alibaba/fastjson2 Wiki (github.com)"),(0,t.bF)(a)])]),S,(0,t.Lk)("p",null,[(0,t.Lk)("a",O,[(0,t.eW)("Features_cn · alibaba/fastjson2 Wiki (github.com)"),(0,t.bF)(a)])]),N,(0,t.Lk)("p",null,[(0,t.Lk)("a",J,[(0,t.eW)("PropertyNamingStrategy_cn · alibaba/fastjson Wiki (github.com)"),(0,t.bF)(a)])]),x,(0,t.Lk)("p",null,[(0,t.Lk)("a",F,[(0,t.eW)("fastjson2/mixin_cn.md at main · alibaba/fastjson2 · GitHub"),(0,t.bF)(a)])]),T,(0,t.Lk)("p",null,[(0,t.Lk)("a",E,[(0,t.eW)("fastjson2/jsonpath_cn.md at main · alibaba/fastjson2 · GitHub"),(0,t.bF)(a)])]),_],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);