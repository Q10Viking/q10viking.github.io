"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[61133],{80786:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-45c5dc8c",path:"/Algorithm/739%20%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Algorithm/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"单调栈",slug:"单调栈",children:[]}],filePathRelative:"Algorithm/739 每日温度.md"}},95322:(n,a,s)=>{s.r(a),s.d(a,{default:()=>r});var p=s(20641);const t={class:"custom-container tip"},e=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),o={href:"https://leetcode.cn/problems/daily-temperatures/",target:"_blank",rel:"noopener noreferrer"},c={href:"https://github.com/Q10Viking/learncode/blob/main/algorithm/src/main/java/org/hzz/stack/DailyTemperatures_739.java",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Fv)('<h2 id="单调栈" tabindex="-1"><a class="header-anchor" href="#单调栈" aria-hidden="true">#</a> 单调栈</h2><p>可以维护一个存储下标的<strong>单调栈</strong>，从栈底到栈顶的下标对应的温度依次递减，也就是栈底的温度最高，栈顶的温度最低。如果一个下标在单调栈里，则表示尚未找到下一次温度更高的下标。</p><p>在遍历原始数组的过程中，对于当前元素，如果栈为空，则直接将下标进栈，如果栈不为空，<strong>就需要比较栈顶元素的温度和当前元素的温度，如果当前元素温度大于栈顶元素温度，为了保证从栈底到栈顶的温度依次递减这个原则，将栈顶元素依次移除</strong>，计算栈顶元素的等待天数，重复上述操作直到栈为空或者栈顶元素温度大于当前温度，然后将当前元素入栈。</p><p>很明显，时间复杂度：O(n)，遍历数组一遍，其中每个元素最多有一次进栈和出栈的操作。空间复杂度：O(n)。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DailyTemperatures_739</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temperatures<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>temperatures<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储的是下标</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temperatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 注意是while不是if，因为维护单调栈</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// 开始记录</span>\n                <span class="token class-name">Integer</span> targetIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                res<span class="token punctuation">[</span>targetIndex<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> targetIndex<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><img src="/images/algorithm/image-20220816180515921.png" alt="image-20220816180515921"></p><p><img src="/images/algorithm/image-20220816180527259.png" alt="image-20220816180527259"></p><p><img src="/images/algorithm/image-20220816180538668.png" alt="image-20220816180538668"></p><p><img src="/images/algorithm/image-20220816180547728.png" alt="image-20220816180547728"></p><p><img src="/images/algorithm/image-20220816180600045.png" alt="image-20220816180600045"></p><p><img src="/images/algorithm/image-20220816180609309.png" alt="image-20220816180609309"></p><p><img src="/images/algorithm/image-20220816180620397.png" alt="image-20220816180620397"></p><p><img src="/images/algorithm/image-20220816180628789.png" alt="image-20220816180628789"></p><p><img src="/images/algorithm/image-20220816180639773.png" alt="image-20220816180639773"></p><p><img src="/images/algorithm/image-20220816180649689.png" alt="image-20220816180649689"></p><p><img src="/images/algorithm/image-20220816180659941.png" alt="image-20220816180659941"></p><p><img src="/images/algorithm/image-20220816180707880.png" alt="image-20220816180707880"></p><p><img src="/images/algorithm/image-20220816180716950.png" alt="image-20220816180716950"></p>',18),i={},r=(0,s(66262).A)(i,[["render",function(n,a){const s=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",t,[e,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("739. 每日温度 - 力扣（LeetCode）"),(0,p.bF)(s)])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",c,[(0,p.eW)("Source Code DailyTemperatures_739.java"),(0,p.bF)(s)])])]),l],64)}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,p]of a)s[n]=p;return s}}}]);