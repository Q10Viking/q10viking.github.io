"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[22128],{72490:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-411c03cc",path:"/MySQL/43%20%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%BC%9A%E9%81%87%E5%88%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"主键不连续问题测试",slug:"主键不连续问题测试",children:[{level:3,title:"数据准备",slug:"数据准备",children:[]},{level:3,title:"自增值存储机制",slug:"自增值存储机制",children:[]},{level:3,title:"自增值修改机制",slug:"自增值修改机制",children:[]},{level:3,title:"自增值修改流程",slug:"自增值修改流程",children:[]},{level:3,title:"导致自增值不连续的原因",slug:"导致自增值不连续的原因",children:[]}]}],filePathRelative:"MySQL/43 主键自增会遇到什么问题.md"}},1306:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(20641).Fv)('<ol><li><p>**插入性能问题：**对于非常高并发的插入操作，自增主键可能会成为性能瓶颈。因为每次插入新记录时，都需要获取一个新的自增ID，这个操作是串行的，无法并发执行。</p></li><li><p>**主键耗尽：**如果表的记录非常多，可能会出现自增主键耗尽的情况。尤其是对于定义为整型的自增主键，如果插入的记录数超过了整型的最大值，就无法再插入新的记录。</p></li><li><p>**分布式系统问题：**在分布式系统中，如果多个数据库节点都需要生成自增主键，就需要保证生成的主键在全局是唯一的。这通常需要引入额外的机制或工具，比如分布式ID生成器。</p></li></ol><h2 id="主键不连续问题测试" tabindex="-1"><a class="header-anchor" href="#主键不连续问题测试" aria-hidden="true">#</a> 主键不连续问题测试</h2><p>自增主键的特点是当表中每新增一条记录时，主键值会根据自增步长自动叠加，通常会将自增步长设置1，也就是说自增主键值是连续的。那么MySQL自增主键值一定会连续吗？今天这篇文章就来说说这个问题，看看什么情况下自增主键会出现不连续？</p><h3 id="数据准备" tabindex="-1"><a class="header-anchor" href="#数据准备" aria-hidden="true">#</a> 数据准备</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">TABLE</span> increnment_test<span class="token punctuation">;</span>\n<span class="token comment">-- 创建包含自增主键的表  </span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> increnment_test <span class="token punctuation">(</span>  \n  id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  \n  col1 <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  col2 <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  col3 <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>col1<span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="自增值存储机制" tabindex="-1"><a class="header-anchor" href="#自增值存储机制" aria-hidden="true">#</a> 自增值存储机制</h3><p>.MyISAM 引擎的自增值保存在数据文件中。 2.Innodb 引擎</p><ul><li><p>在 MySQL 5.7 及之前的版本，自增值保存在内存里。每次重启后，第一次打开表的时候，都会去找自增值的最大值 max(id)，然后将 max(id) + 1 作为这个表当前的自增值。</p></li><li><p>在 MySQL 8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。</p></li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token number">1.</span>往increnment_test表中插入<span class="token number">2</span>条数据\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> increnment_test <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>    \n    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    \n    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token number">2.</span>此时id值为<span class="token number">2</span>，<span class="token keyword">AUTO_INCREMENT</span>值为<span class="token number">3</span>。我们删除id为<span class="token number">2</span>的记录\n<span class="token keyword">delete</span> <span class="token keyword">from</span> increnment_test <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token number">3.</span>立马重启实例，重新插入记录。此时id为<span class="token number">2</span>。\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> increnment_test <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>    \n\t\t<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token number">4.</span>不重启实例，删除id为<span class="token number">2</span>的记录后，重新插入数据，id应为<span class="token number">3</span>。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="自增值修改机制" tabindex="-1"><a class="header-anchor" href="#自增值修改机制" aria-hidden="true">#</a> 自增值修改机制</h3><p>在MySQL中，可以使用AUTO_INCREMENT关键字来指定ID字段为自增ID字段。当向表中插入一条记录时，MySQL将自动为该记录的ID字段生成一个新的自增ID值，并将该值保存到该记录的ID字段中。具体规则如下：</p><ul><li><p>如果ID字段未指定具体的值，则将当前AUTO_INCREMENT值并将其填入自增字段，并生成新的自增值</p></li><li><p>如果ID字段已指定具体的值，则直接使用指定的值作为 ID 字段的值，而不会生成新的 AUTO_INCREMENT 值。</p></li></ul><p>根据要插入的值和当前自增值的大小关系，自增值的变更结果也会有所不同。</p><ul><li><p>如果插入值小于当前自增值，那么直接使用插入值填入ID字段，自增值不变；</p></li><li><p>如果插入值大于当前自增值，那么除了直接使用插入值填入ID字段外，自增值需修改为插入值+1；</p></li></ul><p>上述”插入值+1‘不是直接使用”插入值“+1，是auto_increment_offset（自增初始值）以 auto_increment_increment（自增步长）为步长，持续累加，直到找到大于插入值的值，作为新的自增值。</p><h3 id="自增值修改流程" tabindex="-1"><a class="header-anchor" href="#自增值修改流程" aria-hidden="true">#</a> 自增值修改流程</h3><p>上述我们了解了自增值的存储机制与修改机制，自增值修改是在哪个环境呢？那需要了解自增值修改流程。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> increnment_test <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">)</span> \n <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以上述SQL为例，我们假如数据库里已经有2条数据了，它的执行流程如下：</p><ul><li><p>执行器调用 InnoDB 引擎接口将分析器优化后的SQL传入，并将值(3,3,3)一起传过去。</p></li><li><p>InnoDB 发现用户没有指定自增 id列，会先获取表increnment_test当前的自增值3；</p></li><li><p>将ID列补充完整，并且将自增值填入(3,3,3,3)</p></li><li><p>然后将表的自增值改成4；</p></li><li><p>继续执行插入数据操作；</p></li></ul><p>自增字段值的生成是由存储引擎自动完成的，而不是由优化器完成的。因此，在执行 SQL 语句时，即使未指定自增字段列，也不会对性能产生任何影响。</p><h3 id="导致自增值不连续的原因" tabindex="-1"><a class="header-anchor" href="#导致自增值不连续的原因" aria-hidden="true">#</a> 导致自增值不连续的原因</h3><h4 id="唯一键冲突" tabindex="-1"><a class="header-anchor" href="#唯一键冲突" aria-hidden="true">#</a> 唯一键冲突</h4><p>比如increnment_test中已经存在了col1为3的记录，我们继续插入col1为3的记录，此时会出现唯一键冲突插入报错，但是没有将自增值再改回去。重新插入col1为4的值，此时对应的id为5；</p><h5 id="检查数据" tabindex="-1"><a class="header-anchor" href="#检查数据" aria-hidden="true">#</a> 检查数据</h5><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> increnment_test<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20240320213351716.png" alt="image-20240320213351716"></p><h5 id="插入col1为3的数据" tabindex="-1"><a class="header-anchor" href="#插入col1为3的数据" aria-hidden="true">#</a> 插入col1为3的数据</h5><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> increnment_test <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>    \n\t\t<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="插入col1为4的记录" tabindex="-1"><a class="header-anchor" href="#插入col1为4的记录" aria-hidden="true">#</a> 插入col1为4的记录</h5><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> increnment_test <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>    \n\t\t<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> increnment_test<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="/images/MySQL/image-20240320213512693.png" alt="image-20240320213512693"></p><h4 id="事务回滚" tabindex="-1"><a class="header-anchor" href="#事务回滚" aria-hidden="true">#</a> 事务回滚</h4><p>开启一个事务插入col1为6的数据，然后进行回滚。回滚后重新插入col1为6的记录，此时col1为6对应的id值为7。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>    \n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> increnment_test <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>      \n    <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span> \n\n<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>    \n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> increnment_test <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>      \n    <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="/images/MySQL/image-20240320213618260.png" alt="image-20240320213618260"></p><h4 id="批量插入数据" tabindex="-1"><a class="header-anchor" href="#批量插入数据" aria-hidden="true">#</a> 批量插入数据</h4><p>对于批量插入数据的语句，MySQL有一个批量申请自增 id 的策略：</p><ul><li><p>SQL语句执行过程中，第1次申请自增 id，会分配 1 个；</p></li><li><p>1 个用完以后，第2次申请自增 id，会分配 2 个；</p></li><li><p>2 个用完以后，第3次申请自增 id，会分配 4 个；</p></li></ul><p>依此类推，同一个语句去申请自增 id，每次申请到的自增id个数都是上一次的两倍</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> increnment_test2<span class="token punctuation">;</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> increnment_test2 <span class="token operator">like</span> increnment_test<span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> increnment_test2 <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">)</span> <span class="token keyword">SELECT</span>\n  col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3 <span class="token keyword">FROM</span> increnment_test<span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> increnment_test2 <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">)</span>\n<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> increnment_test2<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="/images/MySQL/image-20240320213922216.png" alt="image-20240320213922216"></p><p>因为increnment_test2表中批量插入了5条数据，按照自增ID的批量申请策略，5条数据分3次进行申请： 第1次：id-1 第2次：id-2、3 第3次：id-4、5、6、7 由于只有5条记录，所以只使用了4、5被浪费了。当我们在次插入数据时，AUTO_INCREMENT从8开始</p>',43),e={},t=(0,a(66262).A)(e,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);