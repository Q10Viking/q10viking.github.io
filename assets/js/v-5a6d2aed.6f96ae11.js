"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[75776],{80723:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5a6d2aed",path:"/JVM/20%20JDK%E5%B7%A5%E5%85%B7.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/JVM/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"jps",slug:"jps",children:[]},{level:2,title:"Jmap",slug:"jmap",children:[{level:3,title:"堆信息",slug:"堆信息",children:[]},{level:3,title:"堆内存dump",slug:"堆内存dump",children:[]}]},{level:2,title:"Jstack",slug:"jstack",children:[{level:3,title:"用jstack加进程id查找死锁",slug:"用jstack加进程id查找死锁",children:[]},{level:3,title:"jstack找出占用cpu最高的线程堆栈信息",slug:"jstack找出占用cpu最高的线程堆栈信息",children:[]}]},{level:2,title:"Jinfo",slug:"jinfo",children:[{level:3,title:"查看jvm的参数flags",slug:"查看jvm的参数flags",children:[]},{level:3,title:"查看java系统参数sysprops",slug:"查看java系统参数sysprops",children:[]}]},{level:2,title:"Jstat",slug:"jstat",children:[{level:3,title:"垃圾回收统计gc",slug:"垃圾回收统计gc",children:[]},{level:3,title:"堆内存统计",slug:"堆内存统计",children:[]},{level:3,title:"新生代垃圾回收统计",slug:"新生代垃圾回收统计",children:[]},{level:3,title:"新生代内存统计",slug:"新生代内存统计",children:[]},{level:3,title:"老年代垃圾回收统计",slug:"老年代垃圾回收统计",children:[]},{level:3,title:"老年代内存统计",slug:"老年代内存统计",children:[]},{level:3,title:"元数据空间统计",slug:"元数据空间统计",children:[]}]},{level:2,title:"JVM运行情况预估",slug:"jvm运行情况预估",children:[{level:3,title:"年轻代对象增长的速率",slug:"年轻代对象增长的速率",children:[]},{level:3,title:"Young GC的触发频率和每次耗时",slug:"young-gc的触发频率和每次耗时",children:[]},{level:3,title:"每次Young GC后有多少对象存活和进入老年代",slug:"每次young-gc后有多少对象存活和进入老年代",children:[]},{level:3,title:"Full GC的触发频率和每次耗时",slug:"full-gc的触发频率和每次耗时",children:[]}]},{level:2,title:"优化思路",slug:"优化思路",children:[]}],filePathRelative:"JVM/20 JDK工具.md"}},26951:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(20641).Fv)('<h2 id="jps" tabindex="-1"><a class="header-anchor" href="#jps" aria-hidden="true">#</a> jps</h2><p>列出Java进程</p><p><img src="/images/java/image-20210617212845210.png" alt="image-20210617212845210"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">kill</span> <span class="token parameter variable">-9</span> pid  <span class="token comment"># 结束进程</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><h2 id="jmap" tabindex="-1"><a class="header-anchor" href="#jmap" aria-hidden="true">#</a> Jmap</h2><p>用来查看内存信息，实例个数以及占用内存大小</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>jmap <span class="token parameter variable">-histo</span> <span class="token number">14660</span>  <span class="token comment">#查看历史生成的实例</span>\njmap <span class="token parameter variable">-histo:live</span> <span class="token number">14660</span>  <span class="token comment">#查看当前存活的实例，执行过程中可能会触发一次full gc</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="/images/java/96302.png" alt="img"></p><ul><li>num：序号</li><li>instances：实例数量</li><li>bytes：占用空间大小</li><li>class name：类名称，[C is a char[]，[S is a short[]，[I is a int[]，[B is a byte[]，[[I is a int[][]</li></ul><hr><h3 id="堆信息" tabindex="-1"><a class="header-anchor" href="#堆信息" aria-hidden="true">#</a> 堆信息</h3><p><img src="/images/java/96304.png" alt="img"></p><h3 id="堆内存dump" tabindex="-1"><a class="header-anchor" href="#堆内存dump" aria-hidden="true">#</a> 堆内存dump</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span>eureka.hprof <span class="token number">14660</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/java/96320.png" alt="img"></p><p>也可以设置内存溢出自动导出dump文件(内存很大的时候，可能会导不出来)</p><ol><li>-XX:+HeapDumpOnOutOfMemoryError</li><li>-XX:HeapDumpPath=./ （路径）</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// JVM设置</span>\n    <span class="token comment">// -Xms10M -Xmx10M -XX:+PrintGCDetails -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:\\jvm.dump</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><img src="/images/java/96300.png" alt="img"></p><hr><h2 id="jstack" tabindex="-1"><a class="header-anchor" href="#jstack" aria-hidden="true">#</a> <strong>Jstack</strong></h2><h3 id="用jstack加进程id查找死锁" tabindex="-1"><a class="header-anchor" href="#用jstack加进程id查找死锁" aria-hidden="true">#</a> 用jstack加进程id查找死锁</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// jstack jpid</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> lock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;thread1 begin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;thread1 end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;thread2 begin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;thread2 end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;main thread end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p><img src="/images/java/96306.png" alt="img"></p><ol><li><p>&quot;Thread-1&quot; 线程名</p></li><li><p>prio=5 优先级=5</p></li><li><p>tid=0x000000001fa9e000 线程id</p></li><li><p>nid=0x2d64 线程对应的本地线程标识nid</p></li><li><p>java.lang.Thread.State: BLOCKED 线程状态</p></li></ol><p><img src="/images/java/96308.png" alt="img"></p><p>还可以用jvisualvm自动检测死锁</p><p><img src="/images/java/96309.png" alt="img"></p><h3 id="jstack找出占用cpu最高的线程堆栈信息" tabindex="-1"><a class="header-anchor" href="#jstack找出占用cpu最高的线程堆栈信息" aria-hidden="true">#</a> <strong>jstack找出占用cpu最高的线程堆栈信息</strong></h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 运行此代码，cpu会飙高\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> initData <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//一个方法对应一块栈帧内存区域</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Math</span> math <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            math<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ol><li>使用命令top -p ，显示你的java进程的内存情况，pid是你的java进程号，比如19663</li></ol><p><img src="/images/java/96310.png" alt="img"></p><ol start="2"><li>按H，获取每个线程的内存情况</li></ol><p><img src="/images/java/96324.png" alt="img"></p><ol start="3"><li>找到内存和cpu占用最高的线程tid，比如19664</li><li>转为十六进制得到 0x4cd0，此为线程id的十六进制表示</li><li>执行 <code>jstack 19663 | grep -A 10 4cd0</code>，得到线程堆栈信息中 4cd0 这个线程所在行的后面10行，从堆栈中可以发现导致cpu飙高的调用方法</li></ol><p><img src="/images/java/96326.png" alt="img"></p><ol start="6"><li>查看对应的堆栈信息找出可能存在问题的代码</li></ol><hr><h2 id="jinfo" tabindex="-1"><a class="header-anchor" href="#jinfo" aria-hidden="true">#</a> <strong>Jinfo</strong></h2><p>查看正在运行的Java应用程序的扩展参数</p><h3 id="查看jvm的参数flags" tabindex="-1"><a class="header-anchor" href="#查看jvm的参数flags" aria-hidden="true">#</a> 查看jvm的参数flags</h3><p><img src="/images/java/96331.png" alt="img"></p><h3 id="查看java系统参数sysprops" tabindex="-1"><a class="header-anchor" href="#查看java系统参数sysprops" aria-hidden="true">#</a> 查看java系统参数sysprops</h3><p><img src="/images/java/96333.png" alt="img"></p><hr><h2 id="jstat" tabindex="-1"><a class="header-anchor" href="#jstat" aria-hidden="true">#</a> <strong>Jstat</strong></h2><p>jstat命令可以查看堆内存各部分的使用量，以及加载类的数量</p><p>jstat [-命令选项] [vmid] [间隔时间(毫秒)] [查询次数]</p><p>注意：使用的jdk版本是jdk8</p><h3 id="垃圾回收统计gc" tabindex="-1"><a class="header-anchor" href="#垃圾回收统计gc" aria-hidden="true">#</a> 垃圾回收统计gc</h3><p><strong>jstat -gc pid 最常用</strong>，可以评估程序内存使用及GC压力整体情况</p><p><img src="/images/java/96314.png" alt="img"></p><ul><li>S0C：第一个幸存区的大小，单位KB</li><li>S1C：第二个幸存区的大小</li><li>S0U：第一个幸存区的使用大小</li><li>S1U：第二个幸存区的使用大小</li><li>EC：伊甸园区的大小</li><li>EU：伊甸园区的使用大小</li><li>OC：老年代大小</li><li>OU：老年代使用大小</li><li>MC：方法区大小(元空间)</li><li>MU：方法区使用大小</li><li>CCSC:压缩类空间大小</li><li>CCSU:压缩类空间使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>YGCT：年轻代垃圾回收消耗时间，单位s</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间，单位s</li><li>GCT：垃圾回收消耗总时间，单位s</li></ul><hr><h3 id="堆内存统计" tabindex="-1"><a class="header-anchor" href="#堆内存统计" aria-hidden="true">#</a> 堆内存统计</h3><p><img src="/images/java/96312.png" alt="img"></p><ul><li>NGCMN：新生代最小容量</li><li>NGCMX：新生代最大容量</li><li>NGC：当前新生代容量</li><li>S0C：第一个幸存区大小</li><li>S1C：第二个幸存区的大小</li><li>EC：伊甸园区的大小</li><li>OGCMN：老年代最小容量</li><li>OGCMX：老年代最大容量</li><li>OGC：当前老年代大小</li><li>OC:当前老年代大小</li><li>MCMN:最小元数据容量</li><li>MCMX：最大元数据容量</li><li>MC：当前元数据空间大小</li><li>CCSMN：最小压缩类空间大小</li><li>CCSMX：最大压缩类空间大小</li><li>CCSC：当前压缩类空间大小</li><li>YGC：年轻代gc次数</li><li>FGC：老年代GC次数</li></ul><hr><h3 id="新生代垃圾回收统计" tabindex="-1"><a class="header-anchor" href="#新生代垃圾回收统计" aria-hidden="true">#</a> 新生代垃圾回收统计</h3><p><img src="/images/java/96317.png" alt="img"></p><ul><li>S0C：第一个幸存区的大小</li><li>S1C：第二个幸存区的大小</li><li>S0U：第一个幸存区的使用大小</li><li>S1U：第二个幸存区的使用大小</li><li>TT:对象在新生代存活的次数</li><li>MTT:对象在新生代存活的最大次数</li><li>DSS:期望的幸存区大小</li><li>EC：伊甸园区的大小</li><li>EU：伊甸园区的使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>YGCT：年轻代垃圾回收消耗时间</li></ul><hr><h3 id="新生代内存统计" tabindex="-1"><a class="header-anchor" href="#新生代内存统计" aria-hidden="true">#</a> 新生代内存统计</h3><p><img src="/images/java/96315.png" alt="img"></p><ul><li>NGCMN：新生代最小容量</li><li>NGCMX：新生代最大容量</li><li>NGC：当前新生代容量</li><li>S0CMX：最大幸存1区大小</li><li>S0C：当前幸存1区大小</li><li>S1CMX：最大幸存2区大小</li><li>S1C：当前幸存2区大小</li><li>ECMX：最大伊甸园区大小</li><li>EC：当前伊甸园区大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代回收次数</li></ul><hr><h3 id="老年代垃圾回收统计" tabindex="-1"><a class="header-anchor" href="#老年代垃圾回收统计" aria-hidden="true">#</a> 老年代垃圾回收统计</h3><p><img src="/images/java/96319.png" alt="img"></p><ul><li>MC：方法区大小</li><li>MU：方法区使用大小</li><li>CCSC:压缩类空间大小</li><li>CCSU:压缩类空间使用大小</li><li>OC：老年代大小</li><li>OU：老年代使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><hr><h3 id="老年代内存统计" tabindex="-1"><a class="header-anchor" href="#老年代内存统计" aria-hidden="true">#</a> 老年代内存统计</h3><p><img src="/images/java/96318.png" alt="img"></p><ul><li>OGCMN：老年代最小容量</li><li>OGCMX：老年代最大容量</li><li>OGC：当前老年代大小</li><li>OC：老年代大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><hr><h3 id="元数据空间统计" tabindex="-1"><a class="header-anchor" href="#元数据空间统计" aria-hidden="true">#</a> 元数据空间统计</h3><p><img src="/images/java/96316.png" alt="img"></p><ul><li>MCMN:最小元数据容量</li><li>MCMX：最大元数据容量</li><li>MC：当前元数据空间大小</li><li>CCSMN：最小压缩类空间大小</li><li>CCSMX：最大压缩类空间大小</li><li>CCSC：当前压缩类空间大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><hr><h2 id="jvm运行情况预估" tabindex="-1"><a class="header-anchor" href="#jvm运行情况预估" aria-hidden="true">#</a> <strong>JVM运行情况预估</strong></h2><p>用 jstat -gc pid 命令可以计算出如下一些关键数据，有了这些数据就可以采用之前介绍过的优化思路，先给自己的系统设置一些初始性的JVM参数，比如堆内存大小，年轻代大小，Eden和Survivor的比例，老年代的大小，大对象的阈值，大龄对象进入老年代的阈值等。</p><h3 id="年轻代对象增长的速率" tabindex="-1"><a class="header-anchor" href="#年轻代对象增长的速率" aria-hidden="true">#</a> <strong>年轻代对象增长的速率</strong></h3><p>可以执行命令 jstat -gc pid 1000 10 (每隔1秒执行1次命令，共执行10次)，通过观察EU(eden区的使用)来估算每秒eden大概新增多少对象，如果系统负载不高，可以把频率1秒换成1分钟，甚至10分钟来观察整体情况。注意，一般系统可能有高峰期和日常期，所以需要在不同的时间分别估算不同情况下对象增长速率。</p><h3 id="young-gc的触发频率和每次耗时" tabindex="-1"><a class="header-anchor" href="#young-gc的触发频率和每次耗时" aria-hidden="true">#</a> <strong>Young GC的触发频率和每次耗时</strong></h3><p>知道年轻代对象增长速率我们就能推根据eden区的大小推算出Young GC大概多久触发一次，Young GC的平均耗时可以通过 YGCT/YGC 公式算出，根据结果我们大概就能知道<strong>系统大概多久会因为Young GC的执行而卡顿多久。</strong></p><h3 id="每次young-gc后有多少对象存活和进入老年代" tabindex="-1"><a class="header-anchor" href="#每次young-gc后有多少对象存活和进入老年代" aria-hidden="true">#</a> <strong>每次Young GC后有多少对象存活和进入老年代</strong></h3><p>这个因为之前已经大概知道Young GC的频率，假设是每5分钟一次，那么可以执行命令 jstat -gc pid 300000 10 ，观察每次结果eden，survivor和老年代使用的变化情况，在每次gc后eden区使用一般会大幅减少，survivor和老年代都有可能增长，这些增长的对象就是每次Young GC后存活的对象，同时还可以看出每次Young GC后进去老年代大概多少对象，从而可以推算出<strong>老年代对象增长速率。</strong></p><h3 id="full-gc的触发频率和每次耗时" tabindex="-1"><a class="header-anchor" href="#full-gc的触发频率和每次耗时" aria-hidden="true">#</a> <strong>Full GC的触发频率和每次耗时</strong></h3><p>知道了老年代对象的增长速率就可以推算出Full GC的触发频率了，Full GC的每次耗时可以用公式 FGCT/FGC 计算得出。</p><h2 id="优化思路" tabindex="-1"><a class="header-anchor" href="#优化思路" aria-hidden="true">#</a> 优化思路</h2><p><strong>优化思路</strong>其实简单来说就是尽量让每次Young GC后的存活对象小于Survivor区域的50%，都留存在年轻代里。尽量别让对象进入老年代。尽量减少Full GC的频率，<strong>避免频繁Full GC对JVM性能的影响</strong>。</p>',91),t={},e=(0,a(66262).A)(t,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);