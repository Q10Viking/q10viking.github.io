"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[8766],{7022:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-b475f70a",path:"/spring/09%20spring%20aop%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/spring/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"spring AOP源码分析",slug:"spring-aop源码分析",children:[]},{level:2,title:"自定义一个Advisor进行判断",slug:"自定义一个advisor进行判断",children:[]},{level:2,title:"spring AOP定义",slug:"spring-aop定义",children:[{level:3,title:"功能点",slug:"功能点",children:[]}]},{level:2,title:"Java代码学习",slug:"java代码学习",children:[]},{level:2,title:"FunctionalInterface的链式调用",slug:"functionalinterface的链式调用",children:[]},{level:2,title:"ProxyFactory源码分析",slug:"proxyfactory源码分析",children:[]},{level:2,title:"大概流程",slug:"大概流程",children:[]},{level:2,title:"Java 方法接收接口类型的好处",slug:"java-方法接收接口类型的好处",children:[]},{level:2,title:"ThreadLocal",slug:"threadlocal",children:[]},{level:2,title:"Java代码",slug:"java代码",children:[]},{level:2,title:"Java代码适配模式",slug:"java代码适配模式",children:[]}],filePathRelative:"spring/09 spring aop源码分析.md"}},60918:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(20641).Fv)('<h2 id="spring-aop源码分析" tabindex="-1"><a class="header-anchor" href="#spring-aop源码分析" aria-hidden="true">#</a> spring AOP源码分析</h2><p>aspectj 有五种</p><p>spring aop 有四种</p><p>https://www.processon.com/view/link/6295bdabe401fd2eed189a2f</p><p>![Spring AOP源码分析](/images/spring/Spring AOP源码分析.png)</p><h2 id="自定义一个advisor进行判断" tabindex="-1"><a class="header-anchor" href="#自定义一个advisor进行判断" aria-hidden="true">#</a> 自定义一个Advisor进行判断</h2><p>看看是如何使用pointcut进行判断的。</p><p>代理执行过程</p><h2 id="spring-aop定义" tabindex="-1"><a class="header-anchor" href="#spring-aop定义" aria-hidden="true">#</a> spring AOP定义</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAop</span> <span class="token punctuation">{</span>\n\n<span class="token comment">//\t@Before(&quot;execution(public void org.hzz.aop.UserService.test())&quot;)</span>\n\t<span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public void UserService.test())&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------before---------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public void UserService.test())&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n\t<span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">&quot;a()&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// finally</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------after---------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="功能点" tabindex="-1"><a class="header-anchor" href="#功能点" aria-hidden="true">#</a> 功能点</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public void UserService.test(..)) &amp;&amp; args(a,b)&quot;</span><span class="token punctuation">,</span>argNames <span class="token operator">=</span> <span class="token string">&quot;a,b&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------before---------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public void UserService.test(..)) &amp;&amp; args(a,b)&quot;</span><span class="token punctuation">,</span>argNames <span class="token operator">=</span> <span class="token string">&quot;a,b&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">String</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------before---------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="java代码学习" tabindex="-1"><a class="header-anchor" href="#java代码学习" aria-hidden="true">#</a> Java代码学习</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass\n<span class="token class-name">Advice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Map&lt;Boolean,ArrayList&lt;Instance&gt;&gt;  nacos中服务实例健康</span>\n<span class="token comment">// Map&lt;Object, Boolean&gt;</span>\n<span class="token comment">// 缓存判断处理结果</span>\n<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> advisedBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>adviseBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 不在处理</span>\n    <span class="token keyword">return</span> <span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Advice</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Pointcut</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token class-name">Advisor</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">AopInfrastructureBean</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注解学习</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>AnnotationUtils.findAnnotation(clazz, Aspect.class)\nAnnotationUtils.getAnnotation(method, Pointcut.class)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>反射学习</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 拿到一个类的想要的方法</span>\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">MethodFilter</span> adviceMethodFilter <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token constant">USER_DECLARED_METHODS</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>method <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">Pointcut</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">MethodFilter</span> <span class="token constant">USER_DECLARED_METHODS</span> <span class="token operator">=</span>\n\t\t\t<span class="token punctuation">(</span>method <span class="token operator">-&gt;</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">isBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> methods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">doWithMethods</span><span class="token punctuation">(</span>aspectClass<span class="token punctuation">,</span> methods<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">,</span> adviceMethodFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>反射封装method,成对象Advisor</p><h2 id="functionalinterface的链式调用" tabindex="-1"><a class="header-anchor" href="#functionalinterface的链式调用" aria-hidden="true">#</a> FunctionalInterface的链式调用</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>  <span class="token comment">// FunctionalInterface的定义还有default方法</span>\n\t<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MethodFilter</span> <span class="token punctuation">{</span>\n\n\t\t<span class="token doc-comment comment">/**\n\t\t * Determine whether the given method matches.\n\t\t * <span class="token keyword">@param</span> <span class="token parameter">method</span> the method to check\n\t\t */</span>\n\t\t<span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token doc-comment comment">/**\n\t\t * Create a composite filter based on this filter <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>and<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> the provided filter.\n\t\t * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If this filter does not match, the next filter will not be applied.\n\t\t * <span class="token keyword">@param</span> <span class="token parameter">next</span> the next <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">MethodFilter</span></span></span><span class="token punctuation">}</span>\n\t\t * <span class="token keyword">@return</span> a composite <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">MethodFilter</span></span></span><span class="token punctuation">}</span>\n\t\t * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if the MethodFilter argument is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>\n\t\t * <span class="token keyword">@since</span> 5.3.2\n\t\t */</span>\n\t\t<span class="token keyword">default</span> <span class="token class-name">MethodFilter</span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">MethodFilter</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token string">&quot;Next MethodFilter must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span> method <span class="token operator">-&gt;</span> <span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> next<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n\t * Action to take on each method.\n\t */</span>\n\t<span class="token annotation punctuation">@FunctionalInterface</span>\n\t<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MethodCallback</span> <span class="token punctuation">{</span>\n\n\t\t<span class="token doc-comment comment">/**\n\t\t * Perform an operation using the given method.\n\t\t * <span class="token keyword">@param</span> <span class="token parameter">method</span> the method to operate on\n\t\t */</span>\n\t\t<span class="token keyword">void</span> <span class="token function">doWith</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>仿照AOP排序before after</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Comparator</span> thenComparing 方法\n<span class="token keyword">default</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token operator">&amp;</span> <span class="token class-name">Serializable</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> res <span class="token operator">:</span> other<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>它排序是按照数组的注解在数组中的下标顺序进行排序</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> adviceKindComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConvertingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n\t\t\t\t<span class="token keyword">new</span> <span class="token class-name">InstanceComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n\t\t\t\t\t\t<span class="token class-name">Around</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Before</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">After</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">AfterReturning</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">AfterThrowing</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t\t<span class="token punctuation">(</span><span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> method <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token class-name">AspectJAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> ann <span class="token operator">=</span> <span class="token class-name">AbstractAspectJAdvisorFactory</span><span class="token punctuation">.</span><span class="token function">findAspectJAnnotationOnMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span>ann <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> ann<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> methodNameComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConvertingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tadviceMethodComparator <span class="token operator">=</span> adviceKindComparator<span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span>methodNameComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>isInstance\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="proxyfactory源码分析" tabindex="-1"><a class="header-anchor" href="#proxyfactory源码分析" aria-hidden="true">#</a> ProxyFactory源码分析</h2><blockquote><p>测试类： D:\\Github\\Learn-spring-framework\\spring-framework\\hzz-demo\\src\\test\\java\\org\\hzz\\aop\\AopTest.java</p></blockquote><p><img src="/images/spring/image-20220515185359398.png" alt="image-20220515185359398"></p><h2 id="大概流程" tabindex="-1"><a class="header-anchor" href="#大概流程" aria-hidden="true">#</a> 大概流程</h2><ol><li>找到容器中的Advisor,解析@Aspect类，生成Advisor</li><li>根据被代理类和Advisor构建ProxyFactory,生成代理对象</li></ol><h2 id="java-方法接收接口类型的好处" tabindex="-1"><a class="header-anchor" href="#java-方法接收接口类型的好处" aria-hidden="true">#</a> Java 方法接收接口类型的好处</h2><p>定义一个接口</p><p>一个类实现它用作正常的处理</p><p>灵活的处理匿名类实现它</p><h2 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal" aria-hidden="true">#</a> ThreadLocal</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public class NamedThreadLocal&lt;T&gt; extends ThreadLocal&lt;T&gt; {\n\n\tprivate final String name;\n\n\n\t/**\n\t * Create a new NamedThreadLocal with the given name.\n\t * @param name a descriptive name for this ThreadLocal\n\t */\n\tpublic NamedThreadLocal(String name) {\n\t\tAssert.hasText(name, &quot;Name must not be empty&quot;);\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.name;\n\t}\n\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="java代码" tabindex="-1"><a class="header-anchor" href="#java代码" aria-hidden="true">#</a> Java代码</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if (advisor instanceof PointcutAdvisor pointcutAdvisor) \nClass&lt;?&gt; throwableParam = method.getParameterTypes()[method.getParameterCount() - 1];\nThrowable.class.isAssignableFrom(throwableParam)\nisInstance\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="java代码适配模式" tabindex="-1"><a class="header-anchor" href="#java代码适配模式" aria-hidden="true">#</a> Java代码适配模式</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">DefaultAdvisorAdapterRegistry</span>\n    \n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AdvisorAdapter</span><span class="token punctuation">&gt;</span></span> adapters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n\t<span class="token doc-comment comment">/**\n\t * Create a new DefaultAdvisorAdapterRegistry, registering well-known adapters.\n\t */</span>\n\t<span class="token keyword">public</span> <span class="token class-name">DefaultAdvisorAdapterRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">registerAdvisorAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodBeforeAdviceAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">registerAdvisorAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AfterReturningAdviceAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">registerAdvisorAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThrowsAdviceAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\nsupportsAdvice\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// ThreadLocal&lt;MethodInvocation&gt; threadlocal;</span>\n<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>\n    <span class="token class-name">MethodInvocation</span> oldInvocation <span class="token operator">=</span> threadlocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拿出来</span>\n    invocation<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置新的值</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        threadlocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>oldInvocation<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',45),t={},e=(0,a(66262).A)(t,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);