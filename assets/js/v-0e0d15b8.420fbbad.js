"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[92245],{20864:(l,t,e)=>{e.r(t),e.d(t,{data:()=>i});const i={key:"v-0e0d15b8",path:"/MySQL/62%20MySQl%E5%BA%95%E5%B1%82%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9B+%E6%A0%91.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[],filePathRelative:"MySQL/62 MySQl底层为什么选择B+树.md"}},27622:(l,t,e)=>{e.r(t),e.d(t,{default:()=>u});var i=e(20641);const n=[(0,i.Lk)("li",null,"**良好的平衡性：**B+树是一种自平衡的树结构，不论是在插入、删除还是查询操作中，它都能保持相对较好的平衡状态。这使得B+树能够快速定位到目标数据，提高查询效率。",-1),(0,i.Lk)("li",null,"**顺序访问性：**B+树的所有叶子节点是按照索引键的顺序排序的。这使得范围查询和顺序访问非常高效，因为相邻的数据通常在物理上也是相邻存储的，可以利用磁盘预读提高IO效率。",-1),(0,i.Lk)("li",null,"**存储效率：**B+树在内存中的节点大小通常比其他树结构更大，这样可以减少磁盘I/O操作的次数。同时，B+树的非叶子节点只存储索引列的值，而不包含实际数据，这进一步减小了索引的尺寸。",-1),(0,i.Lk)("li",null,"**支持高并发：**B+树的特性使得它能够支持高并发的读写操作。通过使用合适的锁或事务隔离级别，多个并发查询和更新操作可以同时进行而不会出现严重的阻塞或冲突。",-1),(0,i.Lk)("li",null,"**易于扩展和维护：**B+树的结构相对简单，可以较容易地进行扩展和维护。当插入或删除数据时，B+树只需要调整路径上的少数节点，而不需要整颗树的重构。这样能够有效降低维护成本，并保证索引的高性能。",-1)],r={},u=(0,e(66262).A)(r,[["render",function(l,t){return(0,i.uX)(),(0,i.CE)("ol",null,n)}]])},66262:(l,t)=>{t.A=(l,t)=>{const e=l.__vccOpts||l;for(const[l,i]of t)e[l]=i;return e}}}]);