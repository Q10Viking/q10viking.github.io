"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[60460],{24160:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-4a7bca3c",path:"/Docker/10%20docker%20compose.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Docker/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Docker Compose（容器编排）",slug:"docker-compose-容器编排",children:[]},{level:2,title:"快速入门",slug:"快速入门",children:[]},{level:2,title:"Docker Compose管理容器的结构",slug:"docker-compose管理容器的结构",children:[]},{level:2,title:"docker-compose.yml常用指令",slug:"docker-compose-yml常用指令",children:[{level:3,title:"image",slug:"image",children:[]},{level:3,title:"build",slug:"build",children:[]},{level:3,title:"command",slug:"command",children:[]},{level:3,title:"links",slug:"links",children:[]},{level:3,title:"external_links",slug:"external-links",children:[]},{level:3,title:"ports",slug:"ports",children:[]},{level:3,title:"expose",slug:"expose",children:[]},{level:3,title:"volumes",slug:"volumes",children:[]},{level:3,title:"volumes_from",slug:"volumes-from",children:[]},{level:3,title:"environments",slug:"environments",children:[]},{level:3,title:"env_file",slug:"env-file",children:[]},{level:3,title:"extends",slug:"extends",children:[]},{level:3,title:"net",slug:"net",children:[]},{level:3,title:"dns",slug:"dns",children:[]},{level:3,title:"dns_search",slug:"dns-search",children:[]}]}],filePathRelative:"Docker/10 docker compose.md"}},17857:(n,s,e)=>{e.r(s),e.d(s,{default:()=>d});var a=e(20641);const l=(0,a.Lk)("h2",{id:"docker-compose-容器编排",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#docker-compose-容器编排","aria-hidden":"true"},"#"),(0,a.eW)(" Docker Compose（容器编排）")],-1),r=(0,a.Lk)("p",null,"使用微服务架构的应用系统一般包含若干个微服务，每个微服务一般都会部署多个实例。如果每个微服务都要手动启停，那么效率之低、维护量之大可想而知。",-1),p=(0,a.Lk)("blockquote",null,[(0,a.Lk)("p",null,"使用 Docker Compose来轻松、高效地管理容器")],-1),o={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Fv)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>q10viking@LAPTOP-PJLAUUSP:/$ <span class="token function">docker</span> compose version\nDocker Compose version v2.15.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h2><blockquote><p>文件结构</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>q10viking@LAPTOP-PJLAUUSP:~/learndocker/learncompose$ tree\n<span class="token builtin class-name">.</span>\n├── docker-compose.yml\n└── eureka\n    ├── Dockerfile\n    └── microservice-eureka-server-0.0.1-SNAPSHOT.jar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>在docker-compose.yml 中添加内容如下：</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>services:\n  eureka:             <span class="token comment">#指定服务名</span>\n    image: hzz-microservice-server:0.0.1  <span class="token comment">#指定镜像名称</span>\n    build: ./eureka   <span class="token comment">#指定Dockfile所在路径</span>\n    ports:\n      - <span class="token string">&quot;8761:8761&quot;</span>   <span class="token comment">#指定端口映射</span>\n    expose:\n      - <span class="token number">8761</span>          <span class="token comment">#声明容器对外暴露的端口</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>启动</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> compose up （后面加-d可以后台启动<span class="token punctuation">)</span>     \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>q10viking@LAPTOP-PJLAUUSP:~/learndocker/learncompose$ <span class="token function">docker</span> compose up\n<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Running <span class="token number">2</span>/2\n ⠿ Network learncompose_default     Created                                                                        <span class="token number">0</span>.2s\n ⠿ Container learncompose-eureka-1  Created                                                                        <span class="token number">1</span>.0s\nAttaching to learncompose-eureka-1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="/images/Docker/image-20230424130639588.png" alt="image-20230424130639588"></p><blockquote><p>docker compose会做以下几件事</p></blockquote><ul><li><p>创建一个默认的网络<code>learncompose_default</code>，默认以compose所在文件目录名加&quot;_default&quot;命名，compose内的所有容器都会加入此网络，可以相互用服务名访问。最好自定义一个网络。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>  <span class="token key atrule">redis-node6</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">5.0</span>\n    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server <span class="token punctuation">-</span><span class="token punctuation">-</span>port 7005 <span class="token punctuation">-</span><span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>enabled yes <span class="token punctuation">-</span><span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>config<span class="token punctuation">-</span>file /data/nodes.conf <span class="token punctuation">-</span><span class="token punctuation">-</span>appendonly yes <span class="token punctuation">-</span><span class="token punctuation">-</span>bind 0.0.0.0\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;7005:7005&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;17005:17005&quot;</span>\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> ./data/node6<span class="token punctuation">:</span>/data\n    <span class="token key atrule">networks</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> mynet\t\t<span class="token comment"># 服务加入该网络</span>\n\n<span class="token key atrule">networks</span><span class="token punctuation">:</span>\n  <span class="token key atrule">mynet</span><span class="token punctuation">:</span>\t\t<span class="token comment"># 自定义网络</span>\n    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge\t<span class="token comment"># 使用桥接驱动</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>如果镜像 <code>hzz-microservice-server:0.0.1</code> 不存在先构建镜像，如果镜像存在则不构建，加上 <strong>--build</strong> 参数可以强制先构建镜像，如果镜像之前构建过且构建文件没有变化或构建的内容没有变化，就算加上 <strong>--build</strong> 参数也不会重新构建</p></li><li><p>根据构建的镜像创建一个名称叫 <code>learncompose-eureka-1</code> 的容器</p></li><li><p>启动容器</p></li></ul><hr><h2 id="docker-compose管理容器的结构" tabindex="-1"><a class="header-anchor" href="#docker-compose管理容器的结构" aria-hidden="true">#</a> Docker Compose管理容器的结构</h2><blockquote><p>Docker Compose将所管理的容器分为三层，<strong>分别是工程（ project），服务（service）以及容器（ container)</strong></p></blockquote><ul><li><p>Docker Compose运行目录下的所有文件（ docker-compose.yml、 extends文件或环境变量文件等）组成一个工程（默认为 docker-compose.yml所在目录的目录名称）。一个工程可包含多个服务，每个服务中定义了容器运行的镜像、参数和依赖，一个服务可包括多个容器实例</p><blockquote><p>上面示例里工程名称是 docker-compose.yml 所在的目录名。该工程包含了1个服务，服务名称是 eureka，执行 docker-compose up时，启动了eureka服务的1个容器实例</p></blockquote></li><li><p>同一个docker compose内部的容器之间可以用服务名相互访问，<strong>服务名就相当于hostname，可以直接 ping 服务名，得到的就是服务对应容器的ip，如果服务做了扩容，一个服务对应了多个容器，则 ping 服务名 会轮询访问服务对应的每台容器ip ，docker底层用了LVS等技术帮我们实现这个负载均衡</strong></p></li></ul><hr><h2 id="docker-compose-yml常用指令" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml常用指令" aria-hidden="true">#</a> docker-compose.yml常用指令</h2>',18),i={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},t=(0,a.Fv)('<h3 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> <strong>image</strong></h3><p>指定镜像名称或者镜像id，如果该镜像在本地不存在，Compose会尝试pull下来。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> image<span class="token operator">:</span> java<span class="token operator">:</span><span class="token number">8</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>​</p><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> <strong>build</strong></h3><p>指定Dockerfile文件的路径。可以是一个路径，例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> build: ./dir  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>也可以是一个对象，用以指定Dockerfile和参数，例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>build:\n  context: ./dir\n  dockerfile: Dockerfile-alternate\n  args:\n    buildno: <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="command" tabindex="-1"><a class="header-anchor" href="#command" aria-hidden="true">#</a> <strong>command</strong></h3><p>覆盖容器启动后默认执行的命令。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>command: bundle <span class="token builtin class-name">exec</span> thin <span class="token parameter variable">-p</span> <span class="token number">3000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>也可以是一个list，类似于Dockerfile总的CMD指令，格式如下</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>command: <span class="token punctuation">[</span>bundle, exec, thin, -p, <span class="token number">3000</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> <strong>links</strong></h3><p>显示链接到其他服务中的容器。可以指定服务名称和链接的别名使用SERVICE:ALIAS 的形式，或者只指定服务名称，</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>web:\n  links:\n   - db\n   - db:database\n   - redis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="external-links" tabindex="-1"><a class="header-anchor" href="#external-links" aria-hidden="true">#</a> <strong>external_links</strong></h3><p>表示链接到docker-compose.yml外部的容器，甚至并非Compose管理的容器，特别是对于那些提供共享容器或共同服务。格式跟links类似，示例：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>external_links:\n - redis_1\n - project_db_1:mysql\n - project_db_1:postgresql\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="ports" tabindex="-1"><a class="header-anchor" href="#ports" aria-hidden="true">#</a> <strong>ports</strong></h3><p>暴露端口信息。使用宿主端口:容器端口的格式，或者仅仅指定容器的端口（此时宿主机将会随机指定端口），类似于docker run -p ，示例：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ports:\n - <span class="token string">&quot;3000&quot;</span>\n - <span class="token string">&quot;3000-3005&quot;</span>\n - <span class="token string">&quot;8000:8000&quot;</span>\n - <span class="token string">&quot;9090-9091:8080-8081&quot;</span>\n - <span class="token string">&quot;49100:22&quot;</span>\n - <span class="token string">&quot;127.0.0.1:8001:8001&quot;</span>\n - <span class="token string">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="expose" tabindex="-1"><a class="header-anchor" href="#expose" aria-hidden="true">#</a> <strong>expose</strong></h3><p>暴露端口，只将端口暴露给连接的服务，而不暴露给宿主机，示例：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>expose:\n - <span class="token string">&quot;3000&quot;</span>\n - <span class="token string">&quot;8000&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="volumes" tabindex="-1"><a class="header-anchor" href="#volumes" aria-hidden="true">#</a> <strong>volumes</strong></h3><p>卷挂载路径设置。可以设置宿主机路径 <code>（HOST:CONTAINER）</code> 或加上访问模式 <code>（HOST:CONTAINER:ro）</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>volumes:\n  <span class="token comment"># Just specify a path and let the Engine create a volume</span>\n  - /var/lib/mysql\n\n  <span class="token comment"># Specify an absolute path mapping</span>\n  - /opt/data:/var/lib/mysql\n\n  <span class="token comment"># Path on the host, relative to the Compose file</span>\n  - ./cache:/tmp/cache\n\n  <span class="token comment"># User-relative path</span>\n  - ~/configs:/etc/configs/:ro\n\n  <span class="token comment"># Named volume</span>\n  - datavolume:/var/lib/mysql\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="volumes-from" tabindex="-1"><a class="header-anchor" href="#volumes-from" aria-hidden="true">#</a> <strong>volumes_from</strong></h3><p>从另一个服务或者容器挂载卷。可以指定只读或者可读写，如果访问模式没有指定，则默认是可读写。示例</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>volumes_from:\n - service_name\n - service_name:ro\n - container:container_name\n - container:container_name:rw\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="environments" tabindex="-1"><a class="header-anchor" href="#environments" aria-hidden="true">#</a> <strong>environment</strong>s</h3><p>设置环境变量。可以使用数组或者字典两种方式。只有一个key的环境变量可以在运行Compose的机器上找到对应的值，这有助于加密的或者特殊主机的值</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>environment:\n  RACK_ENV: development\n  SHOW: <span class="token string">&#39;true&#39;</span>\n  SESSION_SECRET:\n\nenvironment:\n  - <span class="token assign-left variable">RACK_ENV</span><span class="token operator">=</span>development\n  - <span class="token assign-left variable">SHOW</span><span class="token operator">=</span>true\n  - SESSION_SECRET\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="env-file" tabindex="-1"><a class="header-anchor" href="#env-file" aria-hidden="true">#</a> <strong>env_file</strong></h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。如果通过 docker-compose -f FILE 指定了模板文件，则 env_file 中路径会基于模板文件路径。如果有变量名称与 environment 指令冲突，则以envirment 为准</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>env_file: .env\n\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> <strong>extends</strong></h3><p>继承另一个服务，基于已有的服务进行扩展</p><h3 id="net" tabindex="-1"><a class="header-anchor" href="#net" aria-hidden="true">#</a> <strong>net</strong></h3><p>设置网络模式。示例：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>net: <span class="token string">&quot;bridge&quot;</span>\nnet: <span class="token string">&quot;host&quot;</span>\nnet: <span class="token string">&quot;none&quot;</span>\nnet: <span class="token string">&quot;container:[service name or container name/id]&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> <strong>dns</strong></h3><p>配置dns服务器。可以是一个值，也可以是一个列表</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dns: <span class="token number">8.8</span>.8.8\ndns:\n  - <span class="token number">8.8</span>.8.8\n  - <span class="token number">9.9</span>.9.9\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="dns-search" tabindex="-1"><a class="header-anchor" href="#dns-search" aria-hidden="true">#</a> <strong>dns_search</strong></h3><p>配置DNS的搜索域，可以是一个值，也可以是一个列表</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dns_search: example.com\ndns_search:\n  - dc1.example.com\n  - dc2.example.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',49),u={},d=(0,e(66262).A)(u,[["render",function(n,s){const e=(0,a.g2)("OutboundLink");return(0,a.uX)(),(0,a.CE)(a.FK,null,[l,r,p,(0,a.Lk)("p",null,[(0,a.Lk)("a",o,[(0,a.eW)("Docker Compose overview | Docker Documentation"),(0,a.bF)(e)])]),c,(0,a.Lk)("p",null,[(0,a.eW)("文件官方文档："),(0,a.Lk)("a",i,[(0,a.eW)("https://docs.docker.com/compose/compose-file/"),(0,a.bF)(e)])]),t],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);