"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[23421],{27487:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-9c151b28",path:"/concurrency/01%20%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A8%A1%E5%9E%8B.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/concurrency/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"冯诺依曼计算机模型",slug:"冯诺依曼计算机模型",children:[]},{level:2,title:"计算机五大核心组成部分",slug:"计算机五大核心组成部分",children:[]},{level:2,title:"CPU指令结构",slug:"cpu指令结构",children:[{level:3,title:"控制单元",slug:"控制单元",children:[]},{level:3,title:"运算单元",slug:"运算单元",children:[]},{level:3,title:"存储单元",slug:"存储单元",children:[]}]},{level:2,title:"CPU缓存结构",slug:"cpu缓存结构",children:[{level:3,title:"缓存行",slug:"缓存行",children:[]}]},{level:2,title:"CPU读取存储器数据过程",slug:"cpu读取存储器数据过程",children:[]},{level:2,title:"CPU为何要有高速缓存",slug:"cpu为何要有高速缓存",children:[{level:3,title:"空间局部性原则体现",slug:"空间局部性原则体现",children:[]},{level:3,title:"时间局部性原则体现",slug:"时间局部性原则体现",children:[]}]},{level:2,title:"带有高速缓存的CPU执行计算的流程",slug:"带有高速缓存的cpu执行计算的流程",children:[]},{level:2,title:"CPU运行安全等级",slug:"cpu运行安全等级",children:[]}],filePathRelative:"concurrency/01 冯诺依曼计算机模型.md"}},63315:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(20641).Fv)('<h2 id="冯诺依曼计算机模型" tabindex="-1"><a class="header-anchor" href="#冯诺依曼计算机模型" aria-hidden="true">#</a> 冯诺依曼计算机模型</h2><p>现代计算机模型是基于-<strong>冯诺依曼计算机模型</strong></p><ol><li>计算机在运行时，先从内存中取出第一条指令，通过控制器的译码，按指令的要求，从存储器中取出数据进行指定的运算和逻辑操作等加工</li><li>然后再按地址把结果送到内存中去</li><li>再取出第二条指令，在控制器的指挥下完成规定操作。依此进行下去。直至遇到停止指令。</li></ol><p>程序与数据一样存贮，按程序编排的顺序，一步一步地取出指令，自动地完成指令规定的操作是计算机最基本的工作模型。这一原理最初是由美籍匈牙利数学家冯.诺依曼于1945年提出来的，故称为冯.诺依曼计算机模型。</p><hr><h2 id="计算机五大核心组成部分" tabindex="-1"><a class="header-anchor" href="#计算机五大核心组成部分" aria-hidden="true">#</a> <strong>计算机五大核心组成部分</strong></h2><ol><li>控制器(Control)：是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。</li><li>运算器(Datapath)：运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。</li><li>存储器(Memory)：存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。</li><li>输入(Input system)：输入设备是计算机的重要组成部分，输入设备与输出设备合你为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等</li><li>输出(Output system)：输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来。微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。</li></ol><p><img src="/images/concurrency/13867.png" alt="img"></p><p>上面的模型是一个理论的抽象简化模型，它的具体应用就是现代计算机当中的硬件结构设计</p><p><img src="/images/concurrency/13873.png" alt="img"></p><h2 id="cpu指令结构" tabindex="-1"><a class="header-anchor" href="#cpu指令结构" aria-hidden="true">#</a> <strong>CPU指令结构</strong></h2><p>CPU内部结构</p><ul><li>控制单元</li><li>运算单元</li><li>数据单元</li></ul><p><img src="/images/concurrency/13892.png" alt="img"></p><h3 id="控制单元" tabindex="-1"><a class="header-anchor" href="#控制单元" aria-hidden="true">#</a> <strong>控制单元</strong></h3><p>控制单元是整个CPU的指挥控制中心，由指令寄存器IR（Instruction Register）、指令译码器ID（Instruction Decoder）和 操作控制器OC（Operation Controller） 等组成，对协调整个电脑有序工作极为重要。它根据用户预先编好的程序，依次从存储器中取出各条指令，放在指令寄存器IR中，通过指令译码（分析）确定应该进行什么操作，然后通过操作控制器OC，按确定的时序，向相应的部件发出微操作控制信号。操作控制器OC中主要包括：节拍脉冲发生器、控制矩阵、时钟脉冲发生器、复位电路和启停电路等控制逻辑。</p><h3 id="运算单元" tabindex="-1"><a class="header-anchor" href="#运算单元" aria-hidden="true">#</a> <strong>运算单元</strong></h3><p>运算单元是运算器的核心。可以执行算术运算（包括加减乘数等基本运算及其附加运算）和逻辑运算（包括移位、逻辑测试或两个值比较）。相对控制单元而言，运算器接受控制单元的命令而进行动作，即运算单元所进行的全部操作都是由控制单元发出的控制信号来指挥的，所以它是执行部件。</p><h3 id="存储单元" tabindex="-1"><a class="header-anchor" href="#存储单元" aria-hidden="true">#</a> <strong>存储单元</strong></h3><p><strong>存储单元包括 CPU 片内缓存Cache和寄存器组</strong>，是 CPU 中暂时存放数据的地方，里面保存着那些等待处理的数据，或已经处理过的数据，CPU 访问寄存器所用的时间要比访问内存的时间短。 寄存器是CPU内部的元件，寄存器拥有非常高的读写速度，所以在寄存器之间的数据传送非常快。采用寄存器，可以减少 CPU 访问内存的次数，从而提高了 CPU 的工作速度。寄存器组可分为专用寄存器和通用寄存器。专用寄存器的作用是固定的，分别寄存相应的数据；而通用寄存器用途广泛并可由程序员规定其用途。</p><hr><p>超线程技术的发展使得在物理内核上可以2个逻辑处理器</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取机器上的逻辑核</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span>\n                <span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="/images/concurrency/image-20210619103806345.png" alt="image-20210619103806345"></p><h2 id="cpu缓存结构" tabindex="-1"><a class="header-anchor" href="#cpu缓存结构" aria-hidden="true">#</a> <strong>CPU缓存结构</strong></h2><p>现代CPU为了提升执行效率，减少CPU与内存的交互(交互影响CPU效率)，一般在CPU上集成了多级缓存架构，常见的为三级缓存结构</p><ul><li>L1 Cache，分为<strong>数据缓存和指令缓存</strong>，<strong>逻辑核独占</strong></li><li>L2 Cache，<strong>物理核独占，逻辑核共享</strong></li><li>L3 Cache，<strong>所有物理核共享</strong></li></ul><ol><li><p>存储器存储空间大小：内存&gt;L3&gt;L2&gt;L1&gt;寄存器；</p></li><li><p>存储器速度快慢排序：寄存器&gt;L1&gt;L2&gt;L3&gt;内存；</p></li></ol><p><img src="/images/concurrency/13912.png" alt="img"></p><h3 id="缓存行" tabindex="-1"><a class="header-anchor" href="#缓存行" aria-hidden="true">#</a> 缓存行</h3><ol><li><p>缓存是由最小的存储区块-缓存行(cacheline)组成，缓存行大小通常为64byte</p></li><li><p>比如你的L1缓存大小是512kb,而cacheline = 64byte,那么就是L1里有512 * 1024/64个cacheline</p></li></ol><p>Long是8byte,能存储8个，Int是4byte能存储4个</p><p>超大变量超出64byte，则划分多个缓存行存储。</p><h2 id="cpu读取存储器数据过程" tabindex="-1"><a class="header-anchor" href="#cpu读取存储器数据过程" aria-hidden="true">#</a> <strong>CPU读取存储器数据过程</strong></h2><ol><li>CPU要取寄存器X的值，只需要一步：直接读取。</li><li>CPU要取L1 cache的某个值，需要1-3步（或者更多）：把<strong>cache行锁</strong>住，把某个数据拿来，解锁，如果没锁住就慢了。</li><li>CPU要取L2 cache的某个值，先要到L1 cache里取，L1当中不存在，在L2里，L2开始加锁，加锁以后，把L2里的数据复制到L1，再执行读L1的过程，上面的3步，再解锁。</li><li>CPU取L3 cache的也是一样，只不过先由L3复制到L2，从L2复制到L1，从L1到CPU。</li><li>CPU取内存则最复杂：通知内存控制器占用总线带宽，通知内存加锁，发起内存读请求，等待回应，回应数据保存到L3（如果没有就到L2），再从L3/2到L1，再从L1到CPU，之后解除总线锁定。</li></ol><h2 id="cpu为何要有高速缓存" tabindex="-1"><a class="header-anchor" href="#cpu为何要有高速缓存" aria-hidden="true">#</a> <strong>CPU为何要有高速缓存</strong></h2><p>CPU在摩尔定律的指导下以每18个月翻一番的速度在发展，然而内存和硬盘的发展速度远远不及CPU。这就造成了高性能能的内存和硬盘价格及其昂贵。然而CPU的高度运算需要高速的数据。为了解决这个问题，<strong>CPU厂商在CPU中内置了少量的高速缓存以解决I\\O速度和CPU运算速度之间的不匹配问题</strong>。</p><p>在CPU访问存储设备时，无论是存取数据抑或存取指令，都趋于<strong>聚集在一片连续的区域中，这就被称为局部性原理</strong>。</p><blockquote><p><strong>时间局部性（Temporal Locality）</strong>：<strong>如果一个信息项正在被访问，那么在近期它很可能还会被再次访问</strong>。</p><p>比如循环、递归、方法的反复调用等。</p><p><strong>空间局部性（Spatial Locality）</strong>：如果一个<strong>存储器的位置被引用，那么将来他附近的位置也会被引用</strong>。</p><p>比如顺序执行的代码、连续创建的两个对象、数组等。</p></blockquote><h3 id="空间局部性原则体现" tabindex="-1"><a class="header-anchor" href="#空间局部性原则体现" aria-hidden="true">#</a> 空间局部性原则体现</h3><blockquote><p>由于局部性原理，在读取一个位置的时候，会将附近的位置也进行读取（在同一个缓存行）。那么CPU与内存的交互就会相应的减少，时间就会提升。</p><p>所以二位数组按行读取块，按列读取慢，因为按照列读取时，读取的附近的值是当时行的值。从内存中从列读取的值就是实打实的交互次数。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoDimensionalArraySum</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">RUNS</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DIMENSION_1</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DIMENSION_2</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> longs<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">/*\n         * 初始化数组\n         */</span>\n        longs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token constant">DIMENSION_1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">DIMENSION_1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            longs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token constant">DIMENSION_2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">DIMENSION_2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                longs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Array初始化完毕....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//\t符合空间局部性原则</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token constant">RUNS</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">DIMENSION_1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//DIMENSION_1=1024*1024</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token constant">DIMENSION_2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//6</span>\n                    sum<span class="token operator">+=</span>longs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spend time1:&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sum1:&quot;</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>\n        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token constant">RUNS</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token constant">DIMENSION_2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//6</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">DIMENSION_1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//1024*1024</span>\n                    sum<span class="token operator">+=</span>longs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spend time2:&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sum2:&quot;</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Array初始化完毕....\n * spend time1:862\n * sum1:629145600\n * spend time2:2377\n * sum2:629145600\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p><img src="/images/concurrency/image-20210619110418746.png" alt="image-20210619110418746"></p><hr><h3 id="时间局部性原则体现" tabindex="-1"><a class="header-anchor" href="#时间局部性原则体现" aria-hidden="true">#</a> 时间局部性原则体现</h3><p>如果一个变量被访问，那么访问过不会立即丢弃，因为它近期很有可能再次被访问。</p><h2 id="带有高速缓存的cpu执行计算的流程" tabindex="-1"><a class="header-anchor" href="#带有高速缓存的cpu执行计算的流程" aria-hidden="true">#</a> <strong>带有高速缓存的CPU执行计算的流程</strong></h2><ol><li>程序以及数据被加载到主内存</li><li>指令和数据被加载到CPU的高速缓存</li><li>CPU执行指令，把结果写到高速缓存</li><li>高速缓存中的数据写回主内存</li></ol><h2 id="cpu运行安全等级" tabindex="-1"><a class="header-anchor" href="#cpu运行安全等级" aria-hidden="true">#</a> <strong>CPU运行安全等级</strong></h2><p>CPU4个安全级别,CPU处在不同分安全级别能够发出不同的操作指令</p><ol><li>ring0是内核态，操作系统</li><li>ring1</li><li>ring2</li><li>ring3 如JVM</li></ol><p>Linux与Windows只用到了2个级别:ring0、ring3，操作系统内部内部程序指令通常运行在ring0级别，操作系统以外的第三方程序运行在ring3级别，第三方程序如果要调用操作系统内部函数功能，由于运行安全级别不够,必须切换CPU运行状态，从ring3切换到ring0,然后执行系统函数，说到这里相信同学们明白为什么JVM创建线程，线程阻塞唤醒是重型操作了，因为CPU要切换运行状态。</p><p>下面大概梳理一下JVM创建线程CPU的工作过程</p><ol><li>CPU从ring3切换ring0创建线程</li><li>创建完毕,CPU从ring0切换回ring3</li><li>线程执行JVM程序</li><li>线程执行完毕，销毁还得切回ring0</li></ol>',54),t={},e=(0,a(66262).A)(t,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);