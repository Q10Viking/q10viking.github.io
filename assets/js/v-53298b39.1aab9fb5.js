"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[31541],{69726:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-53298b39",path:"/javascript/07%20es6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/javascript/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"1 let声明变量",slug:"_1-let声明变量",children:[{level:3,title:"1.1 let会形成独立的作用域",slug:"_1-1-let会形成独立的作用域",children:[]},{level:3,title:"1.2  不允许变量提升",slug:"_1-2-不允许变量提升",children:[]},{level:3,title:"1.3 不允许定义重复变量",slug:"_1-3-不允许定义重复变量",children:[]}]},{level:2,title:"2 解构赋值",slug:"_2-解构赋值",children:[{level:3,title:"结构上要对应⭐",slug:"结构上要对应⭐",children:[]},{level:3,title:"2.1 数组解构",slug:"_2-1-数组解构",children:[]},{level:3,title:"2.2 对象解构",slug:"_2-2-对象解构",children:[]}]},{level:2,title:"3 展开运算符",slug:"_3-展开运算符",children:[{level:3,title:"3.1 数组展开",slug:"_3-1-数组展开",children:[]},{level:3,title:"3.2 对象展开",slug:"_3-2-对象展开",children:[]},{level:3,title:"3.3  剩余运算符（区别）",slug:"_3-3-剩余运算符-区别",children:[]}]}],filePathRelative:"javascript/07 es6基础知识.md"}},37823:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(20641).Fv)('<h2 id="_1-let声明变量" tabindex="-1"><a class="header-anchor" href="#_1-let声明变量" aria-hidden="true">#</a> 1 let声明变量</h2><h3 id="_1-1-let会形成独立的作用域" tabindex="-1"><a class="header-anchor" href="#_1-1-let会形成独立的作用域" aria-hidden="true">#</a> 1.1 let会形成独立的作用域</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// var没有独立的作用域，异步执行时值已经是3，所以会输出3，3，3</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// let 会形成独立的作用域，会输出0，1，2</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_1-2-不允许变量提升" tabindex="-1"><a class="header-anchor" href="#_1-2-不允许变量提升" aria-hidden="true">#</a> 1.2 不允许变量提升</h3><h3 id="_1-3-不允许定义重复变量" tabindex="-1"><a class="header-anchor" href="#_1-3-不允许定义重复变量" aria-hidden="true">#</a> 1.3 不允许定义重复变量</h3><h2 id="_2-解构赋值" tabindex="-1"><a class="header-anchor" href="#_2-解构赋值" aria-hidden="true">#</a> 2 解构赋值</h2><h3 id="结构上要对应⭐" tabindex="-1"><a class="header-anchor" href="#结构上要对应⭐" aria-hidden="true">#</a> <strong>结构上要对应</strong>⭐</h3><h3 id="_2-1-数组解构" tabindex="-1"><a class="header-anchor" href="#_2-1-数组解构" aria-hidden="true">#</a> 2.1 数组解构</h3><ol><li><strong>数组结构需要[]将变量包裹</strong></li></ol><h4 id="_2-2-1-正常解构" tabindex="-1"><a class="header-anchor" href="#_2-2-1-正常解构" aria-hidden="true">#</a> 2.2.1 正常解构</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-2-2-缺省解构" tabindex="-1"><a class="header-anchor" href="#_2-2-2-缺省解构" aria-hidden="true">#</a> 2.2.2 缺省解构</h4><h5 id="_1-只解构前部分" tabindex="-1"><a class="header-anchor" href="#_1-只解构前部分" aria-hidden="true">#</a> 1 只解构前部分</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_2-逗号分隔" tabindex="-1"><a class="header-anchor" href="#_2-逗号分隔" aria-hidden="true">#</a> 2 逗号分隔</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_3-省略号" tabindex="-1"><a class="header-anchor" href="#_3-省略号" aria-hidden="true">#</a> 3 省略号</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">//\t[400, 500]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-2-对象解构" tabindex="-1"><a class="header-anchor" href="#_2-2-对象解构" aria-hidden="true">#</a> 2.2 对象解构</h3><h4 id="_2-2-1-名称相同解构" tabindex="-1"><a class="header-anchor" href="#_2-2-1-名称相同解构" aria-hidden="true">#</a> 2.2.1 名称相同解构</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// Q10Viking 25</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{ a, b, ...rest} = { a: 100, b: 200, c: 300, d: 400, e: 500 }\nconsole.log(rest)\t//\t{c: 300, d: 400, e: 500}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;Miami&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;Male&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">,</span> sayHello <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>\n<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_2-2-2-别名解构" tabindex="-1"><a class="header-anchor" href="#_2-2-2-别名解构" aria-hidden="true">#</a> 2.2.2 别名解构</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> nameAlias<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> ageAlias <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameAlias<span class="token punctuation">,</span> ageAlias<span class="token punctuation">)</span> <span class="token comment">// Q10Viking 25</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-2-3-默认解构" tabindex="-1"><a class="header-anchor" href="#_2-2-3-默认解构" aria-hidden="true">#</a> 2.2.3 默认解构</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> school <span class="token operator">=</span> <span class="token string">&quot;CAU&quot;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> school<span class="token punctuation">)</span> <span class="token comment">// Q10Viking CAU</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_1-默认解构在函数形参中应用" tabindex="-1"><a class="header-anchor" href="#_1-默认解构在函数形参中应用" aria-hidden="true">#</a> 1 默认解构在函数形参中应用</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method <span class="token operator">=</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;Order1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// GET Order1</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;Order2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// // POST Order2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_3-展开运算符" tabindex="-1"><a class="header-anchor" href="#_3-展开运算符" aria-hidden="true">#</a> 3 展开运算符</h2><h3 id="_3-1-数组展开" tabindex="-1"><a class="header-anchor" href="#_3-1-数组展开" aria-hidden="true">#</a> 3.1 数组展开</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token comment">//  [1, 2, 3, 4]</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-2-对象展开" tabindex="-1"><a class="header-anchor" href="#_3-2-对象展开" aria-hidden="true">#</a> 3.2 对象展开</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    pos <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">school</span><span class="token operator">:</span> <span class="token string">&quot;CAU&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;Beijing&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// {name: &quot;Q10Viking&quot;, age: 25, school: &quot;CAU&quot;, city: &quot;Beijing&quot;}</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>person<span class="token punctuation">,</span> <span class="token operator">...</span>pos <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-3-剩余运算符-区别" tabindex="-1"><a class="header-anchor" href="#_3-3-剩余运算符-区别" aria-hidden="true">#</a> 3.3 剩余运算符（区别）</h3><ol><li>这里不是展开运算符</li><li>而是剩余运算符</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">param<span class="token punctuation">,</span> <span class="token operator">...</span>num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 1 [2,3]</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',37),t={},e=(0,a(66262).A)(t,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);