"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[53759],{81878:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0cf9da64",path:"/Algorithm/153%20%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Algorithm/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"二分法",slug:"二分法",children:[]}],filePathRelative:"Algorithm/153 寻找旋转排序数组中的最小值.md"}},60957:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(20641);const t={class:"custom-container tip"},e=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),o={href:"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Fv)('<h2 id="二分法" tabindex="-1"><a class="header-anchor" href="#二分法" aria-hidden="true">#</a> 二分法</h2><blockquote><p>重点是找到中间点的时候，该往哪边移动。</p><p>看接下来的分析</p></blockquote><p>如果旋转0次 数组变为0 1 2 4 5 6 7， n[start]&lt;n[mid]&lt;n[end] ，最小值就是start所指元素。</p><p>​ <img src="/images/algorithm/image-20230922004454728.png" alt="image-20230922004454728"></p><p>如果旋转1次：7 0 1 2 4 5 6， n[start]&gt;n[mid]，n[mid]&lt;n[end] ，最小值在 left半区。</p><p><img src="/images/algorithm/image-20230922004505966.png" alt="image-20230922004505966"></p><p>如果旋转2次：6 7 0 1 2 4 5 ，n[start]&gt;n[mid]，n[mid]&lt;n[end] ，最小值在 left半区。</p><p><img src="/images/algorithm/image-20230922004516091.png" alt="image-20230922004516091"></p><p>如果旋转3次：5 6 7 0 1 2 4， n[start]&gt;n[mid]，n[mid]&lt;n[end] ，最小值在 left半区。</p><p><img src="/images/algorithm/image-20230922004526862.png" alt="image-20230922004526862"></p><p>如果旋转4次：4 5 6 7 0 1 2， n[start]&lt;n[mid]，n[mid]&gt;n[end] ，最小值在 right半区。</p><p><img src="/images/algorithm/image-20230922004537287.png" alt="image-20230922004537287"></p><p>如果旋转5次：2 4 5 6 7 0 1， n[start]&lt;n[mid]，n[mid]&gt;n[end] ，最小值在 right半区。</p><p><img src="/images/algorithm/image-20230922004546339.png" alt="image-20230922004546339"></p><p>如果旋转6次：1 2 4 5 6 7 0， n[start]&lt;n[mid]，n[mid]&gt;n[end] ，最小值在 right半区。</p><p><img src="/images/algorithm/image-20230922004555840.png" alt="image-20230922004555840"></p><p>如果旋转7次：0 1 2 4 5 6 7 ，又和旋转0次一致了，最小值就是start所指元素。</p><p><img src="/images/algorithm/image-20230922004605398.png" alt="image-20230922004605398"></p><p>我们可以得到如下规律：</p><p>如果n[start]&gt;n[mid]，n[mid]&lt;n[end] 最小值在 left半区，接下来就应该往mid的左边找；</p><p>如果n[start]&lt;n[mid]，n[mid]&gt;n[end] 最小值在 right半区，接下来就应该往mid的右边找；</p><p>如果 n[start]&lt;n[mid]&lt;n[end] 最小值就是start下标。</p><blockquote><p>找到规律之后用二分法解决，相当于二分法的应用</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>\n                solution<span class="token punctuation">.</span><span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 找到规律 start &lt; mid &lt; end,最小为start\n     * start &gt; mid,mid &lt; end,在左半区域\n     * start &lt; mid,mid &gt; end,在右半区域\n     * <span class="token keyword">@param</span> <span class="token parameter">nums</span>\n     * <span class="token keyword">@return</span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token comment">// 左半区域</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                end <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n                <span class="token comment">// 右半区域</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n                start <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 防止死循环，右半区略过mid，因为nums[mid]是大于nums[end]的</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',24),l={},i=(0,a(66262).A)(l,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",t,[e,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("153. 寻找旋转排序数组中的最小值 - 力扣（LeetCode）"),(0,p.bF)(a)])])]),c],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);