"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[25677],{51786:(e,r,i)=>{i.r(r),i.d(r,{data:()=>t});const t={key:"v-01f447b7",path:"/concurrency/04%20%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/concurrency/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"进程",slug:"进程",children:[]},{level:2,title:"线程",slug:"线程",children:[{level:3,title:"线程上下文切换",slug:"线程上下文切换",children:[]}]},{level:2,title:"进程间通信的方式",slug:"进程间通信的方式",children:[]},{level:2,title:"说说并发和并行的区别",slug:"说说并发和并行的区别",children:[]},{level:2,title:"什么是线程调度器和时间分片",slug:"什么是线程调度器和时间分片",children:[]}],filePathRelative:"concurrency/04 进程与线程.md"}},41163:(e,r,i)=>{i.r(r),i.d(r,{default:()=>n});const t=(0,i(20641).Fv)('<h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> <strong>进程</strong></h2><ol><li><p>现代操作系统在运行一个程序时，会为其创建一个进程；例如，启动一个Java程序，操作系统就会创建一个Java进程。</p></li><li><p><strong>进程是OS(操作系统)资源分配的最小单位</strong>。</p></li></ol><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><ol><li><strong>线程是OS(操作系统)调度CPU的最小单元</strong>，也叫轻量级进程（Light Weight Process）</li><li>在一个进程里可以创建多个线程，这些线程都拥有各自的计数器、堆栈和局部变量等属性，并且能够访问共享的内存变量。</li><li>CPU在这些线程上高速切换，让使用者感觉到这些线程在同时执行，即并发的概念，相似的概念还有并行！</li></ol><h3 id="线程上下文切换" tabindex="-1"><a class="header-anchor" href="#线程上下文切换" aria-hidden="true">#</a> 线程上下文切换</h3><p><img src="/images/concurrency/14453.png" alt="img"></p><h2 id="进程间通信的方式" tabindex="-1"><a class="header-anchor" href="#进程间通信的方式" aria-hidden="true">#</a> 进程间通信的方式</h2><ol><li><strong>管道（pipe）及有名管道（named pipe）</strong>：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。</li><li><strong>信号（signal）</strong>：信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的。</li><li><strong>消息队列（message queue）</strong>：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息。</li><li><strong>共享内存（shared memory）</strong>：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。</li><li><strong>信号量（semaphore）</strong>：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段。</li><li><strong>套接字（socket）</strong>：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。</li></ol><h2 id="说说并发和并行的区别" tabindex="-1"><a class="header-anchor" href="#说说并发和并行的区别" aria-hidden="true">#</a> 说说并发和并行的区别</h2><p><strong>并发</strong>针对单核 CPU 而言，它指的是 <strong>多个任务交替执行</strong>，每个任务都会在一段时间内执行一部分，然后切换到另一个任务，因为单核 CPU 一次只能执行一个任务。并发的目的是提高系统的响应性和吞吐量，允许多个任务在同一个处理器上共享时间片。</p><p><strong>并行</strong>针对多核 CPU 而言，它指的是多个任务真正同时执行，每个任务都有自己的处理器核心，它们可以在同一时刻执行不同的指令。并行的目的是提高计算能力和性能，允许多个任务同时处理，以加快任务完成的速度。</p><p>单核 CPU 只能并发，无法并行；换句话说，<strong>并行只可能发生在多核 CPU 中</strong>。**在多核 CPU 中，并发和并行通常会同时存在。**多个任务可以在不同的核心上并行执行，并且每个任务内部可能也包含并发的逻辑，以处理不同的子任务。这样可以最大程度地提高系统的性能和响应性。</p><h2 id="什么是线程调度器和时间分片" tabindex="-1"><a class="header-anchor" href="#什么是线程调度器和时间分片" aria-hidden="true">#</a> 什么是线程调度器和时间分片</h2><p>线程调度器（Thread Scheduler）是操作系统内核中的一个重要组件，负责分配并管理处理器时间片，控制多线程程序的执行顺序。当有多个线程同时运行时，线程调度器会在这些线程之间进行切换，使得每个线程都有机会使用 CPU 资源，并实现任务的并发执行。</p><p>时间分片（Time Slicing）是指将可用的 CPU 时间分配给可用的 Runnable 线程的过程。分配 CPU 时间可以基于线程优先级或者线程等待的时间。这样，每个线程运行一段时间后，会被暂停，然后调度器会选择下一个线程来执行。这种方式可以确保每个线程都能获得一定的运行时间，从而实现多任务并发执行。</p>',15),l={},n=(0,i(66262).A)(l,[["render",function(e,r){return t}]])},66262:(e,r)=>{r.A=(e,r)=>{const i=e.__vccOpts||e;for(const[e,t]of r)i[e]=t;return i}}}]);