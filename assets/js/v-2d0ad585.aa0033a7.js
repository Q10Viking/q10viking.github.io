"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[64027],{80284:(e,l,i)=>{i.r(l),i.d(l,{data:()=>r});const r={key:"v-2d0ad585",path:"/zk/",title:"",lang:"zh-CN",frontmatter:{prev:{text:"Back To 目录",link:"/topicNav/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"应用",slug:"应用",children:[{level:3,title:"统一命名服务",slug:"统一命名服务",children:[]},{level:3,title:"数据发布/订阅",slug:"数据发布-订阅",children:[]},{level:3,title:"负载均衡",slug:"负载均衡",children:[]}]}],filePathRelative:"zk/README.md"}},98420:(e,l,i)=>{i.r(l),i.d(l,{default:()=>n});const r=(0,i(20641).Fv)('<blockquote><p>在了解Zookeeper之前，需要对分布式相关知识有一定了解，什么是分布式系统呢？通常情况下，单个物理节点很容易达到性能，计算或者容量的瓶颈，所以这个时候就需要多个物理节点来共同完成某项任务，一个分布式系统的本质是分布在不同网络或计算机上的程序组件，彼此通过信息传递来协同工作的系统，而Zookeeper正是一个分布式应用协调框架，在分布式系统架构中有广泛的应用场景。</p></blockquote><p>官方文档上这么解释zookeeper，它是一个分布式协调框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p><ol><li>一个分布式系统的本质是<strong>分布在不同网络或计算机上的程序组件</strong>，彼此<strong>通过信息传递来协同工作的系统</strong></li><li>Zookeeper正是一个<strong>分布式应用协调框架</strong>，在分布式系统架构中有广泛的应用场景。 <ol><li>统一命名服务</li><li>状态同步服务</li><li>集群管理</li><li>分布式应用配置项的管理等。</li></ol></li></ol><img src="/images/zk/image-20210426150251724.png" alt="image-20210426150251724"><p>可以理解为 Zookeeper 是一个用于存储少量数据的<strong>基于内存的数据库</strong>，主要有如下两个核心的概念：文件系统数据结构+监听通知机制。</p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><ol><li><p>分布式配置中心</p></li><li><p>分布式注册中心</p></li><li><p>分布式锁</p></li><li><p>分布式队列</p></li><li><p>集群选举</p></li><li><p>分布式屏障</p></li><li><p>发布/订阅</p></li></ol><h3 id="统一命名服务" tabindex="-1"><a class="header-anchor" href="#统一命名服务" aria-hidden="true">#</a> 统一命名服务</h3><p>在分布式环境下，经常需要对应用/服务进行统一命名，便于识别。</p><p>例如：IP不容易记住，而域名容易记住。</p><p><img src="/images/zk/45267.png" alt="https://note.youdao.com/yws/public/resource/f0549278905bb988c831d6910c54143a/xmlnote/F2A8F7FA79634561A04A2EA2AB9A5347/45267"></p><p>利用 ZooKeeper 顺序节点的特性，制作分布式的序列号生成器，或者叫 id 生成器。（分布式环境下使用作为数据库 id，另外一种是 UUID（缺点：没有规律）），ZooKeeper 可以生成有顺序的容易理解的同时支持分布式环境的编号</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>/\n└── /order\n    ├── /order-date1-000000000000001\n    ├── /order-date2-000000000000002\n    ├── /order-date3-000000000000003\n    ├── /order-date4-000000000000004\n    └── /order-date5-000000000000005\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="数据发布-订阅" tabindex="-1"><a class="header-anchor" href="#数据发布-订阅" aria-hidden="true">#</a> 数据发布/订阅</h3><p>数据发布/订阅的一个常见的场景是配置中心，发布者把数据发布到 ZooKeeper 的一个或一系列的节点上，供订阅者进行数据订阅，达到动态获取数据的目的。</p><p>配置信息一般有几个特点:</p><ol><li>数据量小的KV</li><li>数据内容在运行时会发生动态变化</li><li>集群机器共享，配置一致</li></ol><p>ZooKeeper 采用的是推拉结合的方式。❤️</p><ol><li>推: 服务端会推给注册了监控节点的客户端 Watcher 事件通知</li><li>拉: 客户端获得通知后，然后主动到服务端拉取最新的数据</li></ol><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h3><p>在Zookeeper中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求</p><p><img src="/images/zk/45265.png" alt="https://note.youdao.com/yws/public/resource/f0549278905bb988c831d6910c54143a/xmlnote/5D2F5F78BC28416EB449EC47B0310358/45265"></p>',22),a={},n=(0,i(66262).A)(a,[["render",function(e,l){return r}]])},66262:(e,l)=>{l.A=(e,l)=>{const i=e.__vccOpts||e;for(const[e,r]of l)i[e]=r;return i}}}]);