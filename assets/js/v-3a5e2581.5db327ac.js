"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[86132],{52511:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3a5e2581",path:"/typescript/03%20%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%9E%8B.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/typescript/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"number | string | boolean",slug:"number-string-boolean",children:[]},{level:2,title:"object",slug:"object",children:[]},{level:2,title:"Array",slug:"array",children:[]},{level:2,title:"Tuple",slug:"tuple",children:[]},{level:2,title:"Enum",slug:"enum",children:[]},{level:2,title:"Union Type",slug:"union-type",children:[]},{level:2,title:"Literal Types⭐",slug:"literal-types",children:[]},{level:2,title:"Type Aliases⭐",slug:"type-aliases",children:[]},{level:2,title:"void",slug:"void",children:[]},{level:2,title:"Function Type⭐",slug:"function-type",children:[]},{level:2,title:"Any❤️",slug:"any❤️",children:[]},{level:2,title:"unknown❤️",slug:"unknown❤️",children:[]},{level:2,title:"never",slug:"never",children:[]}],filePathRelative:"typescript/03 常用类型.md"}},59896:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var p=a(20641);const t=(0,p.Fv)('<h2 id="number-string-boolean" tabindex="-1"><a class="header-anchor" href="#number-string-boolean" aria-hidden="true">#</a> number | string | boolean</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The key difference is: JavaScript uses &quot;dynamic types&quot; (resolved at runtime),TypeScript uses &quot;static types&quot; (set during development)</p></div><p><img src="/images/typescript/202111300509398.jpg" alt="202111300509398"></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> printResult<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> resultPhrase<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>showResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultPhrase <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// typescript会自动进行类型推断</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2.8</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> resultPhrase <span class="token operator">=</span> <span class="token string">&quot;Result is &quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> showResult <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> showResult<span class="token punctuation">,</span> resultPhrase<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> object</h2><p><img src="/images/typescript/202111300638967.jpg" alt="202111300638967"></p>',6),e=(0,p.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-typescript"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"const"),(0,p.eW)(" person "),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  name"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"静默"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  developer"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"TypeScript"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br")])],-1),o=(0,p.Lk)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-javascript"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"const"),(0,p.eW)(),(0,p.Lk)("span",{class:"token literal-property property"},"person"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token literal-property property"},"name"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(" string"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token literal-property property"},"developer"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(" string"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token literal-property property"},"name"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"静默"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token literal-property property"},"developer"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"TypeScript"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"7"),(0,p.Lk)("br")])],-1),c=(0,p.Lk)("h2",{id:"array",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#array","aria-hidden":"true"},"#"),(0,p.eW)(" Array")],-1),l=(0,p.Lk)("p",null,[(0,p.Lk)("img",{src:"/images/typescript/202111300709280.jpg",alt:"202111300709280"})],-1),u=(0,p.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-typescript"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"const"),(0,p.eW)(" hobbies "),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token string"},'"Sports"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"Reading"'),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token keyword"},"for"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token keyword"},"const"),(0,p.eW)(" hobby "),(0,p.Lk)("span",{class:"token keyword"},"of"),(0,p.eW)(" hobbies"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token builtin"},"console"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.Lk)("span",{class:"token function"},"log"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.eW)("hobby"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.Lk)("span",{class:"token function"},"toUpperCase"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br")])],-1),r=(0,p.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-typescript"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"const"),(0,p.eW)(" hobbies"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token builtin"},"string"),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token string"},'"Sports"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"Reading"'),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br")])],-1),i=(0,p.Fv)('<hr><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">TodoItem</span><span class="token punctuation">{</span>\n    id<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>\n    title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    completed<span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> todoItems<span class="token operator">:</span>TodoItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 声明类型数组</span>\n\n<span class="token comment">// 在vue中使用的时候</span>\n<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        todoItems<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> TodoItem<span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',2),k={href:"https://bobbyhadz.com/blog/typescript-push-object-to-array",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Fv)('<h2 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple" aria-hidden="true">#</a> Tuple</h2><p><img src="/images/typescript/202111300714524.jpg" alt="202111300714524"></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// tuple</span>\n<span class="token keyword">const</span> role<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 这不是tuple,它时union类型的数组</span>\n<span class="token comment">// const role2: (string | number)[]</span>\n<span class="token keyword">const</span> role2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Book2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="enum" tabindex="-1"><a class="header-anchor" href="#enum" aria-hidden="true">#</a> Enum</h2><p><img src="/images/typescript/202111300726655.jpg" alt="202111300726655"></p>',5),m=(0,p.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-typescript"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"enum"),(0,p.eW)(" Role "),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token constant"},"ADMIN"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\t"),(0,p.Lk)("span",{class:"token comment"},"// 默认为0"),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token constant"},"READ_ONLY"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token constant"},"AUTHOR"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br")])],-1),d=(0,p.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-typescript"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"enum"),(0,p.eW)(" Role "),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token constant"},"ADMIN"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token number"},"5"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token constant"},"READ_ONLY"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\t"),(0,p.Lk)("span",{class:"token comment"},"// 默认递增为6"),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token constant"},"AUTHOR"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br")])],-1),g=(0,p.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-typescript"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"enum"),(0,p.eW)(" Role "),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token constant"},"ADMIN"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"ADMIN"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token constant"},"READ_ONLY"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token number"},"100"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  "),(0,p.Lk)("span",{class:"token constant"},"AUTHOR"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"AUTHOR"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n\n"),(0,p.Lk)("span",{class:"token comment"},"// 转为JavaScript就是"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token keyword"},"var"),(0,p.eW)(" Role"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token keyword"},"function"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.eW)("Role"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n    Role"),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token string"},'"ADMIN"'),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"ADMIN"'),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n    Role"),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.eW)("Role"),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token string"},'"READ_ONLY"'),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token number"},"100"),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"READ_ONLY"'),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n    Role"),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token string"},'"AUTHOR"'),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"AUTHOR"'),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.eW)("Role "),(0,p.Lk)("span",{class:"token operator"},"||"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.eW)("Role "),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"7"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"8"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"9"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"10"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"11"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"12"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"13"),(0,p.Lk)("br")])],-1),L=(0,p.Fv)('<hr><h2 id="union-type" tabindex="-1"><a class="header-anchor" href="#union-type" aria-hidden="true">#</a> Union Type</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><em>combining</em> the basic type</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span>input1<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> input2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input1 <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> input2 <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> input1 <span class="token operator">+</span> input2<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> input1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> input2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> combineMoney <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300.3</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>combineMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> combineMsg <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token string">&#39;静默&#39;</span><span class="token punctuation">,</span><span class="token string">&#39; learning TypeScript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>combineMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="literal-types" tabindex="-1"><a class="header-anchor" href="#literal-types" aria-hidden="true">#</a> Literal Types⭐</h2>',5),y={href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Fv)('<p>Literal type结合Union type指明resultConversion参数只能传入’as-number‘ 或者 ’as-text‘ 语义化更加清晰，当调用这个方法的时候就能明确该传入值</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span>\n  input1<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  input2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  resultConversion<span class="token operator">:</span> <span class="token string">&quot;as-number&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;as-text&quot;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token keyword">typeof</span> input1 <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> input2 <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n    resultConversion <span class="token operator">===</span> <span class="token string">&quot;as-number&quot;</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> <span class="token operator">+</span>input1 <span class="token operator">+</span> <span class="token operator">+</span>input2<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> input1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> input2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> combineMoney1 <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300.3</span><span class="token punctuation">,</span> <span class="token string">&quot;as-number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>combineMoney1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  400.3</span>\n<span class="token keyword">const</span> combineMoney2 <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;300.3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;as-number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>combineMoney2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  400.3</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="type-aliases" tabindex="-1"><a class="header-anchor" href="#type-aliases" aria-hidden="true">#</a> Type Aliases⭐</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Combineable</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ConversionDescriptor</span> <span class="token operator">=</span> <span class="token string">&quot;as-number&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;as-text&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span>\n  input1<span class="token operator">:</span> Combineable<span class="token punctuation">,</span>\n  input2<span class="token operator">:</span> Combineable<span class="token punctuation">,</span>\n  resultConversion<span class="token operator">:</span> ConversionDescriptor\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token keyword">typeof</span> input1 <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> input2 <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n    resultConversion <span class="token operator">===</span> <span class="token string">&quot;as-number&quot;</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> <span class="token operator">+</span>input1 <span class="token operator">+</span> <span class="token operator">+</span>input2<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> input1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> input2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="void" tabindex="-1"><a class="header-anchor" href="#void" aria-hidden="true">#</a> void</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">printResult</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Result is&quot;</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 等同于</span>\n<span class="token keyword">function</span> <span class="token function">printResult</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Result is&quot;</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// void等同于</span>\n<span class="token keyword">function</span> <span class="token function">printResult</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Result is&quot;</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="function-type" tabindex="-1"><a class="header-anchor" href="#function-type" aria-hidden="true">#</a> Function Type⭐</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Function type allow us to describe which type of function specifically we want to use somewhere</p><p>参数类型和返回类型来构成签名</p></div><p>如在回调函数中使用</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">addAndHandle</span><span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>\n  <span class="token function">cb</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">addAndHandle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Result is &quot;</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Function Type的写法有两种,下面这种对象的形式也是可以的</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">addAndHandle</span><span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> cb<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>\n  <span class="token function">cb</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h2 id="any❤️" tabindex="-1"><a class="header-anchor" href="#any❤️" aria-hidden="true">#</a> Any❤️</h2><p><img src="/images/typescript/202111300742769.jpg" alt="202111300742769"></p><p>TypeScript不做任何的类型检查https://www.typescriptlang.org/play?q=139#example/any,<strong>让代码跟原来的JS一样</strong>，官网给出一个一很好的例子就是json解析。</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token comment">// A good case for any is JSON parsing:</span>\n\n<span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Any declares to TypeScript to trust your code as being</span>\n<span class="token comment">// safe because you know more about it. Even if that is</span>\n<span class="token comment">// not strictly true. For example, this code would crash:</span>\n\nmyObject<span class="token punctuation">.</span>x<span class="token punctuation">.</span>y<span class="token punctuation">.</span>z<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>另外一个例子，不做类型检查</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> x<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h2 id="unknown❤️" tabindex="-1"><a class="header-anchor" href="#unknown❤️" aria-hidden="true">#</a> unknown❤️</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>unknown类型相比any会做类型检查</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> userInput<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\nuserInput <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token comment">// error unknown会做类型检查</span>\n<span class="token comment">//username = userInput;</span>\nuserInput <span class="token operator">=</span> <span class="token string">&quot;静默&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 不能将类型“unknown”分配给类型“string”</span>\n<span class="token comment">//username = userInput;</span>\n\n<span class="token comment">// 需要用if来做类型推断⭐</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> userInput <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  username <span class="token operator">=</span> userInput<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>使用另外一个例子</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token comment">// ============= Your Code Here =============</span>\n<span class="token keyword">type</span> <span class="token class-name">Push<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ============= Use Age ====================</span>\n<span class="token keyword">const</span> a<span class="token operator">:</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ============= output ====================</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;1&#39;, 2, &#39;3&#39;, true ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="never" tabindex="-1"><a class="header-anchor" href="#never" aria-hidden="true">#</a> never</h2><blockquote><p>should never happern</p></blockquote><p>告诉调用者，这个方法从不返回值</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">generateError</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token punctuation">{</span> msg<span class="token punctuation">,</span> code <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">generateError</span><span class="token punctuation">(</span><span class="token string">&quot;Something Error&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',29),v={},f=(0,a(66262).A)(v,[["render",function(n,s){const a=(0,p.g2)("CodeGroupItem"),v=(0,p.g2)("CodeGroup"),f=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.bF)(v,null,{default:(0,p.k6)((()=>[(0,p.bF)(a,{title:"object"},{default:(0,p.k6)((()=>[e])),_:1}),(0,p.bF)(a,{title:"会被推断为"},{default:(0,p.k6)((()=>[o])),_:1})])),_:1}),c,l,(0,p.bF)(v,null,{default:(0,p.k6)((()=>[(0,p.bF)(a,{title:"array"},{default:(0,p.k6)((()=>[u])),_:1}),(0,p.bF)(a,{title:"会被推断为"},{default:(0,p.k6)((()=>[r])),_:1})])),_:1}),i,(0,p.Lk)("p",null,[(0,p.eW)("添加一个元素到数组中"),(0,p.Lk)("a",k,[(0,p.eW)("Push an object to an Array in TypeScript | bobbyhadz"),(0,p.bF)(f)])]),b,(0,p.bF)(v,null,{default:(0,p.k6)((()=>[(0,p.bF)(a,{title:"基本"},{default:(0,p.k6)((()=>[m])),_:1}),(0,p.bF)(a,{title:"指定开始"},{default:(0,p.k6)((()=>[d])),_:1}),(0,p.bF)(a,{title:"指定每一个"},{default:(0,p.k6)((()=>[g])),_:1})])),_:1}),L,(0,p.Lk)("p",null,[(0,p.Lk)("a",y,[(0,p.eW)("TypeScript: Documentation - literal-types"),(0,p.bF)(f)])]),h],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);