"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[54209],{48370:(a,e,t)=>{t.r(e),t.d(e,{data:()=>l});const l={key:"v-56fe19e6",path:"/seata/02%20Seata%E4%BB%8B%E7%BB%8D.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/seata/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Seata的三大角色",slug:"seata的三大角色",children:[]},{level:2,title:"Seata AT模式的设计思路",slug:"seata-at模式的设计思路",children:[{level:3,title:"一阶段",slug:"一阶段",children:[]},{level:3,title:"二阶段",slug:"二阶段",children:[]}]}],filePathRelative:"seata/02 Seata介绍.md"}},89234:(a,e,t)=>{t.r(e),t.d(e,{default:()=>r});const l=(0,t(20641).Fv)('<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。AT模式是阿里首推的模式</p><h2 id="seata的三大角色" tabindex="-1"><a class="header-anchor" href="#seata的三大角色" aria-hidden="true">#</a> <strong>Seata的三大角色</strong></h2><p>在 Seata 的架构中，一共有三个角色：</p><ul><li><p><strong>TC (Transaction Coordinator) - 事务协调者</strong></p><ul><li>维护全局和分支事务的状态，驱动全局事务提交或回滚。</li></ul></li><li><p><strong>TM (Transaction Manager) - 事务管理器</strong></p><ul><li>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li></ul></li><li><p><strong>RM (Resource Manager) - 资源管理器</strong></p><ul><li>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul></li></ul><blockquote><p>其中，TC 为单独部署的 Server 服务端，TM 和 RM 为嵌入到应用中的 Client 客户端。</p></blockquote><p>在 Seata 中，一个分布式事务的生命周期如下：</p><ol><li>TM 请求 TC 开启一个全局事务。TC 会生成一个 XID 作为该全局事务的编号。XID会在微服务的调用链路中传播，保证将多个微服务的子事务关联在一起。</li><li>RM 请求 TC 将本地事务注册为全局事务的分支事务，通过全局事务的 XID 进行关联。</li><li>TM 请求 TC 告诉 XID 对应的全局事务是进行提交还是回滚。</li><li>TC 驱动 RM 们将 XID 对应的自己的本地事务进行提交还是回滚</li></ol><p><img src="/images/seata/54140.png" alt="https://note.youdao.com/yws/public/resource/c480b9d259db401acff9fdd30a770d64/xmlnote/C6C51A3053FB4CCBA3A7F972AE5A8651/54140"></p><h2 id="seata-at模式的设计思路" tabindex="-1"><a class="header-anchor" href="#seata-at模式的设计思路" aria-hidden="true">#</a> <strong>Seata AT模式的设计思路</strong></h2><blockquote><p>Seata AT模式的核心是对业务无侵入，是一种改进后的两阶段提交，其设计思路如下:</p></blockquote><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：</li><li><ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><h3 id="一阶段" tabindex="-1"><a class="header-anchor" href="#一阶段" aria-hidden="true">#</a> <strong>一阶段</strong></h3><p>业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。核心在于对业务sql进行解析，转换成undolog，并同时入库，这是怎么做的呢？</p><p>​ <img src="/images/seata/54152.png" alt="0"></p><h3 id="二阶段" tabindex="-1"><a class="header-anchor" href="#二阶段" aria-hidden="true">#</a> <strong>二阶段</strong></h3><ul><li>分布式事务操作成功，则TC通知RM异步删除undolog</li></ul><p>​ <img src="/images/seata/54150.png" alt="0"></p><ul><li>分布式事务操作失败，TM向TC发送回滚请求，RM 收到协调器TC发来的回滚请求，通过 XID 和 Branch ID 找到相应的回滚日志记录，通过回滚记录生成反向的更新 SQL 并执行，以完成分支的回滚</li><li><img src="/images/seata/54151.png" alt="https://note.youdao.com/yws/public/resource/c480b9d259db401acff9fdd30a770d64/xmlnote/08356958531F44FF9C6ABCF38BE1AC58/54151"></li></ul>',18),i={},r=(0,t(66262).A)(i,[["render",function(a,e){return l}]])},66262:(a,e)=>{e.A=(a,e)=>{const t=a.__vccOpts||a;for(const[a,l]of e)t[a]=l;return t}}}]);