"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[47933],{71377:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-8b9b7b70",path:"/rabbitmq/09%20SpringBoot%E6%95%B4%E5%90%88RabbitMQ.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/rabbitmq/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"1. 引入依赖",slug:"_1-引入依赖",children:[]},{level:2,title:"2. yml配置",slug:"_2-yml配置",children:[]},{level:2,title:"生产端",slug:"生产端",children:[{level:3,title:"定义交换机，队列以及绑定关系的配置类⭐❤️",slug:"定义交换机-队列以及绑定关系的配置类⭐❤️",children:[]},{level:3,title:"注入RabbitTemplate，调用方法，完成消息发送",slug:"注入rabbittemplate-调用方法-完成消息发送",children:[]}]},{level:2,title:"消费端",slug:"消费端",children:[{level:3,title:"@RabbitListener注解⭐",slug:"rabbitlistener注解⭐",children:[]}]}],filePathRelative:"rabbitmq/09 SpringBoot整合RabbitMQ.md"}},65826:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var t=a(20641);const p=(0,t.Lk)("h2",{id:"_1-引入依赖",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_1-引入依赖","aria-hidden":"true"},"#"),(0,t.eW)(" 1. 引入依赖")],-1),e={href:"https://github.com/Q10Viking/learncode/tree/main/rabbitmq/_03_springboot_rabbitmq",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Fv)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2-yml配置" tabindex="-1"><a class="header-anchor" href="#_2-yml配置" aria-hidden="true">#</a> 2. yml配置</h2><p>Rabbitmq连接的基本信息配置</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># 配置RabbitMQ的基本信息  ip 端口 username  password..</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>\n    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.135.130 <span class="token comment"># ip</span>\n    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>\n    <span class="token key atrule">username</span><span class="token punctuation">:</span> hzz\n    <span class="token key atrule">password</span><span class="token punctuation">:</span> Root.123456\n    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /springboot\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="生产端" tabindex="-1"><a class="header-anchor" href="#生产端" aria-hidden="true">#</a> 生产端</h2><h3 id="定义交换机-队列以及绑定关系的配置类⭐❤️" tabindex="-1"><a class="header-anchor" href="#定义交换机-队列以及绑定关系的配置类⭐❤️" aria-hidden="true">#</a> 定义交换机，队列以及绑定关系的配置类⭐❤️</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">//定义交换机的名字</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span>  <span class="token constant">EXCHANGE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;boot_topic_exchange&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">//定义队列的名字</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;boot_queue&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//1、声明交换机</span>\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;bootExchange&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">bootExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n\n    <span class="token comment">//2、声明队列</span>\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;bootQueue&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">bootQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token comment">//3、队列与交换机进行绑定</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindQueueExchange</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;bootQueue&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span> <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;bootExchange&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;boot.#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="注入rabbittemplate-调用方法-完成消息发送" tabindex="-1"><a class="header-anchor" href="#注入rabbittemplate-调用方法-完成消息发送" aria-hidden="true">#</a> 注入RabbitTemplate，调用方法，完成消息发送</h3><p>springboot自动配置中带有RabbitAutoConfiguration，在这个类中注入了RabbitTemplate;</p><blockquote><p>查看技巧，可以在RabbitTemplate的构造方法打上断点，进行跟踪，就可以发现</p></blockquote><h2 id="消费端" tabindex="-1"><a class="header-anchor" href="#消费端" aria-hidden="true">#</a> 消费端</h2><h3 id="rabbitlistener注解⭐" tabindex="-1"><a class="header-anchor" href="#rabbitlistener注解⭐" aria-hidden="true">#</a> @RabbitListener注解⭐</h3><p>定义监听类，使用@RabbitListener注解完成队列监听</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQListener</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;boot_queue&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ListenerQueue</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Message: &quot;</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',14),c={},l=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,t.g2)("OutboundLink");return(0,t.uX)(),(0,t.CE)(t.FK,null,[p,(0,t.Lk)("p",null,[(0,t.Lk)("a",e,[(0,t.eW)("SpringBoot整合RabbitMQ Source Code"),(0,t.bF)(a)])]),o],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);