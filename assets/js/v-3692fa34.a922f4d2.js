"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[19740],{5289:(a,s,n)=>{n.r(s),n.d(s,{data:()=>e});const e={key:"v-3692fa34",path:"/MySQL/21%20%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E8%AF%A6%E8%A7%A3.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"并发事务处理带来的问题",slug:"并发事务处理带来的问题",children:[{level:3,title:"更新丢失（Lost Update）或脏写",slug:"更新丢失-lost-update-或脏写",children:[]},{level:3,title:"脏读（Dirty Reads）",slug:"脏读-dirty-reads",children:[]},{level:3,title:"不可重读（Non-Repeatable Reads）",slug:"不可重读-non-repeatable-reads",children:[]},{level:3,title:"幻读（Phantom Reads）",slug:"幻读-phantom-reads",children:[]}]},{level:2,title:"事务隔离级别",slug:"事务隔离级别",children:[{level:3,title:"查看隔离级别",slug:"查看隔离级别",children:[]}]},{level:2,title:"查看长事务",slug:"查看长事务",children:[]}],filePathRelative:"MySQL/21 事务隔离级别详解.md"}},56942:(a,s,n)=>{n.r(s),n.d(s,{default:()=>p});const e=(0,n(20641).Fv)('<h2 id="并发事务处理带来的问题" tabindex="-1"><a class="header-anchor" href="#并发事务处理带来的问题" aria-hidden="true">#</a> <strong>并发事务处理带来的问题</strong></h2><h3 id="更新丢失-lost-update-或脏写" tabindex="-1"><a class="header-anchor" href="#更新丢失-lost-update-或脏写" aria-hidden="true">#</a> 更新丢失（Lost Update）或脏写</h3><p>当两个或多个事务选择同一行，然后<strong>基于最初选定的值更新该行时</strong>，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题–<strong>最后的更新覆盖了由其他事务所做的更新</strong>。如对于库存的更新</p><p><img src="/images/MySQL/image-20211028210604376.png" alt="image-20211028210715442"></p><h3 id="脏读-dirty-reads" tabindex="-1"><a class="header-anchor" href="#脏读-dirty-reads" aria-hidden="true">#</a> 脏读（Dirty Reads）</h3><p>一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致的状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此作进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象的叫做“脏读”。</p><p>一句话：<strong>事务A读取到了事务B已经修改但尚未提交的数据</strong>，还在这个数据基础上做了操作。此时，如果B事务回滚，A读取的数据无效，不符合一致性要求。</p><p><img src="/images/MySQL/image-20211028211206718.png" alt="image-20211028211206718"></p><h3 id="不可重读-non-repeatable-reads" tabindex="-1"><a class="header-anchor" href="#不可重读-non-repeatable-reads" aria-hidden="true">#</a> 不可重读（Non-Repeatable Reads）</h3><p>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。</p><p>一句话：<strong>事务A内部的相同查询语句在不同时刻读出的结果不一致，不符合隔离性</strong></p><p><img src="/images/MySQL/image-20211028211540355.png" alt="image-20211028211540355"></p><h3 id="幻读-phantom-reads" tabindex="-1"><a class="header-anchor" href="#幻读-phantom-reads" aria-hidden="true">#</a> 幻读（Phantom Reads）</h3><p>个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。</p><p>一句话：<strong>事务A读取到了事务B提交的新增数据，不符合隔离性</strong></p><p><img src="/images/MySQL/image-20211028211855230.png" alt="image-20211028211855230"></p><h2 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> <strong>事务隔离级别</strong></h2><p>“脏读”、“不可重复读”和“幻读”,其实都是数据库读一致性问题,必须由<strong>数据库提供一定的事务隔离机制来解决</strong>。</p><p><img src="/images/MySQL/image-20211028212211452.png" alt="image-20211028212211452"></p><p>数据库的事务隔离越严格**,并发副作用越小,但付出的代价也就越大**,因为事务隔离实质上就是使事务在一定程度上“串行化”进行,这显然与“并发”是矛盾的。</p><p>同时,不同的应用对读一致性和事务隔离程度的要求也是不同的,比如许多应用对“不可重复读&quot;和“幻读”并不敏感,可能更关心数据并发访问的能力。</p><h3 id="查看隔离级别" tabindex="-1"><a class="header-anchor" href="#查看隔离级别" aria-hidden="true">#</a> 查看隔离级别</h3><p>**常看当前数据库的事务隔离级别: **</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># mysql8</span>\nmysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;transaction_isolation&#39;</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">-----------------------+-----------------+</span>\n<span class="token operator">|</span> Variable_name         <span class="token operator">|</span> <span class="token keyword">Value</span>           <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----------------------+-----------------+</span>\n<span class="token operator">|</span> transaction_isolation <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span><span class="token operator">-</span><span class="token keyword">READ</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----------------------+-----------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>设置事务隔离级别</strong>：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">set</span> tx_isolation<span class="token operator">=</span><span class="token string">&#39;REPEATABLE-READ&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Mysql默认的事务隔离级别是可重复读，用Spring开发程序时，如果不设置隔离级别默认用Mysql设置的隔离级别，如果Spring设置了就用已经设置的隔离级别</strong>⭐⭐⭐</p><h2 id="查看长事务" tabindex="-1"><a class="header-anchor" href="#查看长事务" aria-hidden="true">#</a> 查看长事务</h2><p>可以在 information_schema 库的 innodb_trx 这个表中查询长事务(事务一直没有提交)，比如下面这个语句，用于查找持续时间超过 60s 的事务</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>innodb_trx <span class="token keyword">where</span> TIME_TO_SEC<span class="token punctuation">(</span>timediff<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>trx_started<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">60</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',30),t={},p=(0,n(66262).A)(t,[["render",function(a,s){return e}]])},66262:(a,s)=>{s.A=(a,s)=>{const n=a.__vccOpts||a;for(const[a,e]of s)n[a]=e;return n}}}]);