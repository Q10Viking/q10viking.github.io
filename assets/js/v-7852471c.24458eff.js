"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[21251],{78318:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7852471c",path:"/Algorithm/461%20%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Algorithm/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[],filePathRelative:"Algorithm/461 汉明距离.md"}},66640:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(20641);const e={class:"custom-container tip"},t=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),o={href:"https://leetcode.cn/problems/hamming-distance/submissions/",target:"_blank",rel:"noopener noreferrer"},c={href:"https://q10viking.github.io/Algorithm/%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0.html",target:"_blank",rel:"noopener noreferrer"},l={href:"https://github.com/Q10Viking/learncode/blob/main/algorithm/src/main/java/org/hzz/bit/HammingDistance_461.java",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Fv)('<p><img src="/images/algorithm/image-20230924205247180.png" alt="image-20230924205247180"></p><blockquote><p>1|1=1， 0|0=0， 1|0=1，那就是说AB两数异或，将AB两数以二进制的形式表示，只有相同位置的位不同，结果数result中对应的位才是1，其余的都是0：</p></blockquote><p>接下来我们可以这样做，可以不断地检查 result的最低位，如果最低位为1，那么令计数器加一，然后我们令result整体右移一位，这样result的最低位将被舍去，原本的次低位就变成了新的最低位。我们重复这个过程直到 result=0 为止。这样计数器中就累计了 result 的二进制表示中 1 的数量。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 首先异或取出不同位置的值</span>\n        <span class="token keyword">int</span> xor <span class="token operator">=</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>xor <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// 查看最后一位是否为1</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xor <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token comment">// 更新右移一位</span>\n            xor <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>但是这么做需要循环去处理result 中的每一位，所以我们还可以借助前面所学习过的X &amp;= (X - 1)清除最低位的1，快速的去统计result 中1 的数量。比如：</p><p>假设result = 21，二进制表示为 0001 0101，相比原来的遍历每位需要8次，我们这里只需3次即可知道21的二进制表示中有三个1。</p><p>利用二进制位运算的经典题。本题可以利用X &amp;= (X - 1)清除最低位的1的功能来解决。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>假设X<span class="token operator">=</span> <span class="token number">21</span>，二进制表示为  0001 0101，\n则 <span class="token number">21</span> <span class="token operator">&amp;</span> <span class="token number">20</span> <span class="token operator">=</span> 0001 0101 <span class="token operator">&amp;</span> 0001 0100 <span class="token operator">=</span> 0001 0100 <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token number">20</span><span class="token operator">&amp;</span><span class="token number">19</span> <span class="token operator">=</span> 0001 0100 <span class="token operator">&amp;</span> 0001 0011 <span class="token operator">=</span> 0001 <span class="token assign-left variable">0000</span><span class="token operator">=</span> <span class="token number">16</span>\n<span class="token number">16</span><span class="token operator">&amp;</span><span class="token number">15</span> <span class="token operator">=</span> 0001 0000 <span class="token operator">&amp;</span> 0000 <span class="token number">1111</span> <span class="token operator">=</span> <span class="token number">0</span>\n相比原来的8次，我们这里只需3次即可知道21的二进制表示中有三个1。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> z <span class="token operator">=</span> x<span class="token operator">^</span>y<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>z <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        z <span class="token operator">=</span> z<span class="token operator">&amp;</span><span class="token punctuation">(</span>z<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        count<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',9),u={},i=(0,a(66262).A)(u,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",e,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("461. 汉明距离 - 力扣（LeetCode）"),(0,p.bF)(a)])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",c,[(0,p.eW)("比特位的计数"),(0,p.bF)(a)])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",l,[(0,p.eW)("Source Code HammingDistance_461.java"),(0,p.bF)(a)])])]),r],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);