"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[55677],{45623:(e,l,i)=>{i.r(l),i.d(l,{data:()=>r});const r={key:"v-6427756d",path:"/Redis/44%20%E8%BF%87%E6%9C%9F%E9%94%AE%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Redis对于过期键有三种清除策略",slug:"redis对于过期键有三种清除策略",children:[]},{level:2,title:"Redis的内存淘汰策略",slug:"redis的内存淘汰策略",children:[]},{level:2,title:"LRU 算法",slug:"lru-算法",children:[]},{level:2,title:"LFU 算法",slug:"lfu-算法",children:[]}],filePathRelative:"Redis/44 过期键删除策略.md"}},24588:(e,l,i)=>{i.r(l),i.d(l,{default:()=>o});const r=(0,i(20641).Fv)('<h2 id="redis对于过期键有三种清除策略" tabindex="-1"><a class="header-anchor" href="#redis对于过期键有三种清除策略" aria-hidden="true">#</a> Redis对于过期键有三种清除策略</h2><ol><li>被动删除（惰性删除）：当读/写一个已经过期的key时，会触发惰性删除策略，直接删除掉这个过期key</li><li>主动删除（定期删除）：由于惰性删除策略无法保证冷数据被及时删掉，所以Redis会定期主动淘汰一批<strong>已过期</strong>的key</li><li>定期淘汰：当前已用内存超过maxmemory限定时，触发<strong>主动清理策略</strong></li></ol><blockquote><p><strong>主动清理策略</strong>在Redis 4.0 之前一共实现了 6 种内存淘汰策略，在 4.0 之后，又增加了 2 种策略，总共8种：</p></blockquote><h2 id="redis的内存淘汰策略" tabindex="-1"><a class="header-anchor" href="#redis的内存淘汰策略" aria-hidden="true">#</a> Redis的内存淘汰策略</h2><ol><li><strong>LRU（最近最少使用）：</strong> LRU是Redis默认的内存淘汰策略。根据最近使用的时间戳来判断键的热度，将最久未被使用的键淘汰出去。这种策略保留了最近较常访问的键，适合于热点数据的场景。</li><li><strong>LFU（最不经常使用）：</strong> LFU根据键被访问的频率来判断热度，淘汰访问频率最低的键。这种策略适用于访问模式稳定但不同键的访问频率差异明显的场景。</li><li><strong>Random（随机淘汰）：</strong> 随机淘汰策略是一种基于概率的淘汰方法，随机选择一个键进行淘汰。这种策略简单高效，但可能导致较高的缓存命中率下降。</li><li><strong>TTL（生存时间）：</strong> TTL策略基于键的过期时间，淘汰剩余生存时间最短的键。适用于关注数据实效性的场景。</li><li><strong>Maxmemory Policy（最大内存策略）：</strong> Redis提供了几种最大内存策略，包括noeviction（禁止淘汰）、allkeys-lru、allkeys-random等。这些策略是在达到设定的最大内存限制后，对写操作返回错误，避免继续写入导致系统崩溃。</li></ol><p>在Redis中，可以通过配置文件或动态命令来设置内存淘汰策略。根据具体的业务需求和数据访问模式，选择合适的内存淘汰策略以提高缓存的效率和性能。</p><ol><li><strong>针对设置了过期时间的key做处理</strong><ol><li>volatile-ttl：在筛选时，会针对设置了过期时间的键值对，根据过期时间的先后进行删除，越早过期的越先被删除。</li><li>volatile-random：就像它的名称一样，在设置了过期时间的键值对中，进行随机删除。</li><li>volatile-lru：会使用 LRU 算法筛选设置了过期时间的键值对删除。</li><li>volatile-lfu：会使用 LFU 算法筛选设置了过期时间的键值对删除。</li></ol></li><li><strong>针对所有的key做处理</strong><ol><li>allkeys-random：从所有键值对中随机选择并删除数据</li><li>allkeys-lru：使用 LRU 算法在所有数据中进行筛选删除。</li><li>allkeys-lfu：使用 LFU 算法在所有数据中进行筛选删除。</li></ol></li><li><strong>不处理</strong><ol><li>noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息&quot;(error) OOM command not allowed when used memory&quot;，此时Redis只响应读操作</li></ol></li></ol><h2 id="lru-算法" tabindex="-1"><a class="header-anchor" href="#lru-算法" aria-hidden="true">#</a> LRU 算法</h2><blockquote><p><strong>Least Recently Used，最近最少使用</strong></p></blockquote><p>淘汰很久没被访问过的数据，以<strong>最近一次访问时间</strong>作为参考</p><h2 id="lfu-算法" tabindex="-1"><a class="header-anchor" href="#lfu-算法" aria-hidden="true">#</a> LFU 算法</h2><p><strong>Least Frequently Used，最不经常使用</strong></p><p>淘汰最近一段时间被访问次数最少的数据，以<strong>次数</strong>作为参考。</p><p>当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重。这时使用LFU可能更好点。</p><p>根据自身业务类型，配置好maxmemory-policy(默认是noeviction)，推荐使用volatile-lru。**如果不设置最大内存，当 Redis 内存超出物理内存限制时，内存的数据会开始和磁盘产生频繁的交换 (swap)，会让 Redis 的性能急剧下降。**所以在生产环境需要配置内存的大小。</p><p>❤️当Redis运行在主从模式时，只有主结点才会执行过期删除策略，然后把删除操作”del key”同步到从结点删除数据。❤️</p>',16),t={},o=(0,i(66262).A)(t,[["render",function(e,l){return r}]])},66262:(e,l)=>{l.A=(e,l)=>{const i=e.__vccOpts||e;for(const[e,r]of l)i[e]=r;return i}}}]);