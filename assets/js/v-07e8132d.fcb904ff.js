"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[44374],{72901:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-07e8132d",path:"/Algorithm/226%20%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Algorithm/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"递归",slug:"递归",children:[]}],filePathRelative:"Algorithm/226 翻转二叉树.md"}},80569:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(20641);const t={class:"custom-container tip"},p=(0,e.Lk)("p",{class:"custom-container-title"},"TIP",-1),o={href:"https://leetcode.cn/problems/invert-binary-tree/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/Q10Viking/learncode/blob/main/algorithm/src/main/java/org/hzz/tree/InvertBinTree_226.java",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Fv)('<p><img src="/images/algorithm/invert1-tree.jpg" alt="img"></p><h2 id="递归" tabindex="-1"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>用递归来解决，先递归调用反转根节点的左孩子，然后递归调用反转根节点的右孩子，然后左右交换根节点的左孩子和右孩子。</p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">inverseTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">inverseTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n    <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> <span class="token function">inverseTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> <span class="token function">inverseTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    root<span class="token punctuation">.</span>left <span class="token operator">=</span> right<span class="token punctuation">;</span>\n    root<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',4),l={},i=(0,a(66262).A)(l,[["render",function(n,s){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[(0,e.Lk)("div",t,[p,(0,e.Lk)("p",null,[(0,e.Lk)("a",o,[(0,e.eW)("226. 翻转二叉树 - 力扣（LeetCode）"),(0,e.bF)(a)])]),(0,e.Lk)("p",null,[(0,e.Lk)("a",r,[(0,e.eW)("Source Code InvertBinTree_226.java"),(0,e.bF)(a)])])]),c],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);