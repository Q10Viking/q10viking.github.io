"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[54096],{68084:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1c602008",path:"/golang/13%20%E5%87%BD%E6%95%B0.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/golang/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"指针参数",slug:"指针参数",children:[]},{level:2,title:"不定长参数",slug:"不定长参数",children:[]},{level:2,title:"返回值",slug:"返回值",children:[]},{level:2,title:"匿名函数",slug:"匿名函数",children:[{level:3,title:"声明匿名函数",slug:"声明匿名函数",children:[]},{level:3,title:"立即执行匿名函数",slug:"立即执行匿名函数",children:[]}]},{level:2,title:"函数作为参数",slug:"函数作为参数",children:[]},{level:2,title:"闭包",slug:"闭包",children:[]}],filePathRelative:"golang/13 函数.md"}},74853:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(20641);const t=(0,p.Fv)('<h2 id="指针参数" tabindex="-1"><a class="header-anchor" href="#指针参数" aria-hidden="true">#</a> 指针参数</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>通过函数修改实参，就需要指针类型</p></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 指针参数</span>\n<span class="token keyword">func</span> <span class="token function">argf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">+</span> <span class="token operator">*</span>b\n\t<span class="token operator">*</span>b <span class="token operator">=</span> <span class="token number">666</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> <span class="token punctuation">(</span>\n\t\ta <span class="token operator">=</span> <span class="token number">3</span>\n\t\tb <span class="token operator">=</span> <span class="token number">2</span>\n\t<span class="token punctuation">)</span>\n\n\t<span class="token function">argf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="不定长参数" tabindex="-1"><a class="header-anchor" href="#不定长参数" aria-hidden="true">#</a> 不定长参数</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 多个参数具有相同类型放在一起，可以只写一次类型</span>\n<span class="token keyword">func</span> <span class="token function">func4</span><span class="token punctuation">(</span>java<span class="token punctuation">,</span> golang <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;静默 leanring &quot;</span> <span class="token operator">+</span> java <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> golang<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 不定参数要放在最后面</span>\n<span class="token keyword">func</span> <span class="token function">func1</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> books <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; learning&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> book <span class="token operator">:=</span> <span class="token keyword">range</span> books <span class="token punctuation">{</span>\n\t\t<span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tbooks <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Javascript&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Golang&quot;</span><span class="token punctuation">}</span>\n\t<span class="token comment">// 解构</span>\n\t<span class="token function">func1</span><span class="token punctuation">(</span><span class="token string">&quot;静默&quot;</span><span class="token punctuation">,</span> books<span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// fun1 只有一个返回值，不需要括号括起来</span>\n<span class="token keyword">func</span> <span class="token function">func1</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> name\n<span class="token punctuation">}</span>\n\n<span class="token comment">//  返回值没有名字</span>\n<span class="token keyword">func</span> <span class="token function">func2</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Hi&quot;</span> <span class="token operator">+</span> name\n<span class="token punctuation">}</span>\n\n<span class="token comment">//  返回值具有名字，可以在内部直接复制，然后返回</span>\n<span class="token keyword">func</span> <span class="token function">func3</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ageAlias <span class="token builtin">int</span><span class="token punctuation">,</span> nameAlias <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tageAlias <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">1</span>\n\tnameAlias <span class="token operator">=</span> <span class="token string">&quot;Hi &quot;</span> <span class="token operator">+</span> name\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\thi <span class="token operator">:=</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token string">&quot;静默&quot;</span><span class="token punctuation">)</span>\n\t<span class="token function">println</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span>\n\n\tage<span class="token punctuation">,</span> name <span class="token operator">:=</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token string">&quot;静默&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>\n\t<span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n\n\tage1<span class="token punctuation">,</span> name1 <span class="token operator">:=</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token string">&quot;静默&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>\n\t<span class="token function">println</span><span class="token punctuation">(</span>age1<span class="token punctuation">,</span> name1<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h2><h3 id="声明匿名函数" tabindex="-1"><a class="header-anchor" href="#声明匿名函数" aria-hidden="true">#</a> 声明匿名函数</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 1. 声明匿名函数</span>\n\tadd <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> num1 <span class="token operator">+</span> num2\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="立即执行匿名函数" tabindex="-1"><a class="header-anchor" href="#立即执行匿名函数" aria-hidden="true">#</a> 立即执行匿名函数</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 2. 立即执行</span>\n\t<span class="token keyword">func</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; say: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;静默&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="函数作为参数" tabindex="-1"><a class="header-anchor" href="#函数作为参数" aria-hidden="true">#</a> 函数作为参数</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> addFunc <span class="token keyword">func</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>\n\n<span class="token keyword">func</span> <span class="token function">funcAsArg</span><span class="token punctuation">(</span>f addFunc<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> a addFunc <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> num1 <span class="token operator">+</span> num2\n\t<span class="token punctuation">}</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">funcAsArg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2>',15),e={href:"https://go.dev/tour/moretypes/25",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Fv)('<div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\tsum <span class="token operator">:=</span> <span class="token number">0</span>\n\t<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\t\tsum <span class="token operator">+=</span> x\n\t\t<span class="token keyword">return</span> sum\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tpos<span class="token punctuation">,</span> neg <span class="token operator">:=</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>\n\t\t\t<span class="token function">pos</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t<span class="token function">neg</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',1),c={},l=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("A Tour of Go: Function closures"),(0,p.bF)(a)])]),o],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);