"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[26053],{28126:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-558a4756",path:"/spring/05%20spring%20%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86.html",title:"",lang:"zh-CN",frontmatter:{"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"ProxyFactory",slug:"proxyfactory",children:[]},{level:2,title:"Advice",slug:"advice",children:[]},{level:2,title:"ProxyFactoryBean",slug:"proxyfactorybean",children:[]},{level:2,title:"BeanNameAutoProxyCreator",slug:"beannameautoproxycreator",children:[]},{level:2,title:"DefaultAdvisorAutoProxyCreator",slug:"defaultadvisorautoproxycreator",children:[]}],filePathRelative:"spring/05 spring 中的代理.md"}},24013:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const t=(0,s(20641).Fv)('<h2 id="proxyfactory" tabindex="-1"><a class="header-anchor" href="#proxyfactory" aria-hidden="true">#</a> ProxyFactory</h2><p>ThrowsAdvice如何选择方法的？</p><p>afterThrowing</p><h2 id="advice" tabindex="-1"><a class="header-anchor" href="#advice" aria-hidden="true">#</a> Advice</h2><p><img src="/images/spring/image-20220515185359398.png" alt="image-20220515185359398"></p><p>advice会形成一条链路，会封装成MethodInterceptor</p><p>代理，适配器，责任链</p><hr><h2 id="proxyfactorybean" tabindex="-1"><a class="header-anchor" href="#proxyfactorybean" aria-hidden="true">#</a> ProxyFactoryBean</h2><p>使用的FactoryBean</p><p>这种方式只能针对某一个 Bean。它是一个FactoryBean，所以利用的就是FactoryBean技术，间接的将UserService的代理对 象作为了Bean</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n\t<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;beforeAdvice&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">public</span> <span class="token class-name">Advice</span> <span class="token function">beforeAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token class-name">BeforeAdvice</span> beforeAdvice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeforeAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> beforeAdvice<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token annotation punctuation">@Bean</span>\n\t<span class="token keyword">public</span> <span class="token class-name">ProxyFactoryBean</span> <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token class-name">ProxyFactoryBean</span> proxyFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tproxyFactoryBean<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tproxyFactoryBean<span class="token punctuation">.</span><span class="token function">setInterceptorNames</span><span class="token punctuation">(</span><span class="token string">&quot;beforeAdvice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> proxyFactoryBean<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="beannameautoproxycreator" tabindex="-1"><a class="header-anchor" href="#beannameautoproxycreator" aria-hidden="true">#</a> BeanNameAutoProxyCreator</h2><p>原理：他是一个BeanPostProcessor</p><p>通过BeanNameAutoProxyCreator可以对批量的Bean进行AOP，并且指定了代理逻辑，指定了一个 InterceptorName，也就是一个Advise，前提条件是这个Advise也得是一个Bean，这样Spring才能 找到的，但是BeanNameAutoProxyCreator的缺点很明显，它只能根据beanName来指定想要代理 的Bean。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\t<span class="token annotation punctuation">@Bean</span>\n\t<span class="token keyword">public</span> <span class="token class-name">BeanNameAutoProxyCreator</span> <span class="token function">beanNameAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token class-name">BeanNameAutoProxyCreator</span> beanNameAutoProxyCreator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanNameAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tbeanNameAutoProxyCreator<span class="token punctuation">.</span><span class="token function">setBeanNames</span><span class="token punctuation">(</span><span class="token string">&quot;userSe*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tbeanNameAutoProxyCreator<span class="token punctuation">.</span><span class="token function">setInterceptorNames</span><span class="token punctuation">(</span><span class="token string">&quot;beforeAdvice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tbeanNameAutoProxyCreator<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> beanNameAutoProxyCreator<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="defaultadvisorautoproxycreator" tabindex="-1"><a class="header-anchor" href="#defaultadvisorautoproxycreator" aria-hidden="true">#</a> DefaultAdvisorAutoProxyCreator</h2><p>仍然是一个BeanPostProcessor，在bean初始化后,spring把所有的Advisor拿出来，使用里面的pointcut来进行比较。</p><p>简化导入bean</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DefaultAdvisorAutoProxyCreator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 简化bean的导入</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>\n\n\t<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;beforeAdvice&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">public</span> <span class="token class-name">Advice</span> <span class="token function">beforeAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token class-name">BeforeAdvice</span> beforeAdvice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeforeAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> beforeAdvice<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token annotation punctuation">@Bean</span>\n\t<span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token string">&quot;beforeAdvice&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">public</span> <span class="token class-name">DefaultPointcutAdvisor</span> <span class="token function">defaultPointcutAdvisor</span><span class="token punctuation">(</span><span class="token class-name">BeforeAdvice</span> beforeAdvice<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token class-name">NameMatchMethodPointcut</span> nameMatchMethodPointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NameMatchMethodPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tnameMatchMethodPointcut<span class="token punctuation">.</span><span class="token function">addMethodName</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token class-name">DefaultPointcutAdvisor</span> advisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//\t\tadvisor.setAdvice(new BeforeAdvice());</span>\n\t\tadvisor<span class="token punctuation">.</span><span class="token function">setAdvice</span><span class="token punctuation">(</span>beforeAdvice<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tadvisor<span class="token punctuation">.</span><span class="token function">setPointcut</span><span class="token punctuation">(</span>nameMatchMethodPointcut<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> advisor<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>通过DefaultAdvisorAutoProxyCreator会直接去找所有Advisor类型的Bean，根据Advisor中的 PointCut和Advice信息，确定要代理的Bean以及代理逻辑。 但是，我们发现，通过这种方式，我们得依靠某一个类来实现定义我们的Advisor，或者Advise，或 者Pointcut，那么这个步骤能不能更加简化一点呢？ 对的，通过注解</p><p>比如我们能不能只定义一个类，然后通过在类中的方法上通过某些注解，来定义PointCut以及 Advice，可以的，比如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhouyuAspect</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public void org.hzz.service.UserService.test())&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过上面这个类，我们就直接定义好了所要代理的方法(通过一个表达式)，以及代理逻辑（被 @Before修饰的方法），简单明了，这样对于Spring来说，它要做的就是来解析这些注解了，解析之 后得到对应的Pointcut对象、Advice对象，生成Advisor对象，扔进ProxyFactory中，进而产生对应 的代理对象，具体怎么解析这些注解就是**@EnableAspectJAutoProxy注解**所要做的事情了</p>',24),e={},p=(0,s(66262).A)(e,[["render",function(n,a){return t}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);