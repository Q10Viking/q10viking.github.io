"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[10190],{89990:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-ffa0def6",path:"/gRPC/02%20protobuf.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/gRPC/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"什么是ProtoBuf",slug:"什么是protobuf",children:[]},{level:2,title:"ProtoBuf协议工作流程",slug:"protobuf协议工作流程",children:[]},{level:2,title:"protobuf定义消息❤️",slug:"protobuf定义消息❤️",children:[{level:3,title:"消息对象",slug:"消息对象",children:[]},{level:3,title:"字段",slug:"字段",children:[]},{level:3,title:"字段修饰符",slug:"字段修饰符",children:[]},{level:3,title:"字段类型",slug:"字段类型",children:[]},{level:3,title:"标识号",slug:"标识号",children:[]}]},{level:2,title:"生成代码❤️",slug:"生成代码❤️",children:[{level:3,title:"序列化原理解析",slug:"序列化原理解析",children:[]}]},{level:2,title:"protobuf定义服务",slug:"protobuf定义服务",children:[]},{level:2,title:"扩展",slug:"扩展",children:[]}],filePathRelative:"gRPC/02 protobuf.md"}},55260:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(20641);const e=(0,p.Fv)('<h2 id="什么是protobuf" tabindex="-1"><a class="header-anchor" href="#什么是protobuf" aria-hidden="true">#</a> 什么是ProtoBuf</h2><p>ProtoBuf(Protocol Buffers)是一种跨平台、语言无关、可扩展的序列化结构数据的方法，可用于网络数据交换及存储。</p><p>在序列化结构化数据的机制中，ProtoBuf是灵活、高效、自动化的，相对常见的XML、JSON，描述同样的信息，ProtoBuf序列化后数据量更小 (在网络中传输消耗的网络流量更少)、序列化/反序列化速度更快、更简单。</p><p><strong>一旦定义了要处理的数据的数据结构之后，就可以利用ProtoBuf的代码生成工具生成相关的代码</strong>。只需使用 Protobuf 对数据结构进行一次描述，即可利用各种不同语言(proto3支持C++, Java, Python, Go, Ruby, Objective-C, C#)或从各种不同流中对你的结构化数据轻松读写。</p><h2 id="protobuf协议工作流程" tabindex="-1"><a class="header-anchor" href="#protobuf协议工作流程" aria-hidden="true">#</a> ProtoBuf协议工作流程</h2><p><img src="/images/grpc/163592231440.png" alt="img"></p><p>在开发 gRPC 应用程序时，先要定义服务接口，其中应包含如下信息：消费者消费服务的方式、消费者能够远程调用的方法以及调用这些方法所使用的参数和消息格式等。在服务定义中所使用的语言叫作<strong>接口定义语言</strong>（interface definition language，IDL）。</p><p>借助服务定义，可以生成服务器端代码，也就是服务器端骨架 （这里的“骨架”和“存根”都是代理。服务器端代理叫作“骨架”（skeleton），客户端代理叫作“存根”（stub）。），它通过提供低层级的通信抽象简化了服务器端的逻辑。同时，还可以生成客户端代码，也就是客户端存根，它使用抽象简化了客户端的通信，为不同的编程语言隐藏了低层级的通信。就像调用本地函数那样，客户端能够远程调用我们在服务接口定义中所指定的方法。底层的 gRPC 框架处理所有的复杂工作，通常包括确保严格的服务契约、数据序列化、网络通信、认证、访问控制、可观察性等。</p><p>为了理解 gRPC 的基本概念，我们来看一个使用 gRPC 实现微服务的实际场景。假设我们正在构建一个在线零售应用程序，该应用程序由多个微服务组成。</p><p>如图 1-1 所示，假设我们要构建一个微服务来展现在线零售应用程序中可售商品的详情。例如，将 <code>ProductInfo</code> 服务建模为 gRPC 服务，通过网络对外暴露。</p><p><img src="/images/grpc/1636103739847-5bc59.png" alt="img"></p><p>服务定义是在 ProductInfo.proto 文件中声明的，服务器端和客户端都会使用该文件来生成代码。这里假设 <code>ProductInfo</code> 服务使用 Go 语言来实现，消费者使用 Java 语言来实现，两者之间的通信则通过 HTTP/2 来进行。</p><p>典型的序列化和反序列化过程往往需要如下组件：</p><ul><li>IDL（Interface description language）文件：参与通讯的各方需要对通讯的内容需要做相关的约定（Specifications）。为了建立一个与语言和平台无关的约定，这个约定需要采用与具体开发语言、平台无关的语言来进行描述。这种语言被称为接口描述语言（IDL），采用IDL撰写的协议约定称之为IDL文件。</li><li>IDL Compiler：IDL文件中约定的内容为了在各语言和平台可见，需要有一个编译器，将IDL文件转换成各语言对应的动态库。</li><li>Stub/Skeleton Lib：负责序列化和反序列化的工作代码。Stub是一段部署在分布式系统客户端的代码，一方面接收应用层的参数，并对其序列化后通过底层协议栈发送到服务端，另一方面接收服务端序列化后的结果数据，反序列化后交给客户端应用层；Skeleton部署在服务端，其功能与Stub相反，从传输层接收序列化参数，反序列化后交给服务端应用层，并将应用层的执行结果序列化后最终传送给客户端Stub。</li><li>Client/Server：指的是应用层程序代码，他们面对的是IDL所生存的特定语言的class或struct。</li><li>底层协议栈和互联网：序列化之后的数据通过底层的传输层、网络层、链路层以及物理层协议转换成数字信号在互联网中传递。</li></ul><blockquote><p>可以看到，对于序列化协议来说，使用方只需要关注业务对象本身，即 idl （Interface description language）定义，序列化和反序列化的代码只需要通过工具生成即可。</p></blockquote><h2 id="protobuf定义消息❤️" tabindex="-1"><a class="header-anchor" href="#protobuf定义消息❤️" aria-hidden="true">#</a> protobuf定义消息❤️</h2><p>在Java 中，构建一个<code>Person类</code>的数据结构，包含成员变量<code>name、id、email</code>等等</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Java类</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Int</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>根据上述数据结构的需求，在demo<code>.proto</code>里 通过 <code>Protocol Buffer</code> 语法写入对应 <code>.proto</code>对象模型的代码</p><blockquote><p>proto2版本</p></blockquote><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code>\n\n<span class="token keyword">package</span> protocobuff_Demo<span class="token punctuation">;</span>\n<span class="token comment">// 关注1：包名,防止不同 .proto 项目间命名 发生冲突</span>\n\n<span class="token keyword">option</span> java_package <span class="token operator">=</span> <span class="token string">&quot;org.hzz.protobuf&quot;</span><span class="token punctuation">;</span><span class="token comment">//// 作用：指定生成的类应该放在什么Java包名下</span>\n<span class="token keyword">option</span> java_outer_classname <span class="token operator">=</span> <span class="token string">&quot;Demo&quot;</span><span class="token punctuation">;</span><span class="token comment">//作用：生成对应.java 文件的类名（不能跟下面message的类名相同）</span>\n<span class="token comment">// 关注2：option选项,作用：影响 特定环境下 的处理方式</span>\n\n<span class="token comment">// 关注3：消息模型 作用：真正用于描述 数据结构</span>\n<span class="token comment">// 下面详细说明</span>\n<span class="token comment">// 生成 Person 消息对象（包含多个字段，下面详细说明）</span>\n<span class="token keyword">message</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token keyword">required</span> <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">required</span> <span class="token builtin">int32</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">optional</span> <span class="token builtin">string</span> email <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">enum</span> <span class="token class-name">PhoneType</span> <span class="token punctuation">{</span>\n    MOBILE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    HOME <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    WORK <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">message</span> <span class="token class-name">PhoneNumber</span> <span class="token punctuation">{</span>\n    <span class="token keyword">required</span> <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">optional</span> <span class="token positional-class-name class-name">PhoneType</span> type <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">[</span><span class="token annotation">default</span> <span class="token operator">=</span> HOME<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">PhoneNumber</span> phone <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">message</span> <span class="token class-name">AddressBook</span> <span class="token punctuation">{</span>\n  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">Person</span> person <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><blockquote><p>proto3版本</p></blockquote><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 协议版本(proto3中，在第一行非空白非注释行，必须写：syntax = &quot;proto3&quot;;)</span>\n<span class="token keyword">package</span> protocobuff_Demo<span class="token punctuation">;</span>\n<span class="token comment">// 关注1：包名,防止不同 .proto 项目间命名 发生冲突</span>\n\n<span class="token keyword">option</span> java_package <span class="token operator">=</span> <span class="token string">&quot;org.hzz.protobuf&quot;</span><span class="token punctuation">;</span><span class="token comment">//// 作用：指定生成的类应该放在什么Java包名下</span>\n<span class="token keyword">option</span> java_outer_classname <span class="token operator">=</span> <span class="token string">&quot;Demo&quot;</span><span class="token punctuation">;</span><span class="token comment">//作用：生成对应.java 文件的类名（不能跟下面message的类名相同）</span>\n<span class="token comment">// 关注2：option选项,作用：影响 特定环境下 的处理方式</span>\n\n<span class="token comment">// 关注3：消息模型 作用：真正用于描述 数据结构</span>\n<span class="token comment">// 下面详细说明</span>\n<span class="token comment">// 生成 Person 消息对象（包含多个字段，下面详细说明）</span>\n<span class="token keyword">message</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n     <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//(proto3消息定义时，移除了 “required”、 “optional” ：)</span>\n     <span class="token builtin">int32</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//(proto3消息定义时，移除了 “required”、 “optional” ：)</span>\n     <span class="token builtin">string</span> email <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//(proto3消息定义时，移除了 “required”、 “optional” ：)</span>\n\n    <span class="token keyword">enum</span> <span class="token class-name">PhoneType</span> <span class="token punctuation">{</span>\n        MOBILE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        HOME <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        WORK <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">message</span> <span class="token class-name">PhoneNumber</span> <span class="token punctuation">{</span>\n        <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token positional-class-name class-name">PhoneType</span> type <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token comment">//(proto3消息定义时,移除了 default 选项：)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">PhoneNumber</span> phone <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">message</span> <span class="token class-name">AddressBook</span> <span class="token punctuation">{</span>\n    <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">Person</span> person <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="消息对象" tabindex="-1"><a class="header-anchor" href="#消息对象" aria-hidden="true">#</a> <strong>消息对象</strong></h3><p>在 <code>ProtocolBuffers</code> 中：</p><ul><li>一个消息对象（<code>Message</code>） = 一个 结构化数据</li><li>消息对象用 修饰符 <code>message</code> 修饰</li><li>消息对象 含有 字段：消息对象（<code>Message</code>）里的 字段 = 结构化数据 里的成员变量</li></ul><h3 id="字段" tabindex="-1"><a class="header-anchor" href="#字段" aria-hidden="true">#</a> 字段</h3><p>消息对象的字段 组成主要是：<strong>字段 = 字段修饰符 + 字段类型 +字段名 +标识号</strong></p><p><img src="/images/grpc/1635930091676-afecab0e-52a8-4b94-8783-079e31013bcf.png" alt="img"></p><h3 id="字段修饰符" tabindex="-1"><a class="header-anchor" href="#字段修饰符" aria-hidden="true">#</a> 字段修饰符</h3><p>作用：设置该字段解析时的规则</p><p><img src="/images/grpc/1635930240413-09e90ef1-48a2-431a-902e-16f1569c7cf0.png" alt="img"></p><h3 id="字段类型" tabindex="-1"><a class="header-anchor" href="#字段类型" aria-hidden="true">#</a> <strong>字段类型</strong></h3><p>字段类型主要有 三 类：</p><ul><li>基本数据 类型</li><li>枚举 类型</li><li>消息对象 类型</li></ul><h4 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h4><p><code>.proto</code>基本数据类型 对应于 各平台的基本数据类型如下</p><p><img src="/images/grpc/1635930641089-85a62711-241f-40a3-8bef-a268b5d84cfd.png" alt="img"></p><h4 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a> <strong>枚举类型</strong></h4><p>用：为字段指定一个 可能取值的字段集合，该字段只能从 该指定的字段集合里 取值</p><p>下面例子，电话号码 可能是手机号、家庭电话号或工作电话号的其中一个，那么就将<code>PhoneType</code>定义为枚举类型，并将加入电话的集合（ <code>MOBILE</code>、 <code>HOME</code>、<code>WORK</code>）</p><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token comment">// 枚举类型需要先定义才能进行使用</span>\n\n<span class="token comment">// 枚举类型 定义</span>\n <span class="token keyword">enum</span> <span class="token class-name">PhoneType</span> <span class="token punctuation">{</span>\n    MOBILE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    HOME <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    WORK <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token comment">// 电话类型字段 只能从 这个集合里 取值</span>\n  <span class="token punctuation">}</span>\n\n<span class="token comment">// 特别注意：</span>\n<span class="token comment">// 1. 枚举类型的定义可在一个消息对象的内部或外部</span>\n<span class="token comment">// 2. 都可以在 同一.proto文件 中的任何消息对象里使用</span>\n<span class="token comment">// 3. 当枚举类型是在一消息内部定义，希望在 另一个消息中 使用时，需要采用MessageType.EnumType的语法格式</span>\n\n  <span class="token keyword">message</span> <span class="token class-name">PhoneNumber</span> <span class="token punctuation">{</span>\n    <span class="token keyword">required</span> <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">optional</span> <span class="token positional-class-name class-name">PhoneType</span> type <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">[</span><span class="token annotation">default</span> <span class="token operator">=</span> HOME<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 使用枚举类型的字段（设置了默认值）</span>\n  <span class="token punctuation">}</span>\n\n<span class="token comment">// 特别注意：</span>\n<span class="token comment">// 1.  枚举常量必须在32位整型值的范围内</span>\n<span class="token comment">// 2. 不推荐在enum中使用负数：因为enum值是使用可变编码方式的，对负数不够高</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="标识号" tabindex="-1"><a class="header-anchor" href="#标识号" aria-hidden="true">#</a> 标识号</h3><p>作用：通过二进制格式唯一标识每个字段</p><ol><li>一旦开始使用就不能够再改变</li><li>标识号使用范围：[1,2的29次方 - 1]</li></ol><p>每个字段在进行编码时都会占用内存，而 占用内存大小 取决于 标识号：</p><ol><li>范围 [1,15] 标识号的字段 在编码时占用1个字节；</li><li>范围 [16,2047] 标识号的字段 在编码时占用2个字节</li></ol><h2 id="生成代码❤️" tabindex="-1"><a class="header-anchor" href="#生成代码❤️" aria-hidden="true">#</a> 生成代码❤️</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 从项目的根路径执行该命令，并添加了两个参数：java_out，定义./src/main/java/为Java代码的输出目录；</span>\nprotoc <span class="token parameter variable">--java_out</span><span class="token operator">=</span>./src/main/java ./demo.proto\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>(编译器为每个.proto文件里的每个消息类型生成一个.java文件&amp;一个Builder类 (Builder类用于创建消息类接口))</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestProto</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 步骤1:通过 消息类的内部类Builder类 构造 消息类的消息构造器</span>\n        <span class="token class-name">Demo<span class="token punctuation">.</span>Person<span class="token punctuation">.</span>Builder</span> personBuilder <span class="token operator">=</span>  <span class="token class-name">Demo<span class="token punctuation">.</span>Person</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 步骤2:设置你想要设置的字段为你选择的值</span>\n        personBuilder<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Lisi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在定义.proto文件时,该字段的字段修饰符是required,所以必须赋值</span>\n        personBuilder<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在定义.proto文件时,该字段的字段修饰符是required,所以必须赋值</span>\n        personBuilder<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;lisi.ho@foxmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在定义.proto文件时,该字段的字段修饰符是optional,所以可赋值 / 不赋值(不赋值时将使用默认值)</span>\n\n        <span class="token class-name">Demo<span class="token punctuation">.</span>Person<span class="token punctuation">.</span>PhoneNumber<span class="token punctuation">.</span>Builder</span> phoneNumber <span class="token operator">=</span>  <span class="token class-name">Demo<span class="token punctuation">.</span>Person<span class="token punctuation">.</span>PhoneNumber</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        phoneNumber<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span> <span class="token class-name">Demo<span class="token punctuation">.</span>Person<span class="token punctuation">.</span>PhoneType</span><span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 直接采用枚举类型里的值进行赋值</span>\n        phoneNumber<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;0157-23443276&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// PhoneNumber消息是嵌套在Person消息里,可以理解为内部类</span>\n        <span class="token comment">// 所以创建对象时要通过外部类来创建</span>\n\n        <span class="token comment">// 步骤3:通过 消息构造器 创建 消息类 对象</span>\n        <span class="token class-name">Demo<span class="token punctuation">.</span>Person</span> person <span class="token operator">=</span> personBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 步骤4:序列化和反序列化消息(两种方式)</span>\n\n        <span class="token comment">/*方式1：直接 序列化 和 反序列化 消息 */</span>\n        <span class="token comment">// a.序列化</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray1 <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 把 person消息类对象 序列化为 byte[]字节数组</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>byteArray1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 查看序列化后的字节流</span>\n\n        <span class="token comment">// b.反序列化</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n\n            <span class="token class-name">Demo<span class="token punctuation">.</span>Person</span> person_Request <span class="token operator">=</span> <span class="token class-name">Demo<span class="token punctuation">.</span>Person</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>byteArray1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 当接收到字节数组byte[] 反序列化为 person消息类对象</span>\n\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person_Request<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person_Request<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person_Request<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 输出反序列化后的消息</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n\n        <span class="token comment">/*方式2：通过输入/ 输出流（如网络输出流） 序列化和反序列化消息 */</span>\n        <span class="token comment">// a.序列化</span>\n        <span class="token class-name">ByteArrayOutputStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n\n            person<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 将消息序列化 并写入 输出流(此处用 ByteArrayOutputStream 代替)</span>\n\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> output<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 通过 输出流 转化成二进制字节流</span>\n\n        <span class="token comment">// b. 反序列化</span>\n        <span class="token class-name">ByteArrayInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 通过 输入流 接收消息流(此处用 ByteArrayInputStream 代替)</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n\n            <span class="token class-name">Demo<span class="token punctuation">.</span>Person</span> person_Request <span class="token operator">=</span> <span class="token class-name">Demo<span class="token punctuation">.</span>Person</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 通过输入流 反序列化 消息</span>\n\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person_Request<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person_Request<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person_Request<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 输出消息</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div><h3 id="序列化原理解析" tabindex="-1"><a class="header-anchor" href="#序列化原理解析" aria-hidden="true">#</a> 序列化原理解析</h3><p>请记住<code>Protocol Buffer</code>的 <strong>三个关于数据存储</strong> 的重要结论：</p><ul><li>结论1： <code>Protocol Buffer</code><strong>将 消息里的每个字段 进行编码后，再利用</strong><code>T - L - V</code> <strong>存储方式 进行数据的存储，最终得到的是一个 二进制字节流</strong></li></ul><p><code>T - L - V</code> 的数据存储方式</p><p>即 <code>Tag - Length - Value</code>，标识 - 长度 - 字段值 存储方式</p><p>以 <strong>标识 - 长度 - 字段值</strong> 表示单个数据，最终将所有数据拼接成一个 <strong>字节流</strong>，从而 实现 数据存储 的功能</p><p>其中 <code>Length</code>可选存储，如 储存<code>Varint</code>编码数据就不需要存储<code>Length</code></p><p><strong>示意图</strong></p><p><img src="/images/grpc/1636008674522-79d7e0c2-0259-424e-9ff0-5d81d46f0b98.png" alt="img"></p><p>优点从上图可知，<code>T - L - V</code>存储方式的优点是</p><ol><li><ol><li>不需要<strong>分隔符</strong> 就能 分隔开<strong>字段</strong>，减少了 <strong>分隔符</strong> 的使用</li><li>各字段 存储得非常紧凑，存储空间利用率非常高</li><li>若 字段没有被设置字段值，那么该字段在序列化时的数据中是完全不存在的，即不需要编码</li></ol></li></ol><ul><li>结论2：<code>Protocol Buffer</code>对于不同数据类型 采用不同的 序列化方式（编码方式 &amp; 数据存储方式），如下图：</li></ul><p><img src="/images/grpc/1636008478634-52a9c152-6f3b-458e-af4c-1fd50bdd92a4.png" alt="img"></p><p>从上表可以看出：</p><ol><li>对于存储<code>Varint</code>编码数据，就不需要存储字节长度 <code>Length</code>，所以实际上<code>Protocol Buffer</code>的存储方式是 <code>T - V</code>；</li><li>若<code>Protocol Buffer</code>采用其他编码方式（如<code>LENGTH_DELIMITED</code>）则采用<code>T - L - V</code></li><li>因为 <code>Protocol Buffer</code>对于数据字段值的 <strong>独特编码方式</strong> &amp; <code>T - L - V</code><strong>数据存储方式</strong>，使得 <code>Protocol Buffer</code>序列化后数据量体积如此小</li></ol><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>Protocol Buffer的序列化 &amp; 反序列化简单 &amp; 速度快的原因是：</p><ol><li>编码 / 解码 方式简单（只需要简单的数学运算 = 位移等等）</li><li>采用 Protocol Buffer 自身的框架代码 和 编译器 共同完成</li></ol><p>Protocol Buffer的数据压缩效果好（即序列化后的数据量体积小）的原因是：</p><ol><li>采用了独特的编码方式，如Varint、Zigzag编码方式等等</li><li>采用T - L - V 的数据存储方式：减少了分隔符的使用 &amp; 数据存储得紧凑</li></ol><hr><h2 id="protobuf定义服务" tabindex="-1"><a class="header-anchor" href="#protobuf定义服务" aria-hidden="true">#</a> protobuf定义服务</h2><p>如果想要将消息类型用在RPC(远程方法调用)系统中，可以在.proto文件中定义一个RPC服务接口，protocol buffer编译器将会根据所选择的不同语言生成服务接口代码及存根。如，想要定义一个RPC服务并具有一个方法，该方法能够接收 SearchRequest并返回一个SearchResponse，此时可以在.proto文件中进行如下定义</p><div class="language-protobuf ext-protobuf line-numbers-mode"><pre class="language-protobuf"><code><span class="token keyword">service</span> <span class="token class-name">SearchService</span> <span class="token punctuation">{</span>\n  <span class="token keyword">rpc</span> <span class="token function">Search</span> <span class="token punctuation">(</span><span class="token class-name">SearchRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">SearchResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2>',76),t={href:"https://colobu.com/2015/01/07/Protobuf-language-guide/",target:"_blank",rel:"noopener noreferrer"},o={href:"https://colobu.com/2017/03/16/Protobuf3-language-guide/",target:"_blank",rel:"noopener noreferrer"},c={},l=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[e,(0,p.Lk)("p",null,[(0,p.Lk)("a",t,[(0,p.eW)("Protobuf2 语法指南"),(0,p.bF)(a)])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("Protobuf3 语法指南"),(0,p.bF)(a)])])],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);