"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[95629],{85356:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4cd21a95",path:"/java/05%20%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/java/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"函数式接口",slug:"函数式接口",children:[]},{level:2,title:"处理抛出异常的if",slug:"处理抛出异常的if",children:[]},{level:2,title:"处理if分支",slug:"处理if分支",children:[{level:3,title:"如果存在值执行消费操作，否则执行基于空的操作",slug:"如果存在值执行消费操作-否则执行基于空的操作",children:[]}]}],filePathRelative:"java/05 函数式接口.md"}},47215:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(20641).Fv)('<h2 id="函数式接口" tabindex="-1"><a class="header-anchor" href="#函数式接口" aria-hidden="true">#</a> 函数式接口</h2><p>使用注解@FunctionalInterface标识，并且只包含一个抽象方法的接口是函数式接口。函数式接口主要分为Supplier供给型函数、Consumer消费型函数、Runnable无参无返回型函数和Function有参有返回型函数</p><blockquote><p>定义一个函数接口</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContainerInitialize</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>实现它</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebServletApplicationContext</span><span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">ServletContainerInitialize</span> <span class="token function">getSelfInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token function">selfInitialize</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selfInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;start up ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>使用</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">WebServletApplicationContext</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ServletContainerInitialize</span> selfInitialize <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getSelfInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        selfInitialize<span class="token punctuation">.</span><span class="token function">onStartUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="处理抛出异常的if" tabindex="-1"><a class="header-anchor" href="#处理抛出异常的if" aria-hidden="true">#</a> 处理抛出异常的if</h2><ol><li><p>定义函数 定义一个抛出异常的形式的函数式接口, 这个接口只有参数没有返回值是个消费型接口</p></li><li><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 抛异常接口\n **/</span>\n<span class="token annotation punctuation">@FunctionalInterface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ThrowExceptionFunction</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * 抛出异常信息\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">message</span> 异常信息\n     * <span class="token keyword">@return</span> void\n     **/</span>\n    <span class="token keyword">void</span> <span class="token function">throwMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>编写判断方法 创建工具类VUtils并创建一个isTure方法，方法的返回值为刚才定义的函数式接口-ThrowExceptionFunction。ThrowExceptionFunction的接口实现逻辑为当参数b为true时抛出异常</p></li><li><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n *  如果参数为true抛出异常\n * \n * <span class="token keyword">@param</span> <span class="token parameter">b</span> \n * <span class="token keyword">@return</span> com.example.demo.func.ThrowExceptionFunction\n **/</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThrowExceptionFunction</span> <span class="token function">isTure</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>使用方式 调用工具类参数参数后，调用函数式接口的throwMessage方法传入异常信息。 当出入的参数为false时正常执行</p></li><li><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 报错</span>\n<span class="token class-name">BeimingUtil</span><span class="token punctuation">.</span><span class="token function">isTure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isthrowMessage</span><span class="token punctuation">(</span><span class="token string">&quot;哎呀，一不小心就报错啦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 不报错</span>\n<span class="token class-name">BeimingUtil</span><span class="token punctuation">.</span><span class="token function">isTure</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isthrowMessage</span><span class="token punctuation">(</span><span class="token string">&quot;哎呀，一不小心就报错啦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h2 id="处理if分支" tabindex="-1"><a class="header-anchor" href="#处理if分支" aria-hidden="true">#</a> 处理if分支</h2><ol><li><p>定义函数式接口 创建一个名为BranchHandle的函数式接口，接口的参数为两个Runnable接口。这两个两个Runnable接口分别代表了为true或false时要进行的操作</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 分支处理接口\n **/</span>\n<span class="token annotation punctuation">@FunctionalInterface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BranchHandle</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * 分支操作\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">trueHandle</span> 为true时要进行的操作\n     * <span class="token keyword">@param</span> <span class="token parameter">falseHandle</span> 为false时要进行的操作\n     * <span class="token keyword">@return</span> void\n     **/</span>\n    <span class="token keyword">void</span> <span class="token function">trueOrFalseHandle</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> trueHandle<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> falseHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>编写判断方法 创建一个工具类VUtils里面有一个名为isTureOrFalse的方法，方法的返回值为刚才定义的函数式接口-BranchHandle</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 参数为true或false时，分别进行不同的操作   \n **/</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BranchHandle</span> <span class="token function">isTureOrFalse</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n    <span class="token keyword">return</span> <span class="token punctuation">(</span>trueHandle<span class="token punctuation">,</span> falseHandle<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            trueHandle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            falseHandle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>使用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 参数为true时，执行trueHandle</span>\n<span class="token class-name">VUtil</span><span class="token punctuation">.</span><span class="token function">isTureOrFalse</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n        \t<span class="token punctuation">.</span>trueorFalseHandle <span class="token punctuation">(</span> trueHandle<span class="token operator">:</span> <span class="token class-name">O</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printin</span><span class="token punctuation">(</span>&quot;<span class="token boolean">true</span>，没毛病”<span class="token punctuation">)</span>；\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>falseHandle<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有毛病&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><h3 id="如果存在值执行消费操作-否则执行基于空的操作" tabindex="-1"><a class="header-anchor" href="#如果存在值执行消费操作-否则执行基于空的操作" aria-hidden="true">#</a> 如果存在值执行消费操作，否则执行基于空的操作</h3><ol><li><p>定义函数 创建一个名为PresentOrElseHandler的函数式接口，接口的参数一个为Consumer接口。一个为Runnable,分别代表值不为空时执行消费操作和值为空时执行的其他操作</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 空值与非空值分支处理\n */</span>\n<span class="token annotation punctuation">@FunctionalInterface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PresentOrElseHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * 值不为空时执行消费操作\n     * 值为空时执行其他的操作\n     * \n     * <span class="token keyword">@param</span> <span class="token parameter">action</span> 值不为空时，执行的消费操作\n     * <span class="token keyword">@param</span> <span class="token parameter">emptyAction</span> 值为空时，执行的操作\n     * <span class="token keyword">@return</span> void    \n     **/</span>\n   <span class="token keyword">void</span> <span class="token function">presentOrElseHandle</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> emptyAction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><p>编写判断方法 创建一个名为isBlankOrNoBlank的方法，方法的返回值为刚才定义的函数式接口-PresentOrElseHandler。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 参数为true或false时，分别进行不同的操作\n *\n * <span class="token keyword">@param</span> <span class="token parameter">b</span>\n * <span class="token keyword">@return</span> com.example.demo.func.BranchHandle\n **/</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PresentOrElseHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">isBlankOrNoBlank</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>consumer<span class="token punctuation">,</span> runnable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>使用方式 调用工具类参数参数后，调用函数式接口的presentOrElseHandle方法传入一个Consumer和Runnable</p></li></ol>',14),e={},t=(0,a(66262).A)(e,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);