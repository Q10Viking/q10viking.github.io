"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[33985],{52768:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-114d6c24",path:"/RocketMQ/07%20%E5%9F%BA%E6%9C%AC%E6%94%B6%E5%8F%91%E6%B6%88%E6%81%AF.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/RocketMQ/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"同步发送",slug:"同步发送",children:[]},{level:2,title:"发送到RocketMQ的体现",slug:"发送到rocketmq的体现",children:[{level:3,title:"主题",slug:"主题",children:[]},{level:3,title:"主题与生产组",slug:"主题与生产组",children:[]},{level:3,title:"消息",slug:"消息",children:[]},{level:3,title:"消息在messagequeue中的分布",slug:"消息在messagequeue中的分布",children:[]}]},{level:2,title:"消费者",slug:"消费者",children:[{level:3,title:"主题下的消息",slug:"主题下的消息",children:[]},{level:3,title:"Consumer1订阅组消费消息的情况",slug:"consumer1订阅组消费消息的情况",children:[]},{level:3,title:"Consumer2订阅组RECONSUME_LATER消费消息的情况",slug:"consumer2订阅组reconsume-later消费消息的情况",children:[]},{level:3,title:"Consumer3订阅组返回null消费消息的情况",slug:"consumer3订阅组返回null消费消息的情况",children:[]}]},{level:2,title:"总结⭐⭐",slug:"总结⭐⭐",children:[]}],filePathRelative:"RocketMQ/07 基本收发消息.md"}},77057:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(20641);const t={class:"custom-container tip"},e=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),c={href:"https://github.com/Q10Viking/learncode/tree/main/RocketMQ/rocket-api/src/main/java/org/hzz/simple",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Fv)('<h2 id="同步发送" tabindex="-1"><a class="header-anchor" href="#同步发送" aria-hidden="true">#</a> 同步发送</h2><p>发送20条消息到RocketMQ的集群，查看效果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;basic_sync_producer_group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">Addr</span><span class="token punctuation">.</span><span class="token constant">NAME_SERVER_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;basic_sync_topic&quot;</span><span class="token punctuation">,</span>\n                    <span class="token string">&quot;hzz_tag&quot;</span><span class="token punctuation">,</span>\n                    <span class="token string">&quot;OrderID188&quot;</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">(</span><span class="token string">&quot;Hello World &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; send &quot;</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Send Over.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="发送到rocketmq的体现" tabindex="-1"><a class="header-anchor" href="#发送到rocketmq的体现" aria-hidden="true">#</a> 发送到RocketMQ的体现</h2><h3 id="主题" tabindex="-1"><a class="header-anchor" href="#主题" aria-hidden="true">#</a> 主题</h3><p><img src="/images/RocketMQ/image-20220607205308943.png" alt="image-20220607205308943"></p><h3 id="主题与生产组" tabindex="-1"><a class="header-anchor" href="#主题与生产组" aria-hidden="true">#</a> 主题与生产组</h3><p><img src="/images/RocketMQ/image-20220607205205276.png" alt="image-20220607205205276"></p><h3 id="消息" tabindex="-1"><a class="header-anchor" href="#消息" aria-hidden="true">#</a> 消息</h3><blockquote><p>topic tag message-key message-id</p></blockquote><p><img src="/images/RocketMQ/image-20220607205629920.png" alt="image-20220607205629920"></p><h3 id="消息在messagequeue中的分布" tabindex="-1"><a class="header-anchor" href="#消息在messagequeue中的分布" aria-hidden="true">#</a> 消息在messagequeue中的分布</h3><p><img src="/images/RocketMQ/image-20220607205906542.png" alt="image-20220607205906542"></p><h4 id="默认四个队列" tabindex="-1"><a class="header-anchor" href="#默认四个队列" aria-hidden="true">#</a> 默认四个队列</h4><blockquote><p>每个broker每个主题下默认是4个队列: <strong>为了提高性能</strong>。 如果只有一个队列，就只能在一个地方先进先出。 现在有多个，就可以在多个地方同时先进先出。 说白了，就是在同一个broker节点，每个topic，都包含多个队列。 默认值是4。</p></blockquote><p><img src="/images/RocketMQ/image-20240325223556795.png" alt="image-20240325223556795"></p><h2 id="消费者" tabindex="-1"><a class="header-anchor" href="#消费者" aria-hidden="true">#</a> 消费者</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PushConsumer</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>\n        <span class="token function">consumer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">consumer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">consumer3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;basic_sync_consumer_group_1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">Addr</span><span class="token punctuation">.</span><span class="token constant">NAME_SERVER_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;basic_sync_topic&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer1-&gt;%s Receive New Messages: %s %n&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Conumser1 started.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;basic_sync_consumer_group_2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">Addr</span><span class="token punctuation">.</span><span class="token constant">NAME_SERVER_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;basic_sync_topic&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer2-&gt;%s Receive New Messages: %s %n&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">RECONSUME_LATER</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Conumser2 started.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;basic_sync_consumer_group_3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">Addr</span><span class="token punctuation">.</span><span class="token constant">NAME_SERVER_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;basic_sync_topic&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer3-&gt;%s Receive New Messages: %s %n&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Conumser3 started.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h3 id="主题下的消息" tabindex="-1"><a class="header-anchor" href="#主题下的消息" aria-hidden="true">#</a> 主题下的消息</h3><p><strong>消息的最小位点仍然没有变</strong></p><p><img src="/images/RocketMQ/image-20220607212014193.png" alt="image-20220607212014193"></p><h3 id="consumer1订阅组消费消息的情况" tabindex="-1"><a class="header-anchor" href="#consumer1订阅组消费消息的情况" aria-hidden="true">#</a> Consumer1订阅组消费消息的情况</h3><p><strong>订阅组有消费消息自己的位点</strong></p><p><img src="/images/RocketMQ/image-20220607212201475.png" alt="image-20220607212201475"></p><h3 id="consumer2订阅组reconsume-later消费消息的情况" tabindex="-1"><a class="header-anchor" href="#consumer2订阅组reconsume-later消费消息的情况" aria-hidden="true">#</a> Consumer2订阅组RECONSUME_LATER消费消息的情况</h3><blockquote><p>虽然消费者2，返回的是ConsumeConcurrentlyStatus.RECONSUME_LATER，但是消费者位点是发生了变化的。只不过与消费者Consumer1不同的是，这些消息都是可再消费，服务器会一直发送消息给Consumer2.如果消费者Consumer2停止，然后再重启，那么这次也还会再收到消息</p></blockquote><p><img src="/images/RocketMQ/image-20220607212311172.png" alt="image-20220607212311172"></p><h3 id="consumer3订阅组返回null消费消息的情况" tabindex="-1"><a class="header-anchor" href="#consumer3订阅组返回null消费消息的情况" aria-hidden="true">#</a> Consumer3订阅组返回null消费消息的情况</h3><blockquote><p>与返回RECONSUME_LATER一样，也会不断重复消费</p></blockquote><h2 id="总结⭐⭐" tabindex="-1"><a class="header-anchor" href="#总结⭐⭐" aria-hidden="true">#</a> 总结⭐⭐</h2><blockquote><p>基本上都是围绕消息主题来进行的。</p></blockquote>',31),u={href:"https://www.processon.com/view/link/629f6625e401fd2930a68f81",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Lk)("p",null,[(0,p.Lk)("img",{src:"/images/RocketMQ/RocketMQ收发消息模型.png",alt:"RocketMQ收发消息模型"})],-1),i={},r=(0,a(66262).A)(i,[["render",function(n,s){const a=(0,p.g2)("OutboundLink"),i=(0,p.g2)("common-progresson-snippet");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",t,[e,(0,p.Lk)("p",null,[(0,p.eW)("代码："),(0,p.Lk)("a",c,[(0,p.eW)("learncode/tree/main/RocketMQ/rocket-api/src/main/java/org/hzz/simple"),(0,p.bF)(a)])])]),o,(0,p.Lk)("p",null,[(0,p.Lk)("a",u,[(0,p.eW)("processon发送消息与接收消息模型图"),(0,p.bF)(a)])]),(0,p.bF)(i,{src:"https://www.processon.com/view/link/629f6625e401fd2930a68f81"}),l],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);