"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[69207],{30818:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-3be7ea5e",path:"/spring/09%20%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%8E%A8%E6%96%AD.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/spring/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"没有@Autowired",slug:"没有-autowired",children:[{level:3,title:"有无参构造方法",slug:"有无参构造方法",children:[]},{level:3,title:"没有无参构造方法",slug:"没有无参构造方法",children:[]}]},{level:2,title:"有@Autowired",slug:"有-autowired",children:[]},{level:2,title:"构造方法推断",slug:"构造方法推断",children:[]},{level:2,title:"源码思路",slug:"源码思路",children:[{level:3,title:"autowireConstructor()",slug:"autowireconstructor",children:[]}]},{level:2,title:"@Bean的情况",slug:"bean的情况",children:[]}],filePathRelative:"spring/09 构造方法推断.md"}},36517:(n,a,s)=>{s.r(a),s.d(a,{default:()=>i});const e=(0,s(20641).Fv)('<h2 id="没有-autowired" tabindex="-1"><a class="header-anchor" href="#没有-autowired" aria-hidden="true">#</a> 没有<code>@Autowired</code></h2><h3 id="有无参构造方法" tabindex="-1"><a class="header-anchor" href="#有无参构造方法" aria-hidden="true">#</a> 有无参构造方法</h3><ul><li>不管还有其他多少个构造方法，spring默认会使用无参的构造方法来进行初始化</li></ul><h3 id="没有无参构造方法" tabindex="-1"><a class="header-anchor" href="#没有无参构造方法" aria-hidden="true">#</a> 没有无参构造方法</h3><ul><li>只有一个有参构造方法，spring会使用该构造方法</li><li>有多个有参构造方法，spring会报错</li></ul><h2 id="有-autowired" tabindex="-1"><a class="header-anchor" href="#有-autowired" aria-hidden="true">#</a> 有<code>@Autowired</code></h2><ul><li>只有一个构造方法有<code>@Autowired(required=true)</code>，那么就会使用该构造方法</li><li>有多个<code>@Autowired(required=true)</code>的构造方法直接抛异常</li><li>有一个<code>@Autowired(required=true)</code>多个<code>@Autowired(required=false)</code>抛异常</li><li>有多个<code>@Autowired(required=false)</code>包括无参构造方法，会选择参数多的。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无参构造方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有参构造方法1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">,</span><span class="token class-name">UserService</span> userService1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// spring会选择这个</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有参构造方法2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="构造方法推断" tabindex="-1"><a class="header-anchor" href="#构造方法推断" aria-hidden="true">#</a> 构造方法推断</h2><p>Spring中的一个bean，需要实例化得到一个对象，而实例化就需要用到构造方法。</p><p>一般情况下，一个类只有一个构造方法：</p><ol><li>要么是无参的构造方法</li><li>要么是有参的构造方法</li></ol><p>如果只有<strong>一个无参</strong>的构造方法，那么实例化就只能使用这个构造方法了。 如果只有<strong>一个有参</strong>的构造方法，那么实例化时能使用这个构造方法吗？要分情况讨论：</p><ol><li>使用AnnotationConfigApplicationContext，会使用这个构造方法进行实例化，那么Spring会根据构造方法的参数信息去寻找bean，然后传给构造方法</li><li>使用ClassPathXmlApplicationContext，表示使用XML的方式来使用bean，要么在XML中指定构造方法的参数值(手动指定)，要么配置<strong>autowire=constructor</strong>让Spring<strong>自动</strong>去寻找bean做为构造方法参数值。</li></ol><p>上面是只有一个构造方法的情况，那么如果有多个构造方法呢？</p><p>又分为两种情况，多个构造方法中存不存在无参的构造方法。</p><p>分析：一个类存在多个构造方法，那么Spring进行实例化之前，该如何去确定到底用哪个构造方法呢？</p><ol><li>如果开发者指定了想要使用的构造方法，那么就用这个构造方法</li><li>如果开发者没有指定想要使用的构造方法，则看开发者有没有让Spring自动去选择构造方法</li><li>如果开发者也没有让Spring自动去选择构造方法，则Spring利用无参构造方法，如果没有无参构造方法，则报错</li></ol><p>针对第一点，开发者可以通过什么方式来指定使用哪个构造方法呢？</p><ol><li>xml中的<code>&lt;constructor-arg&gt;</code>标签，这个标签表示构造方法参数，所以可以根据这个确定想要使用的构造方法的参数个数，从而确定想要使用的构造方法</li><li>通过<code>@Autowired</code>注解，<code>@Autowired</code>注解可以写在构造方法上，所以哪个构造方法上写了@Autowired注解，表示开发者想使用哪个构造方法，当然，它和第一个方式的不同点是，通过xml的方式，我们直接指定了构造方法的参数值，而通过@Autowired注解的方式，需要Spring通过byType+byName的方式去找到符合条件的bean作为构造方法的参数值</li></ol><p>再来看第二点，如果开发者没有指定想要使用的构造方法，则看开发者有没有让Spring自动去选择构造方法，对于这一点，只能用在ClassPathXmlApplicationContext，因为通过AnnotationConfigApplicationContext没有办法去指定某个bean可以自动去选择构造方法，而通过ClassPathXmlApplicationContext可以在xml中指定某个bean的autowire为constructor，虽然这个属性表示通过构造方法自动注入，所以需要自动的去选择一个构造方法进行自动注入，因为是构造方法，所以顺便是进行实例化。</p><p>当然，还有一种情况，就是多个构造方法上写了@Autowired注解，那么此时Spring会报错。 但是，因为@Autowired还有一个属性required，默认为ture，所以一个类中，只有能一个构造方法标注了@Autowired或@Autowired（required=true），有多个会报错。但是可以有多个@Autowired（required=false）,这种情况下，需要Spring从这些构造方法中去自动选择一个构造方法。</p><h2 id="源码思路" tabindex="-1"><a class="header-anchor" href="#源码思路" aria-hidden="true">#</a> 源码思路</h2><ol><li>AbstractAutowireCapableBeanFactory类中的createBeanInstance()方法会去创建一个Bean实例</li><li>根据BeanDefinition加载类得到Class对象</li><li>如果BeanDefinition绑定了一个Supplier，那就调用Supplier的get方法得到一个对象并直接返回</li><li>如果BeanDefinition中存在<strong>factoryMethodName</strong>，那么就<strong>调用该工厂方法</strong>得到一个bean对象并返回</li><li>如果BeanDefinition已经自动构造过了，那就调用autowireConstructor()自动构造一个对象</li><li>调用SmartInstantiationAwareBeanPostProcessor的determineCandidateConstructors()方法得到哪些构造方法是可以用的</li><li>如果存在可用得构造方法，或者当前BeanDefinition的autowired是AUTOWIRE_CONSTRUCTOR，或者BeanDefinition中指定了构造方法参数值，或者创建Bean的时候指定了构造方法参数值，那么就调用**autowireConstructor()**方法自动构造一个对象</li><li>最后，如果不是上述情况，就根据无参的构造方法实例化一个对象</li></ol><h3 id="autowireconstructor" tabindex="-1"><a class="header-anchor" href="#autowireconstructor" aria-hidden="true">#</a> <strong>autowireConstructor()</strong></h3><ol><li><p>先检查是否指定了具体的构造方法和构造方法参数值，或者在BeanDefinition中缓存了具体的构造方法或构造方法参数值，如果存在那么则直接使用该构造方法进行实例化</p></li><li><p>如果没有确定的构造方法或构造方法参数值，那么</p><ol><li>如果没有确定的构造方法，那么则找出类中所有的构造方法</li><li>如果只有一个无参的构造方法，那么直接使用无参的构造方法进行实例化</li><li>如果有多个可用的构造方法或者当前Bean需要自动通过构造方法注入</li><li>根据所指定的构造方法参数值，确定所需要的最少的构造方法参数值的个数</li><li>对所有的构造方法进行排序，参数个数多的在前面</li><li>遍历每个构造方法</li><li>如果不是调用getBean方法时所指定的构造方法参数值，那么则根据构造方法参数类型找值</li><li>如果时调用getBean方法时所指定的构造方法参数值，就直接利用这些值</li><li>如果根据当前构造方法找到了对应的构造方法参数值，那么这个构造方法就是可用的，但是不一定这个构造方法就是最佳的，所以这里会涉及到是否有多个构造方法匹配了同样的值，这个时候就会用值和构造方法类型进行匹配程度的打分，找到一个最匹配的</li></ol></li></ol><h2 id="bean的情况" tabindex="-1"><a class="header-anchor" href="#bean的情况" aria-hidden="true">#</a> @Bean的情况</h2><p>首先，Spring会把@Bean修饰的方法解析成BeanDefinition：</p><ol><li>如果方法是static的，那么解析出来的BeanDefinition中： <ol><li>factoryBeanName为AppConfig所对应的beanName，比如&quot;appConfig&quot;</li><li>factoryMethodName为对应的方法名，比如&quot;aService&quot;</li><li>factoryClass为AppConfig.class</li></ol></li><li>如果方法不是static的，那么解析出来的BeanDefinition中： <ol><li>factoryBeanName为null</li><li>factoryMethodName为对应的方法名，比如&quot;aService&quot;</li><li>factoryClass也为AppConfig.class</li></ol></li></ol>',29),t={},i=(0,s(66262).A)(t,[["render",function(n,a){return e}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);