"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[58266],{96095:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-ecefc510",path:"/Redis/46%20%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%EF%BC%88%E5%93%88%E5%B8%8C%E7%8E%AF%EF%BC%89.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"背景",slug:"背景",children:[]},{level:2,title:"一致性哈希（哈希环）",slug:"一致性哈希-哈希环",children:[]},{level:2,title:"实现",slug:"实现",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"Redis/46 一致性哈希算法（哈希环）.md"}},94655:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var p=a(20641);const t=(0,p.Fv)('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>通过对 key 进行哈希，然后再用哈希值对节点个数取模，即可寻址到对应的服务器。</p><p>比如查询名为 key-01 的 key，计算公式是 hash(&quot;key-01&quot;) % 3 ，经过计算寻址到了编号为 0 的服务器节点 A，如下图所示。</p><p><img src="/images/Redis/image-20240319210835334.png" alt="image-20240319210835334"></p><p>不难发现，哈希算法非常简单直观，如果选择一个好的哈希函数，是可以让数据均匀分布的。但哈希算法有一个致命的缺点，就是它无法满足节点动态变化。比如节点数量发生变化，基于新的节点数量来执行哈希算法的时候，就会出现路由寻址失败的情况，Proxy 无法寻址到之前的服务器节点。</p><p>想象一下，假如 3 个节点不能满足业务需要了，我们增加了一个节点，节点的数量从 3 变成 4。那么之前的 hash(&quot;key-01&quot;) % 3 = 0，就变成了 hash(&quot;key-01&quot;) % 4 = X。</p><p>因为取模运算发生了变化，所以这个 X 大概率不是 0（假设 X 为 1），这时再查询，就会找不到数据了。因为 key-01 对应的数据，存储在节点 A 上，而不是节点 B。</p><p><img src="/images/Redis/image-20240319210951991.png" alt="image-20240319210951991"></p><p>同样的道理，如果我们需要下线 1 个服务器节点，也会存在类似的可能查询不到数据的问题。</p><p>而解决这个问题的办法在于我们要迁移数据，基于新的计算公式 hash(&quot;key-01&quot;) % 4，来重新对数据和节点做映射。但需要注意的是，数据的迁移成本是非常高的，对于 3 节点 KV 存储，如果我们增加 1 个节点，变为 4 节点集群，则需要迁移 75% 的数据。</p><p>所以哈希算法适用于节点配置相同，并且节点数量固定的场景。如果节点会动态变化，那么应该选择一致性哈希算法。</p><h2 id="一致性哈希-哈希环" tabindex="-1"><a class="header-anchor" href="#一致性哈希-哈希环" aria-hidden="true">#</a> 一致性哈希（哈希环）</h2><p>一致性哈希也是基于哈希实现的，哈希算法是对节点的数量进行取模运算，而一致性哈希算法是对 2^32 进行取模运算。想象一下，一致性哈希算法将整个哈希值空间组织成一个虚拟的圆环，也就是哈希环：</p><p><img src="/images/Redis/image-20240319211105031.png" alt="image-20240319211105031"></p><p>哈希环的空间按顺时针方向组织，圆环的正上方的点代表 0，0 右侧的第一个点代表 1，以此类推，2、3、4、5、6……直到 2^32-1。</p><p>在一致性哈希中，你可以通过执行哈希算法，将节点映射到哈希环上。比如选择节点的主机名作为参数执行哈希再取模，那么就能确定每个节点在哈希环上的位置了。</p><p><img src="/images/Redis/image-20240319211132430.png" alt="image-20240319211132430"></p><p>当需要对指定 key 的值进行读写的时候，可以通过下面两步进行寻址：</p><ul><li>首先，对 key 进行哈希再取模，并确定此 key 在环上的位置。</li><li>然后，从该位置沿着哈希环顺时针行走，遇到的第一个节点就是 key 对应的节点。</li></ul><p>我们举个例子，假设 key-01、key-02、key-03 三个 key，经过哈希取模后，在哈希环中的位置如下：</p><p><img src="/images/Redis/image-20240319211159915.png" alt="image-20240319211159915"></p><p>根据一致性哈希算法，key-01 寻址到节点 B，key-02 寻址到节点 A，key-03 寻址到节点 C。如果只考虑数据分布的话，那么一致性哈希算法和哈希算法差别不太大，但一致性哈希解决了节点变化带来的数据迁移问题。</p><p>假设，现在有一个节点故障了（比如节点 C）：</p><p><img src="/images/Redis/image-20240319211229733.png" alt="image-20240319211229733"></p><p>可以看到，key-01 和 key-02 不会受到影响，只有 key-03 的寻址被重定位到 A。一般来说，在一致性哈希算法中，如果某个节点宕机不可用了，那么受影响的数据仅仅是故障节点和前一节点之间的数据。</p><p>比如当节点 C 宕机了，受影响的数据是节点 B 和节点 C 之间的数据（例如 key-03），寻址到其它哈希环空间的数据（例如 key-01），不会受到影响。</p><p>如果此时集群不能满足业务的需求，需要扩容一个节点 D 呢？</p><p><img src="/images/Redis/image-20240319211259117.png" alt="image-20240319211259117"></p><p>可以看到 key-01、key-02 不受影响，只有 key-03 的寻址被重定位到新节点 D。一般而言，在一致性哈希算法中，如果增加一个节点，受影响的数据仅仅是新节点和前一节点之间的数据，其它数据也不会受到影响。</p><p>使用一致性哈希的话，对于 3 节点 KV 存储，如果我们增加 1 个节点，变为 4 节点集群，则只需要迁移 24.3% 的数据。迁移的数据量仅为使用哈希算法时的三分之一，从而大大提升效率。</p><p>总的来说，使用了一致性哈希算法后，扩容或缩容的时候，都只需要重定位环空间中的一小部分数据。所以一致性哈希算法是对哈希算法的改进，在采用哈希方式确定数据存储位置的基础上，又增加了一层哈希，也就是在数据存储前先对存储节点进行哈希，具有较好的容错性和可扩展性</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p>一个节点映射为三个节点</p><p><img src="/images/Redis/image-20240319215158818.png" alt="image-20240319215158818"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashRing</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> ring <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> virtualNodes<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HashRing</span><span class="token punctuation">(</span><span class="token keyword">int</span> virtualNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>virtualNodes <span class="token operator">=</span> virtualNodes<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token class-name">T</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> virtualNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 使用节点和虚拟节点索引的组合作为键</span>\n            <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">&quot;node-&quot;</span> <span class="token operator">+</span> node <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ring<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ring<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 得到大于该Hash值的所有Map</span>\n        <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tmpMap <span class="token operator">=</span> ring<span class="token punctuation">.</span><span class="token function">tailMap</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>tmpMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 形成闭环</span>\n            <span class="token keyword">return</span> ring<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ring<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 第一个Key就是顺时针过去离node最近的那个结点</span>\n        <span class="token class-name">Long</span> firstKey <span class="token operator">=</span> tmpMap<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> tmpMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>firstKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 使用FNV1_32_HASH算法计算服务器的Hash值\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">16777619</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">2166136261L</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n            hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">^</span> key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>\n        hash <span class="token operator">+=</span> hash <span class="token operator">&lt;&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span>\n        hash <span class="token operator">^=</span> hash <span class="token operator">&gt;&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span>\n        hash <span class="token operator">+=</span> hash <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>\n        hash <span class="token operator">^=</span> hash <span class="token operator">&gt;&gt;</span> <span class="token number">17</span><span class="token punctuation">;</span>\n        hash <span class="token operator">+=</span> hash <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>\n        <span class="token comment">// 如果算出来的值为负数则取其绝对值</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n            hash <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> hash<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HashRing</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashRing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashRing</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3个虚拟节点</span>\n        hashRing<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.135.130&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        hashRing<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.135.131&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> key1 <span class="token operator">=</span> <span class="token string">&quot;Key1&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> node1 <span class="token operator">=</span> hashRing<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能会返回&quot;Node1&quot;或&quot;Node2&quot;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> key2 <span class="token operator">=</span> <span class="token string">&quot;hzz&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> node2 <span class="token operator">=</span> hashRing<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能会返回另一个节点</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * 192.168.135.130\n * 我执行了\n * 192.168.135.131\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',36),e={href:"http://www.360doc.com/content/23/1020/08/1100863080_1100863080.shtml",target:"_blank",rel:"noopener noreferrer"},o={},c=(0,a(66262).A)(o,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("一致性哈希算法介绍"),(0,p.bF)(a)])])],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);