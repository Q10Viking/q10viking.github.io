"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[14019],{11172:(e,i,a)=>{a.r(i),a.d(i,{data:()=>l});const l={key:"v-384da44a",path:"/rabbitmq/18%20%E6%B6%88%E6%81%AF%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/rabbitmq/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"什么情况会导致消息被重复消费呢",slug:"什么情况会导致消息被重复消费呢",children:[]},{level:2,title:"解决方案",slug:"解决方案",children:[{level:3,title:"使用数据库唯一键约束",slug:"使用数据库唯一键约束",children:[]}]},{level:2,title:"",slug:"",children:[]},{level:2,title:"使用乐观锁",slug:"使用乐观锁",children:[{level:3,title:"什么是消息幂等性",slug:"什么是消息幂等性",children:[]},{level:3,title:"消息幂等性保障--乐观锁机制",slug:"消息幂等性保障-乐观锁机制",children:[]},{level:3,title:"简单的消息去重，插入消费记录，增加数据库判断",slug:"简单的消息去重-插入消费记录-增加数据库判断",children:[]}]},{level:2,title:"并发消息去重基于消息幂等表",slug:"并发消息去重基于消息幂等表",children:[]}],filePathRelative:"rabbitmq/18 消息重复消费问题.md"}},59475:(e,i,a)=>{a.r(i),a.d(i,{default:()=>t});const l=(0,a(20641).Fv)('<h2 id="什么情况会导致消息被重复消费呢" tabindex="-1"><a class="header-anchor" href="#什么情况会导致消息被重复消费呢" aria-hidden="true">#</a> 什么情况会导致消息被重复消费呢</h2><ol><li>生产者：生产者可能会重复推送一条数据到 MQ 中，比如 Controller 接口被重复调用了 2 次，没有做接口幂等性导致的；</li><li>MQ：在消费者消费完准备响应 ack 消息消费成功时，MQ 突然挂了，导致 MQ 以为消费者还未消费该条数据，MQ 恢复后再次推送了该条消息，导致了重复消费。</li><li>消费者：消费者已经消费完消息，正准备但是还未响应给ack消息到时，此时消费者挂了，服务重启后 MQ 以为消费者还没有消费该消息，再次推送了该条消息</li></ol><p><img src="/images/RabbitMQ/image-20240325174015077.png" alt="image-20240325174015077"></p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><h3 id="使用数据库唯一键约束" tabindex="-1"><a class="header-anchor" href="#使用数据库唯一键约束" aria-hidden="true">#</a> 使用数据库唯一键约束</h3><p>缺点：局限性很大，<strong>仅仅只能用在我们数据新增场景</strong>，并且性能也比较低</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h2 id="使用乐观锁" tabindex="-1"><a class="header-anchor" href="#使用乐观锁" aria-hidden="true">#</a> 使用乐观锁</h2><h3 id="什么是消息幂等性" tabindex="-1"><a class="header-anchor" href="#什么是消息幂等性" aria-hidden="true">#</a> 什么是消息幂等性</h3><p>幂等性指一次和多次请求某一个资源，对于资源本身应该具有同样的结果。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p><p><strong>在MQ中指，消费多条相同的消息，得到与消费该消息一次相同的结果。</strong></p><h3 id="消息幂等性保障-乐观锁机制" tabindex="-1"><a class="header-anchor" href="#消息幂等性保障-乐观锁机制" aria-hidden="true">#</a> 消息幂等性保障--乐观锁机制</h3><p><strong>在发送的消息的时候带上修改字段的版本号</strong></p><p><img src="/images/RabbitMQ/image-20211031092623945.png" alt="image-20211031092623945"></p><h3 id="简单的消息去重-插入消费记录-增加数据库判断" tabindex="-1"><a class="header-anchor" href="#简单的消息去重-插入消费记录-增加数据库判断" aria-hidden="true">#</a> 简单的消息去重，插入消费记录，增加数据库判断</h3><p><img src="/images/RabbitMQ/image-20240325174404685.png" alt="image-20240325174404685"></p><p>优点：很多场景下的确能起到不错的效果</p><p>缺点：</p><ol><li>这个消费者的代码执行需要1秒，重复消息在执行期间（假设100毫秒）内到达（例如生产者快速重发，Broker重启等），增加校验的地方是不是还是没数据（因为上一条消息还没消费完，没有记录）</li><li>那么就会穿透掉检查的挡板，最后导致重复的消息消费逻辑进入到非幂等安全的业务代码中，从而引发重复消费的问题</li></ol><h2 id="并发消息去重基于消息幂等表" tabindex="-1"><a class="header-anchor" href="#并发消息去重基于消息幂等表" aria-hidden="true">#</a> 并发消息去重基于消息幂等表</h2><p><img src="/images/RabbitMQ/image-20240325175121395.png" alt="image-20240325175121395"></p><ul><li>缺点：如果说第一次消息投递异常没有消费成功，并且没有将消息状态给置为成功或者没有删除消息表记录，此时延时消费每次执行下列都是一直处于消费中，最后消费就会被视为消费失败而被投递到死信Topic中</li><li>方案：插入的消息表必须要带一个最长消费过期时间，例如10分钟</li></ul><p><img src="/images/RabbitMQ/image-20240325175201292.png" alt="image-20240325175201292"></p><ul><li><p>上述方案<strong>只需要一个存储的中心媒介，那我们可以选择更灵活的存储中心媒介，比如Redis</strong>。使用Redis有两个好处：</p></li><li><ul><li>性能上损耗更低</li><li>上面我们讲到的超时时间可以直接利用Redis本身的ttl实现</li></ul></li></ul>',24),r={},t=(0,a(66262).A)(r,[["render",function(e,i){return l}]])},66262:(e,i)=>{i.A=(e,i)=>{const a=e.__vccOpts||e;for(const[e,l]of i)a[e]=l;return a}}}]);