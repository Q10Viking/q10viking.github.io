"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[71187],{11178:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0fb7412c",path:"/Algorithm/79%20%E6%90%9C%E7%B4%A2%E5%8D%95%E8%AF%8D.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Algorithm/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"回溯深度搜索",slug:"回溯深度搜索",children:[]}],filePathRelative:"Algorithm/79 搜索单词.md"}},10874:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(20641);const t={class:"custom-container tip"},o=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),e={href:"https://leetcode.cn/problems/word-search/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Fv)('<h2 id="回溯深度搜索" tabindex="-1"><a class="header-anchor" href="#回溯深度搜索" aria-hidden="true">#</a> 回溯深度搜索</h2><p>需要处理访问的元素，防止出现死循环。只要字符不相等那么就直接返回false</p><p><img src="/images/algorithm/word2.jpg" alt="img"></p><p>首先遍历 board 的所有元素，先找到和 word 第一个字母相同的元素，假设这个元素的坐标为 (i, j)，然后进入递归流程。进入递归流程前，把该元素打上已使用标记。</p><p>递归里则从当前元素出发，朝它的上下左右试探（是不是只能按上下左右的顺序？这个其实是无所谓的），看看它周边的这四个元素是否能匹配 word 的下一个字母，如果匹配到了，继续进入下一个元素的试探，如果某个元素的上下左右都不能匹配，返回 False，并进行回溯。当然如果 word 的所有字母都匹配到了，整个流程返回 True。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">exist</span><span class="token punctuation">(</span>\n                <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>\n                        <span class="token punctuation">{</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;B&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;C&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">{</span><span class="token char">&#39;S&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;F&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;C&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;S&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">{</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;D&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;E&#39;</span><span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;ABCCED&quot;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> xMax <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>yMax <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n        <span class="token comment">// 记录被访问过的位置</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> viewed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>yMax<span class="token punctuation">]</span><span class="token punctuation">[</span>xMax<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> yMax<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> xMax<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 一个个遍历</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>viewed<span class="token punctuation">,</span>word<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">board</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">viewed</span> 代表被访问过的位置\n     * <span class="token keyword">@param</span> <span class="token parameter">word</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">x</span> 以为数组的长度\n     * <span class="token keyword">@param</span> <span class="token parameter">y</span> 二维数组的长度\n     * <span class="token keyword">@param</span> <span class="token parameter">pos</span> 当前要处理的字符串的位置。\n     * <span class="token keyword">@return</span>\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>board<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> viewed<span class="token punctuation">,</span><span class="token class-name">String</span> word<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">int</span> xMax <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>yMax <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n        <span class="token comment">// 边界判断</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> xMax <span class="token operator">||</span> x <span class="token operator">&lt;</span> <span class="token number">0</span>\n                <span class="token operator">||</span> y <span class="token operator">&gt;=</span> yMax <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">&gt;=</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 匹配的字符不相同，或者已经被访问过</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token operator">!=</span> board<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">||</span> viewed<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token comment">// 字符已经匹配完成</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 当表访问过</span>\n        viewed<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token comment">// 上,下，左，右</span>\n        <span class="token keyword">boolean</span> exist <span class="token operator">=</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>viewed<span class="token punctuation">,</span>word<span class="token punctuation">,</span> x<span class="token punctuation">,</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n                <span class="token operator">||</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>viewed<span class="token punctuation">,</span>word<span class="token punctuation">,</span> x<span class="token punctuation">,</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n                <span class="token operator">||</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>viewed<span class="token punctuation">,</span>word<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n                <span class="token operator">||</span>  <span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>viewed<span class="token punctuation">,</span>word<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 恢复</span>\n        viewed<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> exist<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//  true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div>',6),l={},u=(0,a(66262).A)(l,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",t,[o,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("79. 单词搜索"),(0,p.bF)(a)])])]),c],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);