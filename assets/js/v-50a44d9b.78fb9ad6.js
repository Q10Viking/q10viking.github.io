"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[41213],{47101:(s,a,n)=>{n.r(a),n.d(a,{data:()=>e});const e={key:"v-50a44d9b",path:"/MySQL/12%20orderby%E4%BC%98%E5%8C%96.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"order by工作原理",slug:"order-by工作原理",children:[{level:3,title:"全字段排序",slug:"全字段排序",children:[]},{level:3,title:"rowid排序",slug:"rowid排序",children:[]},{level:3,title:"使用联合索引进行优化",slug:"使用联合索引进行优化",children:[]},{level:3,title:"使用覆盖索引优化",slug:"使用覆盖索引优化",children:[]}]},{level:2,title:"Order by与Group by优化",slug:"order-by与group-by优化",children:[]},{level:2,title:"case 1",slug:"case-1",children:[]},{level:2,title:"case 2",slug:"case-2",children:[]},{level:2,title:"case 3",slug:"case-3",children:[]},{level:2,title:"case 4",slug:"case-4",children:[]},{level:2,title:"case 5",slug:"case-5",children:[]},{level:2,title:"case 6",slug:"case-6",children:[]},{level:2,title:"case 7",slug:"case-7",children:[]},{level:2,title:"case 8",slug:"case-8",children:[]},{level:2,title:"优化总结",slug:"优化总结",children:[]},{level:2,title:"filesort文件排序方式",slug:"filesort文件排序方式",children:[]}],filePathRelative:"MySQL/12 orderby优化.md"}},89913:(s,a,n)=>{n.r(a),n.d(a,{default:()=>t});const e=(0,n(20641).Fv)('<h2 id="order-by工作原理" tabindex="-1"><a class="header-anchor" href="#order-by工作原理" aria-hidden="true">#</a> order by工作原理</h2><p>假设你要查询城市是“杭州”的所有人名字，并且按照姓名排序返回前 1000 个人的姓名、年龄</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>addr<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> city<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">where</span> city<span class="token operator">=</span><span class="token string">&#39;杭州&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">limit</span> <span class="token number">1000</span> <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="全字段排序" tabindex="-1"><a class="header-anchor" href="#全字段排序" aria-hidden="true">#</a> 全字段排序</h3><p><img src="/images/MySQL/image-20230509223336436.png" alt="image-20230509223336436"></p><p>Extra 这个字段中的“Using filesort”表示的就是需要排序，MySQL 会给每个线程分配一块内存用于排序，称为 sort_buffer</p><p><img src="/images/MySQL/image-20230509223414968.png" alt="image-20230509223414968"></p><p>这个语句执行流程如下所示 ：</p><ol><li>初始化 sort_buffer，确定放入 name、city、age 这三个字段；</li><li>从索引 city 找到第一个满足 city=&#39;杭州’条件的主键 id，也就是图中的 ID_X；</li><li>到主键 id 索引取出整行，取 name、city、age 三个字段的值，存入 sort_buffer 中；</li><li>从索引 city 取下一个记录的主键 id；</li><li>重复步骤 3、4 直到 city 的值不满足查询条件为止，对应的主键 id 也就是图中的 ID_Y；</li><li>对 sort_buffer 中的数据按照字段 name 做快速排序；</li><li>按照排序结果取前 1000 行返回给客户端。</li></ol><p>我们暂且把这个排序过程，称为全字段排序</p><p><img src="/images/MySQL/image-20230509223519670.png" alt="image-20230509223519670"></p><p>“按 name 排序”这个动作，可能在内存中完成，也可能需要使用外部排序(临时文件)，这取决于排序所需的内存和参数 sort_buffer_size</p><h3 id="rowid排序" tabindex="-1"><a class="header-anchor" href="#rowid排序" aria-hidden="true">#</a> rowid排序</h3><p>在上面这个算法过程里面，只对原表的数据读了一遍，剩下的操作都是在 sort_buffer 和临时文件中执行的。但这个算法有一个问题，就是如果查询要返回的字段很多的话，那么 sort_buffer 里面要放的字段数太多，这样内存里能够同时放下的行数很少，要分成很多个临时文件，排序的性能会很差。</p><p>所以如果单行很大，这个方法效率不够好</p><p>max_length_for_sort_data，是 MySQL 中专门控制用于排序的行数据的长度的一个参数。它的意思是，如果单行的长度超过这个值，MySQL 就认为单行太大，要换一个算法。</p><p>city、name、age 这三个字段的定义总长度是 36，我把 max_length_for_sort_data 设置为 16，我们再来看看计算过程有什么改变。</p><p>新的算法放入 sort_buffer 的字段，只有要排序的列（即 name 字段）和主键 id。</p><p>排序的结果就因为少了 city 和 age 字段的值，不能直接返回了，整个执行流程就变成如下所示的样子：</p><ol><li>初始化 sort_buffer，确定放入两个字段，即 name 和 id；</li><li>从索引 city 找到第一个满足 city=&#39;杭州’条件的主键 id，也就是图中的 ID_X；</li><li>到主键 id 索引取出整行，取 name、id 这两个字段，存入 sort_buffer 中；</li><li>从索引 city 取下一个记录的主键 id；</li><li>重复步骤 3、4 直到不满足 city=&#39;杭州’条件为止，也就是图中的 ID_Y；</li><li>对 sort_buffer 中的数据按照字段 name 进行排序；</li><li>遍历排序结果，取前 1000 行，并按照 id 的值回到原表中取出 city、name 和 age 三个字段返回给客户端。</li></ol><p>这个执行流程的示意图如下，我把它称为 rowid 排序。</p><p><img src="/images/MySQL/image-20230509223849375.png" alt="image-20230509223849375"></p><h3 id="使用联合索引进行优化" tabindex="-1"><a class="header-anchor" href="#使用联合索引进行优化" aria-hidden="true">#</a> 使用联合索引进行优化</h3><p>如果能够保证从 city 这个索引上取出来的行，天然就是按照 name 递增排序的话，是不是就可以不用再排序了呢</p><p>可以在这个市民表上创建一个 city 和 name 的联合索引，对应的 SQL 语句是</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> t <span class="token keyword">add</span> <span class="token keyword">index</span> city_user<span class="token punctuation">(</span>city<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20230509224107211.png" alt="image-20230509224107211"></p><p>在这个索引里面，我们依然可以用树搜索的方式定位到第一个满足 city=&#39;杭州’的记录，并且额外确保了，接下来按顺序取“下一条记录”的遍历过程中，只要 city 的值是杭州，name 的值就一定是有序的。</p><p>这样整个查询过程的流程就变成了：</p><ol><li>从索引 (city,name) 找到第一个满足 city=&#39;杭州’条件的主键 id；</li><li>到主键 id 索引取出整行，取 name、city、age 三个字段的值，作为结果集的一部分直接返回；</li><li>从索引 (city,name) 取下一个记录主键 id；</li><li>重复步骤 2、3，直到查到第 1000 条记录，或者是不满足 city=&#39;杭州’条件时循环结束</li></ol><p><img src="/images/MySQL/image-20230509224225525.png" alt="image-20230509224225525"></p><p>可以看到，这个查询过程不需要临时表，也不需要排序。接下来，我们用 explain 的结果来印证一下。</p><p><img src="/images/MySQL/image-20230509224322269.png" alt="image-20230509224322269"></p><p>Extra 字段中没有 Using filesort 了，也就是不需要排序了。因为 (city,name) 这个联合索引本身有序</p><h3 id="使用覆盖索引优化" tabindex="-1"><a class="header-anchor" href="#使用覆盖索引优化" aria-hidden="true">#</a> 使用覆盖索引优化</h3><p><strong>覆盖索引是指，索引上的信息足够满足查询请求，不需要再回到主键索引上去取数据。</strong></p><p>按照覆盖索引的概念，我们可以再优化一下这个查询语句的执行流程。</p><p>针对这个查询，我们可以创建一个 city、name 和 age 的联合索引，对应的 SQL 语句就是</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> t <span class="token keyword">add</span> <span class="token keyword">index</span> city_user_age<span class="token punctuation">(</span>city<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这时，对于 city 字段的值相同的行来说，还是按照 name 字段的值递增排序的，此时的查询语句也就不再需要排序了。这样整个查询语句的执行流程就变成了：</p><ol><li>从索引 (city,name,age) 找到第一个满足 city=&#39;杭州’条件的记录，取出其中的 city、name 和 age 这三个字段的值，作为结果集的一部分直接返回；</li><li>从索引 (city,name,age) 取下一个记录，同样取出这三个字段的值，作为结果集的一部分直接返回；</li><li>重复执行步骤 2，直到查到第 1000 条记录，或者是不满足 city=&#39;杭州’条件时循环结束</li></ol><p><img src="/images/MySQL/image-20230509224556144.png" alt="image-20230509224556144"></p><p>然后，我们再来看看 explain 的结果。</p><p><img src="/images/MySQL/image-20230509224651104.png" alt="image-20230509224651104"></p><p>可以看到，Extra 字段里面多了“Using index”，表示的就是使用了覆盖索引，性能上会快很多。</p><p>当然，这里并不是说要为了每个查询能用上覆盖索引，就要把语句中涉及的字段都建上联合索引，毕竟索引还是有维护代价的。这是一个需要权衡的决定</p><h2 id="order-by与group-by优化" tabindex="-1"><a class="header-anchor" href="#order-by与group-by优化" aria-hidden="true">#</a> <strong>Order by与Group by优化</strong></h2><h2 id="case-1" tabindex="-1"><a class="header-anchor" href="#case-1" aria-hidden="true">#</a> case 1</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;LiLei&#39;</span> <span class="token operator">and</span> position<span class="token operator">=</span><span class="token string">&#39;dev&#39;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027180626737.png" alt="image-20211027180626737"></p><p>利用最左前缀法则：中间字段不能断，因此查询用到了name索引，从key_len=74也能看出，age索引列用在排序过程中，因为Extra字段里没有using filesort</p><h2 id="case-2" tabindex="-1"><a class="header-anchor" href="#case-2" aria-hidden="true">#</a> case 2</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;LiLei&#39;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> position<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027180839402.png" alt="image-20211027180839402"></p><p>从explain的执行结果来看：key_len=74，查询使用了name索引，由于用了position进行排序，跳过了age，出现了Using filesort。</p><h2 id="case-3" tabindex="-1"><a class="header-anchor" href="#case-3" aria-hidden="true">#</a> case 3</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;LiLei&#39;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">,</span>position<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027181052233.png" alt="image-20211027181052233"></p><p>查找只用到索引name，age和position没用于排序，无Using filesort。</p><h2 id="case-4" tabindex="-1"><a class="header-anchor" href="#case-4" aria-hidden="true">#</a> case 4</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;LiLei&#39;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> position<span class="token punctuation">,</span>age<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027181156066.png" alt="image-20211027181156066"></p><p>和Case 3中explain的执行结果一样，但是出现了Using filesort，因为索引的创建顺序为name,age,position，但是排序的时候age和position颠倒位置了。</p><h2 id="case-5" tabindex="-1"><a class="header-anchor" href="#case-5" aria-hidden="true">#</a> case 5</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;LiLei&#39;</span> <span class="token operator">and</span> age<span class="token operator">=</span><span class="token string">&#39;18&#39;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> position<span class="token punctuation">,</span>age<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027181408834.png" alt="image-20211027181408834"></p><p>与Case 4对比，在Extra中并未出现Using filesort，因为age为常量，在排序中被优化，所以索引未颠倒，不会出现Using filesort。</p><h2 id="case-6" tabindex="-1"><a class="header-anchor" href="#case-6" aria-hidden="true">#</a> case 6</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;zhuge&#39;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">ASC</span><span class="token punctuation">,</span>position <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027181604998.png" alt="image-20211027181604998"></p><p>然排序的字段列与索引顺序一样，且order by默认升序，这里position desc变成了降序，导致与索引的排序方式不同，从而产生Using filesort</p><h2 id="case-7" tabindex="-1"><a class="header-anchor" href="#case-7" aria-hidden="true">#</a> case 7</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;zhuge&#39;</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">,</span>position<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027182213478.png" alt="image-20211027182213478"></p><p>对于排序来说，多个相等条件也是范围查询</p><h2 id="case-8" tabindex="-1"><a class="header-anchor" href="#case-8" aria-hidden="true">#</a> case 8</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">&gt;</span><span class="token string">&#39;a&#39;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027182619247.png" alt="image-20211027182619247"></p><p>可以用覆盖索引优化</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">&gt;</span><span class="token string">&#39;a&#39;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027182707655.png" alt="image-20211027182707655"></p><h2 id="优化总结" tabindex="-1"><a class="header-anchor" href="#优化总结" aria-hidden="true">#</a> 优化总结</h2><ol><li>MySQL支持两种方式的排序<strong>filesort和index</strong>，Using index是指MySQL扫描索引本身完成排序。index效率高，filesort效率低。</li><li>order by满足两种情况会使用Using index。 <ol><li><strong>order by语句使用索引最左前列</strong></li><li><strong>使用where子句与order by子句条件列组合满足索引最左前列</strong>。</li></ol></li><li>尽量在索引列上完成排序，遵循索引建立（索引创建的顺序）时的最左前缀法则</li><li>如果order by的条件不在索引列上，就会产生Using filesort</li><li>能用覆盖索引尽量用覆盖索引</li><li>group by与order by很类似，其实质是先排序后分组，遵照索引创建顺序的最左前缀法则。对于group by的优化如果不需要排序的可以加上<strong>order by null禁止排序</strong>。注意，where高于having，能写在where中的限定条件就不要去having限定了。</li></ol><h2 id="filesort文件排序方式" tabindex="-1"><a class="header-anchor" href="#filesort文件排序方式" aria-hidden="true">#</a> <strong>filesort文件排序方式</strong></h2><ul><li><strong>单路排序</strong>：是一次性取出满足条件行的所有字段，然后在sort buffer中进行排序；用trace工具可以看到sort_mode信息里显示&lt; sort_key, additional_fields &gt;或者&lt; sort_key, packed_additional_fields &gt;</li><li><strong>双路排序</strong>（又叫<strong>回表</strong>排序模式）：是首先根据相应的条件取出相应的<strong>排序字段</strong>和<strong>可以直接定位行数据的行 ID</strong>，然后在 sort buffer 中进行排序，排序完后需要再次取回其它需要的字段；用trace工具可以看到sort_mode信息里显示&lt; sort_key, rowid &gt;</li></ul><p>MySQL 通过比较系统变量 max_length_for_sort_data(<strong>默认1024字节</strong>) 的大小和需要查询的字段总大小来判断使用哪种排序模式。</p><ul><li>如果 字段的总长度小于max_length_for_sort_data ，那么使用 单路排序模式；</li><li>如果 字段的总长度大于max_length_for_sort_data ，那么使用 双路排序模·式</li></ul>',88),p={},t=(0,n(66262).A)(p,[["render",function(s,a){return e}]])},66262:(s,a)=>{a.A=(s,a)=>{const n=s.__vccOpts||s;for(const[s,e]of a)n[s]=e;return n}}}]);