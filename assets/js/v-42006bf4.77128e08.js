"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[66012],{50928:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-42006bf4",path:"/Docker/09%20docker%E8%99%9A%E6%8B%9F%E5%8C%96%E5%8E%9F%E7%90%86.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Docker/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Docker虚拟化原理",slug:"docker虚拟化原理",children:[]},{level:2,title:"Docker是如何将机器的资源进行隔离的",slug:"docker是如何将机器的资源进行隔离的",children:[{level:3,title:"写时复制 (CoW) 技术详解",slug:"写时复制-cow-技术详解",children:[]},{level:3,title:"用时分配 （allocate-on-demand）",slug:"用时分配-allocate-on-demand",children:[]}]},{level:2,title:"docker中的镜像分层技术的原理",slug:"docker中的镜像分层技术的原理",children:[{level:3,title:"查看容器资源使用情况",slug:"查看容器资源使用情况",children:[]}]}],filePathRelative:"Docker/09 docker虚拟化原理.md"}},96729:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const e=(0,a(20641).Fv)('<h2 id="docker虚拟化原理" tabindex="-1"><a class="header-anchor" href="#docker虚拟化原理" aria-hidden="true">#</a> <strong>Docker虚拟化原理</strong></h2><p><img src="/images/Docker/docker-yuanli.png" alt="https://note.youdao.com/yws/public/resource/42384826563c36cddfa032983505bd0d/xmlnote/6B7FD54F37644A8F82AEB5B048A8F18A/90517"></p><p>传统虚拟化和容器技术结构比较：传统虚拟化技术是在硬件层面实现虚拟化，增加了系统调用链路的环节，有性能损耗；容器虚拟化技术以共享宿主机Kernel的方式实现，几乎没有性能损耗</p><p>docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。避免了寻址、加载操作系统内核这些比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,这个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了这个过程,因此新建一个docker容器只需要几秒钟</p><p><img src="/images/Docker/91325.png" alt="https://note.youdao.com/yws/public/resource/42384826563c36cddfa032983505bd0d/xmlnote/A385072D91A54B5CA8B7B09F126C7983/91325"></p><h2 id="docker是如何将机器的资源进行隔离的" tabindex="-1"><a class="header-anchor" href="#docker是如何将机器的资源进行隔离的" aria-hidden="true">#</a> <strong>Docker是如何将机器的资源进行隔离的</strong></h2><p>答案是<strong>联合文件系统</strong>，常见的有AUFS、Overlay、devicemapper、BTRFS和ZFS等。</p><p>以Overlay2举例说明，Overlay2的架构图如下：</p><p><img src="/images/Docker/90521.png" alt="https://note.youdao.com/yws/public/resource/42384826563c36cddfa032983505bd0d/xmlnote/59FDA5A6F1AB4C6280714BD225DEFC31/90521"></p><p>原理：overlayfs在linux主机上只有两层，一个目录在下层，用来保存镜像(docker)，另外一个目录在上层，用来存储容器信息。在overlayfs中，底层的目录叫做lowerdir，顶层的目录称之为upperdir，对外提供统一的文件系统为merged。当需要修改一个文件时，使用**COW(Copy-on-write)**将文件从只读的Lower复制到可写的Upper进行修改，结果也保存在Upper层。在Docker中，底下的只读层就是image，可写层就是Container。</p><hr><h3 id="写时复制-cow-技术详解" tabindex="-1"><a class="header-anchor" href="#写时复制-cow-技术详解" aria-hidden="true">#</a> <strong>写时复制 (CoW) 技术详解</strong></h3><p>所有驱动都用到的技术—写时复制，Cow全称copy-on-write，表示只是在需要写时才去复制，这个是<strong>针对已有文件的修改场景</strong>。比如基于一个image启动多个Container，如果每个Container都去分配一个image一样的文件系统，那么将会占用大量的磁盘空间。而CoW技术可以让所有的容器共享image的文件系统，所有数据都从image中读取，只有当要对文件进行写操作时，才从image里把要写的文件复制到自己的文件系统进行修改。所以无论有多少个容器共享一个image，所做的写操作都是对从image中复制到自己的文件系统的副本上进行，并不会修改image的源文件，且多个容器操作同一个文件，会在每个容器的文件系统里生成一个副本，每个容器修改的都是自己的副本，互相隔离，互不影响。使用CoW可以有效的提高磁盘的利用率。<strong>所以容器占用的空间是很少的</strong></p><hr><p><strong>查看容器占用磁盘大小指令</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 查看所有容器的大小</span>\n<span class="token builtin class-name">cd</span> /var/lib/docker/containers  <span class="token comment"># 进入docker容器存储目录</span>\n<span class="token function">du</span> <span class="token parameter variable">-sh</span> *  <span class="token comment"># 查看所有容器的大小</span>\n<span class="token function">du</span> <span class="token parameter variable">-sh</span> <span class="token operator">&lt;</span>容器完整id<span class="token operator">&gt;</span>  <span class="token comment">#查看某一个容器的大小</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="用时分配-allocate-on-demand" tabindex="-1"><a class="header-anchor" href="#用时分配-allocate-on-demand" aria-hidden="true">#</a> <strong>用时分配 （allocate-on-demand）</strong></h3><p>用时分配是<strong>针对原本没有这个文件的场景</strong>，只有在要新写入一个文件时才分配空间，这样可以提高存储资源的利用率。比如启动一个容器，并不会因为这个容器分配一些磁盘空间，而是当有新文件写入时，才按需分配新空间。</p><h2 id="docker中的镜像分层技术的原理" tabindex="-1"><a class="header-anchor" href="#docker中的镜像分层技术的原理" aria-hidden="true">#</a> <strong>docker中的镜像分层技术的原理</strong></h2><p>docker使用共享技术减少镜像存储空间，所有镜像层和容器层都保存在宿主机的文件系统**/var/lib/docker/<strong>中，由存储驱动进行管理，尽管存储方式不尽相同，但在所有版本的Docker中都可以</strong>共享镜像层**。在下载镜像时，Docker Daemon会检查镜像中的镜像层与宿主机文件系统中的镜像层进行对比，如果存在则不下载，只下载不存在的镜像层，这样可以非常<strong>节约存储空间</strong>。</p><p>​ <img src="/images/Docker/91330.png" alt="0"></p><p><img src="/images/Docker/90515.png" alt="https://note.youdao.com/yws/public/resource/42384826563c36cddfa032983505bd0d/xmlnote/B511FA5B4C274E0EB87630C53CE3A369/90515"></p><h3 id="查看容器资源使用情况" tabindex="-1"><a class="header-anchor" href="#查看容器资源使用情况" aria-hidden="true">#</a> <strong>查看容器资源使用情况</strong></h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> stats  <span class="token comment"># 返回容器资源的实时使用情况，1秒刷新一次</span>\n<span class="token function">docker</span> stats --no-stream  <span class="token comment"># 返回容器当时的资源使用情况</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>CONTAINER ID   NAME               CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O   PIDS\n6180a4fd4a11   heuristic_newton   <span class="token number">0.00</span>%     <span class="token number">9</span>.508MiB / <span class="token number">19</span>.44GiB   <span class="token number">0.05</span>%     <span class="token number">1</span>.32kB / 0B   0B / 0B     <span class="token number">13</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>CONTAINER<span class="token punctuation">]</span>：以短格式显示容器的 ID。\n\n<span class="token punctuation">[</span>CPU %<span class="token punctuation">]</span>：CPU 的使用情况。\n\n<span class="token punctuation">[</span>MEM USAGE / LIMIT<span class="token punctuation">]</span>：当前使用的内存和最大可以使用的内存。\n\n<span class="token punctuation">[</span>MEM %<span class="token punctuation">]</span>：以百分比的形式显示内存使用情况。\n\n<span class="token punctuation">[</span>NET I/O<span class="token punctuation">]</span>：网络 I/O 数据。\n\n<span class="token punctuation">[</span>BLOCK I/O<span class="token punctuation">]</span>：磁盘 I/O 数据。 \n\n<span class="token punctuation">[</span>PIDS<span class="token punctuation">]</span>：PID 号。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>注意：容器的内存使用最大限制默认可以接近宿主机的物理内存，可以通过&quot;-m&quot;参数限制容器可以使用的最大内存</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-m</span> 500M redis   <span class="token comment">#限制容器的最大使用内存为500M</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',28),r={},o=(0,a(66262).A)(r,[["render",function(n,s){return e}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);