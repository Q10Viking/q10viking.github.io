"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[41751],{46762:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-e04bffea",path:"/JVM/09%20%E5%AF%B9%E8%B1%A1%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/JVM/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"对象栈上分配",slug:"对象栈上分配",children:[]},{level:2,title:"对象逃逸分析",slug:"对象逃逸分析",children:[]},{level:2,title:"标量替换",slug:"标量替换",children:[]},{level:2,title:"标量与聚合量",slug:"标量与聚合量",children:[]},{level:2,title:"栈上分配示例",slug:"栈上分配示例",children:[{level:3,title:"堆发生大量GC的验证",slug:"堆发生大量gc的验证",children:[]},{level:3,title:"使用jmap查看实例的对象",slug:"使用jmap查看实例的对象",children:[]}]}],filePathRelative:"JVM/09 对象逃逸分析.md"}},81718:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(20641);const e=(0,p.Fv)('<h2 id="对象栈上分配" tabindex="-1"><a class="header-anchor" href="#对象栈上分配" aria-hidden="true">#</a> <strong>对象栈上分配</strong></h2><p>我们通过<strong>JVM内存分配可以知道JAVA中的对象都是在堆上进行分配</strong>，当对象没有被引用的时候，需要依靠GC进行回收内存，如果对象数量较多的时候，<strong>会给GC带来较大压力</strong>，也间接影响了应用的性能。</p><p>为了减少临时对象在堆内分配的数量，JVM通过<strong>逃逸分析</strong>确定该对象不会被外部访问。如果不会逃逸可以将该对象在<strong>栈上分配</strong>内存，这样该对象所占用的内存空间就可以随栈帧出栈而销毁，就<strong>减轻了垃圾回收的压力</strong>。</p><h2 id="对象逃逸分析" tabindex="-1"><a class="header-anchor" href="#对象逃逸分析" aria-hidden="true">#</a> 对象逃逸分析</h2>',4),t={href:"https://q10viking.github.io/concurrency/15%20Synchronized%E4%BC%98%E5%8C%96.html",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Fv)('<p><strong>对象逃逸分析</strong>：就是分析对象动态作用域，当一个对象在方法中被定义后，<strong>它可能被外部方法所引用</strong>，例如作为调用参数传递到其他地方中</p><blockquote><p>很显然test1方法中的user对象被返回了，这个对象的作用域范围不确定，test2方法中的user对象我们可以确定当方法结束这个对象就可以认为是无效对象了，对于这样的对象我们其实可以将其分配在栈内存里，让其在方法结束时跟随栈内存一起被回收掉</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;zhuge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment">//TODO 保存到数据库</span>\n   <span class="token keyword">return</span> user<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;zhuge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment">//TODO 保存到数据库</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>JVM对于这种情况可以通过开启逃逸分析参数<code>(-XX:+DoEscapeAnalysis</code>)来<strong>优化对象内存分配位置</strong>，使其通过<strong>标量替换</strong>优先分配在栈上(<strong>栈上分配</strong>)</p><p>如果要关闭使用参数<code>(-XX:-DoEscapeAnalysis</code>)</p><p>使用逃逸分析，编译器可以对代码做如下优化：</p><ol><li>同步省略。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步</li><li>将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配</li><li>分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中</li></ol><h2 id="标量替换" tabindex="-1"><a class="header-anchor" href="#标量替换" aria-hidden="true">#</a> 标量替换</h2><p>通过逃逸分析确定该对象不会被外部访问，并且对象可以被进一步分解时，<strong>JVM不会创建该对象</strong>，而是将<strong>该对象成员变量分解若干个被这个方法使用的成员变量所代替</strong>，这些代替的<strong>成员变量在栈帧或寄存器上分配空间，这样就不会因为没有一大块连续空间导致对象内存不够分配</strong></p><p>开启标量替换参数(<code>-XX:+EliminateAllocations</code>)，<strong>JDK7之后默认开启</strong>。</p><h2 id="标量与聚合量" tabindex="-1"><a class="header-anchor" href="#标量与聚合量" aria-hidden="true">#</a> <strong>标量与聚合量</strong></h2><ol><li>标量即不可被进一步分解的量，而JAVA的基本数据类型就是标量（如：int，long等基本数据类型以及reference类型等）</li><li>标量的对立就是可以被进一步分解的量，而这种量称之为聚合量。而在<strong>JAVA中对象</strong>就是可以被进一步分解的聚合量。</li></ol><h2 id="栈上分配示例" tabindex="-1"><a class="header-anchor" href="#栈上分配示例" aria-hidden="true">#</a> 栈上分配示例</h2><h3 id="堆发生大量gc的验证" tabindex="-1"><a class="header-anchor" href="#堆发生大量gc的验证" aria-hidden="true">#</a> 堆发生大量GC的验证</h3><p><strong>结论：栈上分配依赖于逃逸分析和标量替换</strong></p><p>是不是所有的对象和数组都会在堆内存分配空间？<strong>不一定</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>gc</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 栈上分配，标量替换\n * 代码调用了1亿次alloc()，如果是分配到堆上，大概需要1GB以上堆空间，如果堆空间小于该值，必然会触发GC。\n *\n * 使用如下参数不会发生GC\n * -Xmx15m -Xms15m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations\n * 使用如下参数都会发生大量GC 第一个没有开启逃逸分析，第二个虽然开启了逃逸分析，但是没有开启标量替换功能\n * -Xmx15m -Xms15m -XX:-DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations  \n * -Xmx15m -Xms15m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:-EliminateAllocations\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllotOnStack</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;zhuge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="使用jmap查看实例的对象" tabindex="-1"><a class="header-anchor" href="#使用jmap查看实例的对象" aria-hidden="true">#</a> 使用jmap查看实例的对象</h3><p>在本案例中将堆分配很大为4G,<strong>防止GC回收实例，方便验证</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">T0_ObjectStackAlloc</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * 进行两种测试\n     * 关闭逃逸分析，同时调大堆空间，避免堆内GC的发生，如果有GC信息将会被打印出来\n     * VM运行参数：-Xmx4G -Xms4G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails -XX:+HeapDumpOnOutOfMemoryError\n     *\n     * 开启逃逸分析\n     * VM运行参数：-Xmx4G -Xms4G -XX:+DoEscapeAnalysis -XX:+PrintGCDetails -XX:+HeapDumpOnOutOfMemoryError\n     *\n     * 执行main方法后\n     * jps 查看进程\n     * jmap -histo 进程ID\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//查看执行时间</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;cost-time &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;over&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TulingStudent</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//Jit对编译时会对代码进行 逃逸分析</span>\n        <span class="token comment">//并不是所有对象存放在堆区，有的一部分存在线程栈空间</span>\n        <span class="token class-name">TulingStudent</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TulingStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> student<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TulingStudent</span> <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>\n        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>在关闭逃逸分析时，在堆上实打实创建了500000个实例</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> num     <span class="token comment">#instances         #bytes  class name</span>\n----------------------------------------------\n   <span class="token number">1</span>:           <span class="token number">671</span>       <span class="token number">70415008</span>  <span class="token punctuation">[</span>I\n   <span class="token number">2</span>:        <span class="token number">500000</span>       <span class="token number">12000000</span>  com.yg.edu.T0_ObjectStackAlloc<span class="token variable">$TulingStudent</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在开启逃逸分析时，在堆上只创建了155679个实例</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> num     #instances         #bytes  <span class="token keyword">class</span> name\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>\n   <span class="token number">1</span><span class="token operator">:</span>           <span class="token number">671</span>       <span class="token number">78678760</span>  <span class="token punctuation">[</span><span class="token class-name">I</span>\n   <span class="token number">2</span><span class="token operator">:</span>        <span class="token number">155679</span>        <span class="token number">3736296</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yg<span class="token punctuation">.</span>edu<span class="token punctuation">.</span></span>T0_ObjectStackAlloc</span>$<span class="token class-name">TulingStudent</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',24),c={},l=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[e,(0,p.Lk)("p",null,[(0,p.Lk)("a",t,[(0,p.eW)("JVM对Synchronized优化"),(0,p.bF)(a)])]),o],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);