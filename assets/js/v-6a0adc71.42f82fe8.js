"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[38821],{2336:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6a0adc71",path:"/JVM/23%20%E5%B8%B8%E9%87%8F%E6%B1%A0.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/JVM/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"常量池",slug:"常量池",children:[]},{level:2,title:"常量池存储在JVM的哪块区域",slug:"常量池存储在jvm的哪块区域",children:[]}],filePathRelative:"JVM/23 常量池.md"}},10030:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(20641).Fv)('<h2 id="常量池" tabindex="-1"><a class="header-anchor" href="#常量池" aria-hidden="true">#</a> 常量池</h2><p>是一种用于存储<strong>常量值、符号引用和字面量</strong>的数据结构，主要用于<strong>提高代码的效率和减少内存消耗</strong>。</p><ul><li>对于<strong>类级别的常量池</strong>，它存储在<strong>类文件class</strong>中</li><li>对于运行时常量池，它存储在<strong>内存</strong>中，用于支持类加载后的运行时解析。常量池中的数据项是<strong>不可改变</strong>的，一旦创建就不能修改。常量池中的数据项是<strong>唯一</strong>的，相同的常量值或符号引用在常量池中只会出现一次。</li></ul><p><img src="/images/java/M6Ly9ibG9nLmNzZG4ubmV0.png" alt="这里写图片描述"></p><p>常量池允许多个类或方法共享相同的常量值，减少了内存占用。在运行时，Java虚拟机会根据符号引用在常量池中查找对应的实际信息，如类、方法、字段等</p><p><strong>字符串常量池</strong>也是常量池的一个重要部分，用于存储<strong>字符串字面量</strong>。字符串常量池中的字符串是唯一的，相同内容的字符串在池中只有一个副本。字符串常量池的优化提高了字符串的比较效率，例如使用**equals()**方法比较字符串时，可以直接比较引用。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConst</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">CONST_A</span> <span class="token operator">=</span> <span class="token string">&quot;the const b&quot;</span><span class="token punctuation">;</span><span class="token comment">// 编译时放入常量池</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> const_b<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> const_b_i<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> const_b_ii<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Float</span> const_b_f<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TestConst</span> testConst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestConst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        testConst<span class="token punctuation">.</span>const_b <span class="token operator">=</span> <span class="token string">&quot;the const b&quot;</span><span class="token punctuation">;</span><span class="token comment">// 运行时放入常量池</span>\n        testConst<span class="token punctuation">.</span>const_b_i <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">// 运行时放入常量池</span>\n\n        testConst<span class="token punctuation">.</span>const_b_ii <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">// 超过127，所以不会放入常量池</span>\n        testConst<span class="token punctuation">.</span>const_b_f <span class="token operator">=</span> <span class="token number">2.0f</span><span class="token punctuation">;</span><span class="token comment">// 浮点包装器不放入常量池</span>\n\n        <span class="token class-name">String</span> const_c <span class="token operator">=</span> <span class="token string">&quot;the const b&quot;</span><span class="token punctuation">;</span><span class="token comment">// 运行时放入常量池</span>\n        <span class="token class-name">Integer</span> const_c_i <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">// 运行时放入常量池</span>\n\n        <span class="token class-name">Integer</span> const_c_ii <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">// 超过127，所以不会放入常量池</span>\n        <span class="token class-name">Float</span> const_c_f <span class="token operator">=</span> <span class="token number">2.0f</span><span class="token punctuation">;</span><span class="token comment">// 浮点包装器不放入常量池</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">CONST_A</span> <span class="token operator">==</span> const_c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">CONST_A</span> <span class="token operator">==</span> testConst<span class="token punctuation">.</span>const_b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testConst<span class="token punctuation">.</span>const_b <span class="token operator">==</span> const_c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testConst<span class="token punctuation">.</span>const_b_i <span class="token operator">==</span> const_c_i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testConst<span class="token punctuation">.</span>const_b_ii <span class="token operator">==</span> const_c_ii<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testConst<span class="token punctuation">.</span>const_b_f <span class="token operator">==</span> const_c_f<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n*/</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h2 id="常量池存储在jvm的哪块区域" tabindex="-1"><a class="header-anchor" href="#常量池存储在jvm的哪块区域" aria-hidden="true">#</a> 常量池存储在JVM的哪块区域</h2><p>常量池一般存储在JVM的<strong>方法区(或者元空间)</strong>。</p><p>但是字符串常量池比较特殊，不同JDK版本存储位置有点不同，拿Java 8来说，字符串常量池是存储在<strong>堆内存</strong>中的，用于存储字符串字面量。这是一个特殊的堆内存区域，用于提高字符串操作的效率和节省内存。字符串常量池中的字符串是唯一的，相同的字符串字面量在常量池中只有一个副本。</p>',10),t={},e=(0,a(66262).A)(t,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);