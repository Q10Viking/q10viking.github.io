"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[98985],{74941:(e,t,i)=>{i.r(t),i.d(t,{data:()=>a});const a={key:"v-77815bf9",path:"/minifrontendproject/0001%20%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/minifrontendproject/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"对于前端理解和思考",slug:"对于前端理解和思考",children:[{level:3,title:"UI设计",slug:"ui设计",children:[]},{level:3,title:"数据",slug:"数据",children:[]},{level:3,title:"技术体系",slug:"技术体系",children:[]}]}],filePathRelative:"minifrontendproject/0001 前端的一些思考.md"}},896:(e,t,i)=>{i.r(t),i.d(t,{default:()=>l});const a=(0,i(20641).Fv)('<h2 id="对于前端理解和思考" tabindex="-1"><a class="header-anchor" href="#对于前端理解和思考" aria-hidden="true">#</a> 对于前端理解和思考</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在开发这些小demo的过程中，逐渐认识了前端的相关技术体系和编程方式，将自己临时的感悟记录下来</p></div><h3 id="ui设计" tabindex="-1"><a class="header-anchor" href="#ui设计" aria-hidden="true">#</a> UI设计</h3><p>首先界面的UI设计，html+css基本上就能够构建UI界面了。但是为了提高用户更好的交互体验。使用javascript技术来操作DOM元素。使得界面的内容能够改变。在技术视角看来就是操作DOM元素。DOM元素的添加和删除，DOM元素的属性（其中样式部分的更新是重点）</p><h3 id="数据" tabindex="-1"><a class="header-anchor" href="#数据" aria-hidden="true">#</a> 数据</h3><p>仅仅有界面还不够，还需要处理提供给用户的数据以及用户在UI界面端操作产生的数据。</p><p>这些数据主要有有如下分类</p><ol><li>单纯的字符信息，如用户登录提交的信息</li><li>文件数据：主要是图片（如用户上传的文件图片）</li><li>多媒体信息：音乐，视频等</li></ol><h3 id="技术体系" tabindex="-1"><a class="header-anchor" href="#技术体系" aria-hidden="true">#</a> 技术体系</h3><p>从最原始的html css javascript开发到对程序员更友好的html scss typescript。</p><p>从单纯的几个文件到webpack工程管理。而前端框架Vue的出现，更加丰富了生态圈。如Vite的出现。提供了更加快捷方便构建前端工程的方式。</p>',11),r={},l=(0,i(66262).A)(r,[["render",function(e,t){return a}]])},66262:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,a]of t)i[e]=a;return i}}}]);