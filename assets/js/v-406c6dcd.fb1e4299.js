"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[36570],{35089:(s,n,a)=>{a.r(n),a.d(n,{data:()=>p});const p={key:"v-406c6dcd",path:"/MySQL/26%20%E9%9A%8F%E6%9C%BA%E6%9F%A5%E8%AF%A2.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"随机查询三个单词",slug:"随机查询三个单词",children:[{level:3,title:"内存临时表",slug:"内存临时表",children:[]}]},{level:2,title:"随机排序方法",slug:"随机排序方法",children:[]}],filePathRelative:"MySQL/26 随机查询.md"}},16605:(s,n,a)=>{a.r(n),a.d(n,{default:()=>o});const p=(0,a(20641).Fv)('<h2 id="随机查询三个单词" tabindex="-1"><a class="header-anchor" href="#随机查询三个单词" aria-hidden="true">#</a> 随机查询三个单词</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> CREATE TABLE <span class="token variable"><span class="token variable">`</span>words<span class="token variable">`</span></span> <span class="token punctuation">(</span>\n  <span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span> int<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT,\n  <span class="token variable"><span class="token variable">`</span>word<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> DEFAULT NULL,\n  PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token assign-left variable">ENGINE</span><span class="token operator">=</span>InnoDB<span class="token punctuation">;</span>\n \ndelimiter <span class="token punctuation">;</span><span class="token punctuation">;</span>\ncreate procedure idata<span class="token punctuation">(</span><span class="token punctuation">)</span>\nbegin\n  <span class="token builtin class-name">declare</span> i int<span class="token punctuation">;</span>\n  <span class="token builtin class-name">set</span> <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token number">10000</span> <span class="token keyword">do</span>\n    insert into words<span class="token punctuation">(</span>word<span class="token punctuation">)</span> values<span class="token punctuation">(</span>concat<span class="token punctuation">(</span>char<span class="token punctuation">(</span><span class="token number">97</span>+<span class="token punctuation">(</span>i div <span class="token number">1000</span><span class="token punctuation">))</span>, char<span class="token punctuation">(</span><span class="token number">97</span>+<span class="token punctuation">(</span>i % <span class="token number">1000</span> div <span class="token number">100</span><span class="token punctuation">))</span>, char<span class="token punctuation">(</span><span class="token number">97</span>+<span class="token punctuation">(</span>i % <span class="token number">100</span> div <span class="token number">10</span><span class="token punctuation">))</span>, char<span class="token punctuation">(</span><span class="token number">97</span>+<span class="token punctuation">(</span>i % <span class="token number">10</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">;</span>\n    <span class="token builtin class-name">set</span> <span class="token assign-left variable">i</span><span class="token operator">=</span>i+1<span class="token punctuation">;</span>\n  end <span class="token keyword">while</span><span class="token punctuation">;</span>\nend<span class="token punctuation">;</span><span class="token punctuation">;</span>\ndelimiter <span class="token punctuation">;</span>\n \ncall idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="内存临时表" tabindex="-1"><a class="header-anchor" href="#内存临时表" aria-hidden="true">#</a> 内存临时表</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> word <span class="token keyword">from</span> words <span class="token keyword">order</span> <span class="token keyword">by</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">------+</span>\n<span class="token operator">|</span> word <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------+</span>\n<span class="token operator">|</span> giie <span class="token operator">|</span>\n<span class="token operator">|</span> egaj <span class="token operator">|</span>\n<span class="token operator">|</span> gcje <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>用explain查看一下</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> word <span class="token keyword">from</span> words <span class="token keyword">order</span> <span class="token keyword">by</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+</span>\n<span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                           <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+</span>\n<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> words <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">9980</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+</span>\n<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Extra 字段显示 Using temporary，表示的是需要使用临时表；Using filesort，表示的是需要执行排序操作。</p><p>因此这个 Extra 的意思就是，需要临时表，并且需要在临时表上排序</p><p>这条语句的执行流程是这样的：</p><ol><li>创建一个临时表。这个临时表使用的是 memory 引擎，表里有两个字段，第一个字段是 double 类型，为了后面描述方便，记为字段 R，第二个字段是 varchar(64) 类型，记为字段 W。并且，这个表没有建索引。</li><li>从 words 表中，按主键顺序取出所有的 word 值。对于每一个 word 值，调用 rand() 函数生成一个大于 0 小于 1 的随机小数，并把这个随机小数和 word 分别存入临时表的 R 和 W 字段中，到此，扫描行数是 10000。</li><li>现在临时表有 10000 行数据了，接下来你要在这个没有索引的内存临时表上，按照字段 R 排序。</li><li>初始化 sort_buffer。sort_buffer 中有两个字段，一个是 double 类型，另一个是整型。</li><li>从内存临时表中一行一行地取出 R 值和位置信息（我后面会和你解释这里为什么是“位置信息”），分别存入 sort_buffer 中的两个字段里。这个过程要对内存临时表做全表扫描，此时扫描行数增加 10000，变成了 20000。</li><li>在 sort_buffer 中根据 R 的值进行排序。注意，这个过程没有涉及到表操作，所以不会增加扫描行数。</li><li>排序完成后，取出前三个结果的位置信息，依次到内存临时表中取出 word 值，返回给客户端。这个过程中，访问了表的三行数据，总扫描行数变成了 20003。</li></ol><p><img src="/images/MySQL/image-20230509230708082.png" alt="image-20230509230708082"></p><p>排序模式里面，rowid 名字的来历。实际上它表示的是：每个引擎用来唯一标识数据行的信息。</p><ul><li>对于有主键的 InnoDB 表来说，这个 rowid 就是主键 ID；</li><li>对于没有主键的 InnoDB 表来说，这个 rowid 就是由系统生成的；</li><li>MEMORY 引擎不是索引组织表。在这个例子里面，你可以认为它就是一个数组。因此，这个 rowid 其实就是数组的下标。</li></ul><p>到这里，我来稍微小结一下：<strong>order by rand() 使用了内存临时表，内存临时表排序的时候使用了 rowid 排序方法。</strong></p><h2 id="随机排序方法" tabindex="-1"><a class="header-anchor" href="#随机排序方法" aria-hidden="true">#</a> 随机排序方法</h2><p>我们先把问题简化一下，如果只随机选择 1 个 word 值，可以怎么做呢？思路上是这样的：</p><ol><li>取得这个表的主键 id 的最大值 M 和最小值 N;</li><li>用随机函数生成一个最大值到最小值之间的数 X = (M-N)*rand() + N;</li><li>取不小于 X 的第一个 ID 的行</li></ol><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token variable">@M</span><span class="token punctuation">,</span><span class="token variable">@N</span> <span class="token keyword">from</span> words<span class="token punctuation">;</span>\nQuery OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n\nmysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token variable">@X</span><span class="token operator">=</span> floor<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">@M</span><span class="token operator">-</span><span class="token variable">@N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">@N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nQuery OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n\nmysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> words <span class="token keyword">where</span> id <span class="token operator">&gt;=</span> <span class="token variable">@X</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">------+------+</span>\n<span class="token operator">|</span> id   <span class="token operator">|</span> word <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------+------+</span>\n<span class="token operator">|</span> <span class="token number">3293</span> <span class="token operator">|</span> dcjc <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------+------+</span>\n<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这个方法效率很高，因为取 max(id) 和 min(id) 都是不需要扫描索引的，而第三步的 select 也可以用索引快速定位，可以认为就只扫描了 3 行。但实际上，这个算法本身并不严格满足题目的随机要求，因为 ID 中间可能有空洞，因此选择不同行的概率不一样，不是真正的随机。</p><p>比如你有 4 个 id，分别是 1、2、4、5，如果按照上面的方法，那么取到 id=4 的这一行的概率是取得其他行概率的两倍。</p><p>如果这四行的 id 分别是 1、2、40000、40001 呢？这个算法基本就能当 bug 来看待了。</p><p>所以，为了得到严格随机的结果，你可以用下面这个流程:</p><ol><li>取得整个表的行数，并记为 C。</li><li>取得 Y = floor(C * rand())。 floor 函数在这里的作用，就是取整数部分。</li><li>再用 limit Y,1 取得一行。</li></ol><p>我们把这个算法，称为随机算法 2。下面这段代码，就是上面流程的执行语句的序列</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token variable">@C</span> <span class="token keyword">from</span> words<span class="token punctuation">;</span>\nQuery OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n\nmysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token variable">@Y</span> <span class="token operator">=</span> floor<span class="token punctuation">(</span><span class="token variable">@C</span> <span class="token operator">*</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nQuery OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n\nmysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token variable">@sql</span> <span class="token operator">=</span> concat<span class="token punctuation">(</span><span class="token string">&quot;select * from words limit &quot;</span><span class="token punctuation">,</span> <span class="token variable">@Y</span><span class="token punctuation">,</span> <span class="token string">&quot;,1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nQuery OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>\n\nmysql<span class="token operator">&gt;</span> <span class="token keyword">prepare</span> stmt <span class="token keyword">from</span> <span class="token variable">@sql</span><span class="token punctuation">;</span>\nQuery OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\nStatement prepared\n\nmysql<span class="token operator">&gt;</span> <span class="token keyword">execute</span> stmt<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">------+------+</span>\n<span class="token operator">|</span> id   <span class="token operator">|</span> word <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------+------+</span>\n<span class="token operator">|</span> <span class="token number">4813</span> <span class="token operator">|</span> eibc <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------+------+</span>\n<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n\nmysql<span class="token operator">&gt;</span> <span class="token keyword">DEALLOCATE</span> <span class="token keyword">prepare</span> stmt<span class="token punctuation">;</span>\nQuery OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>如果我们按照随机算法 2 的思路，要随机取 3 个 word 值呢？你可以这么做：</p><ol><li>取得整个表的行数，记为 C；</li><li>根据相同的随机方法得到 Y1、Y2、Y3；</li><li>再执行三个 limit Y, 1 语句得到三行数据。</li></ol><p>我们把这个算法，称作随机算法 3。下面这段代码，就是上面流程的执行语句的序列</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token variable">@C</span> <span class="token keyword">from</span> words<span class="token punctuation">;</span>\n<span class="token keyword">set</span> <span class="token variable">@Y1</span> <span class="token operator">=</span> floor<span class="token punctuation">(</span><span class="token variable">@C</span> <span class="token operator">*</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">set</span> <span class="token variable">@Y2</span> <span class="token operator">=</span> floor<span class="token punctuation">(</span><span class="token variable">@C</span> <span class="token operator">*</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">set</span> <span class="token variable">@Y3</span> <span class="token operator">=</span> floor<span class="token punctuation">(</span><span class="token variable">@C</span> <span class="token operator">*</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> words <span class="token keyword">limit</span> <span class="token variable">@Y1</span>，<span class="token number">1</span>； <span class="token comment">// 在应用代码里面取 Y1、Y2、Y3 值，拼出 SQL 后执行</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> words <span class="token keyword">limit</span> <span class="token variable">@Y2</span>，<span class="token number">1</span>；\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> words <span class="token keyword">limit</span> <span class="token variable">@Y3</span>，<span class="token number">1</span>；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',29),e={},o=(0,a(66262).A)(e,[["render",function(s,n){return p}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,p]of n)a[s]=p;return a}}}]);