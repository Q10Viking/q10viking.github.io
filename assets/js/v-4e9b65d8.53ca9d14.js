"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[25243],{65535:(e,a,i)=>{i.r(a),i.d(a,{data:()=>t});const t={key:"v-4e9b65d8",path:"/rabbitmq/",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,prev:{text:"Back To 目录",link:"/topicNav/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"MQ简介",slug:"mq简介",children:[]},{level:2,title:"MQ优势",slug:"mq优势",children:[{level:3,title:"应用解耦",slug:"应用解耦",children:[]},{level:3,title:"异步提速",slug:"异步提速",children:[]},{level:3,title:"削峰填谷",slug:"削峰填谷",children:[]},{level:3,title:"小结",slug:"小结",children:[]}]},{level:2,title:"MQ劣势",slug:"mq劣势",children:[{level:3,title:"系统可用性降低",slug:"系统可用性降低",children:[]},{level:3,title:"系统复杂度提高",slug:"系统复杂度提高",children:[]}]},{level:2,title:"MQ常见产品",slug:"mq常见产品",children:[]}],filePathRelative:"rabbitmq/README.md"}},58771:(e,a,i)=>{i.r(a),i.d(a,{default:()=>h});var t=i(20641);const r={class:"custom-container tip"},s=(0,t.Lk)("p",{class:"custom-container-title"},"TIP",-1),n={href:"https://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Lk)("p",null,"2007年，Rabbit 技术公司基于 AMQP 标准开发的 RabbitMQ 1.0 发布。RabbitMQ 采用 Erlang 语言开发。Erlang 语言由 Ericson 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。",-1),g=(0,t.Fv)('<h2 id="mq简介" tabindex="-1"><a class="header-anchor" href="#mq简介" aria-hidden="true">#</a> MQ简介</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>MQ全称 <strong>Message Queue（消息队列）</strong>，是在消息的传输过程中<strong>保存消息的容器</strong>。多用于<strong>分布式系统之间进行通信</strong>。</p></div><p><img src="/images/RabbitMQ/image-20210422201903080.png" alt=""></p><h2 id="mq优势" tabindex="-1"><a class="header-anchor" href="#mq优势" aria-hidden="true">#</a> MQ优势</h2><h3 id="应用解耦" tabindex="-1"><a class="header-anchor" href="#应用解耦" aria-hidden="true">#</a> 应用解耦</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>使得应用间解耦，<strong>提升容错性和可维护性</strong></p></div><p><img src="/images/RabbitMQ/image-20210422202000051.png" alt=""></p><p><img src="/images/RabbitMQ/image-20210422202047240.png" alt=""></p><h3 id="异步提速" tabindex="-1"><a class="header-anchor" href="#异步提速" aria-hidden="true">#</a> 异步提速</h3><p>一个下单操作耗时：20 + 300 + 300 + 300 = 920ms，用户点击完下单按钮后，需要等待920ms才能得到下单响应，太慢！</p><p><img src="/images/RabbitMQ/image-20210422202225800.png" alt=""></p><p>用户点击完下单按钮后，只需等待25ms就能得到下单响应 (20 + 5 = 25ms)，<strong>提升用户体验和系统吞吐量</strong>（单位时间内处理请求的数目)</p><p><img src="/images/RabbitMQ/image-20210422202320669.png" alt=""></p><h3 id="削峰填谷" tabindex="-1"><a class="header-anchor" href="#削峰填谷" aria-hidden="true">#</a> 削峰填谷</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>使用MQ后，可以提高系统稳定性</p></div><p><img src="/images/RabbitMQ/image-20210422202651914.png" alt=""></p><p>请求瞬间增多，每秒5000个请求</p><p><img src="/images/RabbitMQ/image-20210422202621244.png" alt=""></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>使用了 MQ 之后，限制消费消息的速度为1000，这样一来，高峰期产生的<strong>数据势必会被积压在 MQ</strong> 中，<strong>高峰就被“削”掉了</strong>，但是因为<strong>消息积压</strong>，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000，直到消费完积压的消息，这就叫做“填谷”</p></div><p><img src="/images/RabbitMQ/image-20210422202808519.png" alt="image-20210422202808519"></p><hr><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ol><li>应用解耦：提高系统容错性和可维护性</li><li>异步提速：提升用户体验和系统吞吐量</li><li>削峰填谷：提高系统稳定性</li></ol><h2 id="mq劣势" tabindex="-1"><a class="header-anchor" href="#mq劣势" aria-hidden="true">#</a> MQ劣势</h2><p><img src="/images/RabbitMQ/image-20211030171613623.png" alt="image-20211030171613623"></p><h3 id="系统可用性降低" tabindex="-1"><a class="header-anchor" href="#系统可用性降低" aria-hidden="true">#</a> 系统可用性降低</h3><p>系统<strong>引入的外部依赖</strong>越多，系统稳定性越差。一旦 MQ 宕机，就会对业务造成影响。如何保证MQ的<strong>高可用</strong>⭐？</p><h3 id="系统复杂度提高" tabindex="-1"><a class="header-anchor" href="#系统复杂度提高" aria-hidden="true">#</a> 系统复杂度提高</h3><p>MQ 的加入大大增加了系统的复杂度，以前系统间是<strong>同步的远程调用</strong>，现在是通过 MQ 进行异步调用。<strong>如何保证消息不被丢失等情况</strong>⭐？</p><hr><h2 id="mq常见产品" tabindex="-1"><a class="header-anchor" href="#mq常见产品" aria-hidden="true">#</a> MQ常见产品</h2><p><img src="/images/RabbitMQ/image-20210422211240124.png" alt=""></p>',32),c={},h=(0,i(66262).A)(c,[["render",function(e,a){const i=(0,t.g2)("OutboundLink");return(0,t.uX)(),(0,t.CE)(t.FK,null,[(0,t.Lk)("div",r,[s,(0,t.Lk)("p",null,[(0,t.Lk)("a",n,[(0,t.eW)("Messaging that just works — RabbitMQ"),(0,t.bF)(i)])]),l]),g],64)}]])},66262:(e,a)=>{a.A=(e,a)=>{const i=e.__vccOpts||e;for(const[e,t]of a)i[e]=t;return i}}}]);