"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[54277],{85988:(e,s,t)=>{t.r(s),t.d(s,{data:()=>r});const r={key:"v-4d3031ff",path:"/Redis/18%20%E6%B7%B7%E5%90%88%E6%8C%81%E4%B9%85%E5%8C%96.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Redis 4.0 混合持久化",slug:"redis-4-0-混合持久化",children:[]},{level:2,title:"混合持久化AOF文件结构",slug:"混合持久化aof文件结构",children:[]}],filePathRelative:"Redis/18 混合持久化.md"}},9877:(e,s,t)=>{t.r(s),t.d(s,{default:()=>i});const r=(0,t(20641).Fv)('<h2 id="redis-4-0-混合持久化" tabindex="-1"><a class="header-anchor" href="#redis-4-0-混合持久化" aria-hidden="true">#</a> <strong>Redis 4.0 混合持久化</strong></h2><p>重启 Redis 时，我们很少使用 RDB来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 RDB来说要慢很多，这样<strong>在 Redis 实例很大的情况下，启动需要花费很长的时间</strong>。 Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。</p><p>通过如下配置可以开启混合持久化(<strong>必须先开启aof</strong>)：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># aof-use-rdb-preamble yes  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果开启了混合持久化，<strong>AOF在重写时</strong>，不再是单纯将内存数据转换为RESP命令写入AOF文件，而是将重写<strong>这一刻之前</strong>的内存做RDB快照处理，并且将RDB快照内容和<strong>增量的</strong>AOF修改内存数据的命令存在一起，都写入新的AOF文件，新的文件一开始不叫appendonly.aof，等到重写完新的AOF文件才会进行改名，覆盖原有的AOF文件，完成新旧两个AOF文件的替换。</p><p>于是在 Redis 重启的时候，可以先加载 RDB 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，因此重启效率大幅得到提升。</p><h2 id="混合持久化aof文件结构" tabindex="-1"><a class="header-anchor" href="#混合持久化aof文件结构" aria-hidden="true">#</a> 混合持久化AOF文件结构</h2><p><img src="/images/Redis/102679.png" alt="102679"></p>',8),a={},i=(0,t(66262).A)(a,[["render",function(e,s){return r}]])},66262:(e,s)=>{s.A=(e,s)=>{const t=e.__vccOpts||e;for(const[e,r]of s)t[e]=r;return t}}}]);