"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[45983],{37606:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-17ef97aa",path:"/Algorithm/%E5%8D%95%E8%B0%83%E6%A0%88.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Algorithm/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"什么是单调栈",slug:"什么是单调栈",children:[]},{level:2,title:"案例",slug:"案例",children:[]}],filePathRelative:"Algorithm/单调栈.md"}},66845:(n,a,s)=>{s.r(a),s.d(a,{default:()=>c});var e=s(20641);const t=(0,e.Fv)('<h2 id="什么是单调栈" tabindex="-1"><a class="header-anchor" href="#什么是单调栈" aria-hidden="true">#</a> 什么是单调栈</h2><ul><li><p>单调递增栈：单调递增栈就是从栈底到栈顶数据是从大到小，或者说从栈顶**到栈底数据是从小到大，意味着从栈顶拿数据时，数据是越拿越大的。</p></li><li><p>单调递减栈：单调递减栈就是从栈底到栈顶数据是从小到大，或者说从栈顶到栈底数据是从大到小，意味着从栈顶拿数据时，数据是越拿越小的。</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n注意进栈的api为push，\n而offer就变成了队列先进出的方式\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2>',4),p={href:"https://leetcode.cn/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"},l={},c=(0,s(66262).A)(l,[["render",function(n,a){const s=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,(0,e.Lk)("p",null,[(0,e.Lk)("a",p,[(0,e.eW)("42. 接雨水"),(0,e.bF)(s)])])],64)}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);