"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[39653],{63566:(s,n,a)=>{a.r(n),a.d(n,{data:()=>p});const p={key:"v-3c111060",path:"/zk/10%20zk%E9%9B%86%E7%BE%A4.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/zk/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"搭建集群",slug:"搭建集群",children:[]},{level:2,title:"检查集群状态",slug:"检查集群状态",children:[]},{level:2,title:"连接集群",slug:"连接集群",children:[]}],filePathRelative:"zk/10 zk集群.md"}},21889:(s,n,a)=>{a.r(n),a.d(n,{default:()=>t});const p=(0,a(20641).Fv)('<h2 id="搭建集群" tabindex="-1"><a class="header-anchor" href="#搭建集群" aria-hidden="true">#</a> 搭建集群</h2><p>Zookeeper 集群模式一共有三种类型的角色</p><ol><li><p><strong>Leader</strong>: 处理所有的事务请求（写请求），可以处理读请求，集群中只能有一个Leader</p></li><li><p><strong>Follower</strong>：只能处理读请求，同时作为 Leader的候选节点，即如果Leader宕机，Follower节点要参与到新的Leader选举中，有可能成为新的Leader节点。</p></li><li><p><strong>Observer</strong>：只能处理读请求。不能参与选举</p></li></ol><img src="/images/zk/26582.png" alt="img" style="zoom:80%;"><p><img src="/images/zk/44906.png" alt="https://note.youdao.com/yws/public/resource/f0549278905bb988c831d6910c54143a/xmlnote/24081D811D7A49E4879034DB1D2E369B/44906"></p><p>本例搭建的是伪集群模式，即一台机器上启动四个zookeeper实例组成集群，真正的集群模式无非就是实例IP地址不同，搭建方法没有区别</p><p>集群规划</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 搭建4台zk实例，</span>\n设置端口分别为2181，2182，2183，2184\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li>创建一个相关目录</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/zk/zkdata\n<span class="token builtin class-name">cd</span> /usr/zk/zkdata/\n<span class="token comment"># 建立四台机器的存储数据的目录</span>\n<span class="token function">mkdir</span> zk1\n<span class="token function">mkdir</span> zk2\n<span class="token function">mkdir</span> zk3\n<span class="token function">mkdir</span> zk4\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>创建标识Server ID</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost zkdata<span class="token punctuation">]</span><span class="token comment"># echo 1 &gt; zk1/myid</span>\n<span class="token punctuation">[</span>root@localhost zkdata<span class="token punctuation">]</span><span class="token comment"># echo 2 &gt; zk2/myid</span>\n<span class="token punctuation">[</span>root@localhost zkdata<span class="token punctuation">]</span><span class="token comment"># echo 3 &gt; zk3/myid</span>\n<span class="token punctuation">[</span>root@localhost zkdata<span class="token punctuation">]</span><span class="token comment"># echo 4 &gt; zk4/myid</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>复制配置文件并修改配置</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> zoo_sample.cfg zk1.cfg \n\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>修改配置<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\n<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span>\n<span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/usr/zk/zkdata/zk1\n<span class="token assign-left variable">server.1</span><span class="token operator">=</span><span class="token number">192.168</span>.187.135:2001:3001:participant  // participant 可以不用写，默认就是participant\n<span class="token assign-left variable">server.2</span><span class="token operator">=</span><span class="token number">192.168</span>.187.135:2002:3002:participant\n<span class="token assign-left variable">server.3</span><span class="token operator">=</span><span class="token number">192.168</span>.187.135:2003:3003:participant\n<span class="token assign-left variable">server.4</span><span class="token operator">=</span><span class="token number">192.168</span>.187.135:2004:3004:observer\n\n\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>\n其他的三个zk实例，分别修改端口clientPort和文件目录dataDir\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>tickTime：用于配置Zookeeper中最小时间单位的长度，很多运行时的时间间隔都是使用tickTime的倍数来表示的。</li><li>initLimit：该参数用于配置Leader服务器等待Follower启动，并完成数据同步的时间。Follower服务器再启动过程中，会与Leader建立连接并完成数据的同步，从而确定自己对外提供服务的起始状态。Leader服务器允许Follower再initLimit 时间内完成这个工作。</li><li>syncLimit：Leader 与Follower心跳检测的最大延时时间</li><li>dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。</li><li>clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</li><li>server.A=B：C：D：E 其中 <ul><li>A 是一个数字，表示这个是第几号服务器；</li><li>B 是这个服务器的 ip 地址；</li><li>C 表示的是这个服务器与集群中的 Leader 服务器交换信息的端口；</li><li>D表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号。如果需要通过添加不参与集群选举以及事务请求的过半机制的Observer节点，可以在E的位置，添加observer标识。</li></ul></li></ul><hr><ol start="4"><li>分别启动三个zookeeper实例</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bin/zkServer.sh start conf/zk1.cfg\nbin/zkServer.sh start conf/zk2.cfg\nbin/zkServer.sh start conf/zk3.cfg\nbin/zkServer.sh start conf/zk4.cfg\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="检查集群状态" tabindex="-1"><a class="header-anchor" href="#检查集群状态" aria-hidden="true">#</a> 检查集群状态</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 分别查看zk实例的状态</span>\nbin/zkServer.sh status conf/zk1.cfg\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><img src="/images/zk/image-20211118084146014.png" alt="image-20211118084146014"><h2 id="连接集群" tabindex="-1"><a class="header-anchor" href="#连接集群" aria-hidden="true">#</a> 连接集群</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 连接集群,zk会随机选择一个进行连接</span>\nbin/zkCli.sh <span class="token parameter variable">-server</span> <span class="token number">192.168</span>.187.135:2181,192.168.187.135:2182,192.168.187.135:2183,192.168.187.135:2184\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>java代码中连接连接也是用逗号分隔</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n\n        <span class="token class-name">RetryPolicy</span> retryPolicy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> connectStr <span class="token operator">=</span> <span class="token string">&quot;192.168.187.135:2181,192.168.187.135:2182,192.168.187.135:2183,192.168.187.135:2184&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">CuratorFramework</span> curatorFramework <span class="token operator">=</span> <span class="token class-name">CuratorFrameworkFactory</span><span class="token punctuation">.</span><span class="token function">newClient</span><span class="token punctuation">(</span>connectStr<span class="token punctuation">,</span> retryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        curatorFramework<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n\n        <span class="token class-name">String</span> pathWithParent <span class="token operator">=</span> <span class="token string">&quot;/zookeeper&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> curatorFramework<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>pathWithParent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> curatorFramework<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>pathWithParent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token punctuation">}</span>\n\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',25),e={},t=(0,a(66262).A)(e,[["render",function(s,n){return p}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,p]of n)a[s]=p;return a}}}]);