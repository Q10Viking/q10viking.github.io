"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[85930],{89187:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7febce00",path:"/spring/10%20spring%20%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/spring/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Spring 事务以及事务传播机制源码分析",slug:"spring-事务以及事务传播机制源码分析",children:[]},{level:2,title:"@Transactional",slug:"transactional",children:[]},{level:2,title:"开启事务",slug:"开启事务",children:[]},{level:2,title:"部分失败全局回滚：",slug:"部分失败全局回滚",children:[]},{level:2,title:"强制回滚",slug:"强制回滚",children:[]},{level:2,title:"提交时强制回滚",slug:"提交时强制回滚",children:[]},{level:2,title:"Java代码学习",slug:"java代码学习",children:[]},{level:2,title:"SavePoint",slug:"savepoint",children:[]}],filePathRelative:"spring/10 spring 事务源码分析.md"}},61437:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(20641);const p=(0,e.Fv)('<h2 id="spring-事务以及事务传播机制源码分析" tabindex="-1"><a class="header-anchor" href="#spring-事务以及事务传播机制源码分析" aria-hidden="true">#</a> Spring 事务以及事务传播机制源码分析</h2><p>https://www.processon.com/view/link/629840591e085332a215dc39</p><h2 id="transactional" tabindex="-1"><a class="header-anchor" href="#transactional" aria-hidden="true">#</a> @Transactional</h2><ol><li>UserService的类或者方法上有没有加这个注解@Transactional</li><li>@EnableTransactional</li></ol><p>配置</p><p><img src="/images/spring/image-20220601215429465.png" alt="image-20220601215429465"></p><h2 id="开启事务" tabindex="-1"><a class="header-anchor" href="#开启事务" aria-hidden="true">#</a> 开启事务</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Spring事务管理器，创建数据库连接\nconn.autocommit = false\nconn.隔离级别\nconn 放入TreadLocal&lt;Map&gt;  key:DataSource,conn连接\n\n执行方法target.test sql1,sql2 \n\t\ta()方法 新开一个事务\n\t\t    挂起对象----&gt;conn连接拿出来放到挂起对象中\n\t\t\tSpring事务管理器，创建数据库连接\n             conn1.autocommit = false\n             conn1.隔离级别\n             conn1 放入TreadLocal&lt;Map&gt;  key:DataSource,conn连接\t\n             执行sql\n             conn1.提交\n             恢复 放入TreadLocal&lt;Map&gt;\n             如果rollback---&gt;如果部分失败全局回滚。\n    sql3\n4. 提交commit() 会去判断a()方法 rollback时设置的值  回滚\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>jdbcTemplate怎么拿到事务管理建立的连接？需要把数据库连接放入ThreadLocal</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">&#39;%Threads_connected%&#39;</span><span class="token punctuation">;</span>  <span class="token comment">-- 查看当前连接mysql的线程数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="部分失败全局回滚" tabindex="-1"><a class="header-anchor" href="#部分失败全局回滚" aria-hidden="true">#</a> 部分失败全局回滚：</h2><p>同一个连接里面，要么同时提交，要么同时回滚</p><p><img src="/images/spring/image-20220601215429465.png" alt="image-20220601215503670"></p><h2 id="强制回滚" tabindex="-1"><a class="header-anchor" href="#强制回滚" aria-hidden="true">#</a> 强制回滚</h2><p>TransactionSynchronizationManager.getCurrent 事务的名字</p><p><img src="/images/spring/image-20220601223950821.png" alt="image-20220601223950821"></p><h2 id="提交时强制回滚" tabindex="-1"><a class="header-anchor" href="#提交时强制回滚" aria-hidden="true">#</a> 提交时强制回滚</h2><p>TransactionInfo是<strong>TransactionAspectSupport</strong>的一个内部类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    jdbcTemplate<span class="token punctuation">.</span>execute\n    <span class="token keyword">try</span><span class="token punctuation">{</span>\n        <span class="token comment">//比如远程调用rpc call</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">TransactionAspectSupport</span><span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setRollbackOnly\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    jdbcTemplate<span class="token punctuation">.</span>execute\n    <span class="token keyword">try</span><span class="token punctuation">{</span>\n        userService<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 就算被catch主了，同样test方法也回滚。底层是部分失败全局回滚实现的</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Transactional</span> \n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="java代码学习" tabindex="-1"><a class="header-anchor" href="#java代码学习" aria-hidden="true">#</a> Java代码学习</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Collections.singleton\n\n（UserService）null???\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',22),t={href:"https://blog.csdn.net/u012410733/article/details/108659198",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Fv)('<h2 id="savepoint" tabindex="-1"><a class="header-anchor" href="#savepoint" aria-hidden="true">#</a> SavePoint</h2><p>数据库级别</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">begin</span>:\n <span class="token keyword">insert</span> <span class="token keyword">into</span>  t2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;hzz&quot;</span><span class="token punctuation">)</span>\n <span class="token keyword">insert</span> <span class="token keyword">into</span>  t2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;hzz2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n <span class="token keyword">savepoint</span> x<span class="token punctuation">;</span>\n <span class="token keyword">insert</span> <span class="token keyword">into</span>  t2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;hzz3&quot;</span><span class="token punctuation">)</span>\n <span class="token keyword">rollback</span> <span class="token keyword">to</span> x<span class="token punctuation">;</span>\n \n <span class="token keyword">commit</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',3),c={},o=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[p,(0,e.Lk)("p",null,[(0,e.Lk)("a",t,[(0,e.eW)("(28条消息) Spring 事务扩展机制 TransactionSynchronization_carl-zhao的博客-CSDN博客"),(0,e.bF)(a)])]),l],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);