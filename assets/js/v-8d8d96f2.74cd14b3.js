"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[73469],{69482:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-8d8d96f2",path:"/cloudnative/04%20%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/cloudnative/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Dockerfile常用指令",slug:"dockerfile常用指令",children:[]},{level:2,title:"构建简单Docker镜像",slug:"构建简单docker镜像",children:[]},{level:2,title:"构建微服务镜像😄",slug:"构建微服务镜像",children:[]},{level:2,title:"发布到远程镜像仓库",slug:"发布到远程镜像仓库",children:[]}],filePathRelative:"cloudnative/04 构建docker镜像.md"}},57518:(s,n,a)=>{a.r(n),a.d(n,{default:()=>d});var e=a(20641);const r=(0,e.Fv)('<h2 id="dockerfile常用指令" tabindex="-1"><a class="header-anchor" href="#dockerfile常用指令" aria-hidden="true">#</a> <strong>Dockerfile常用指令</strong></h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>注意：RUN命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；CMD命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个RUN命令，但是只能有一个CMD命令。</p><p>注意，指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令。</p></div><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像文件</td></tr><tr><td>RUN</td><td>构建镜像阶段执行命令</td></tr><tr><td>ADD</td><td>添加文件，从src目录复制文件到容器的dest，其中 src可以是 Dockerfile所在目录的相对路径，也可以是一个 URL,还可以是一个压缩包</td></tr><tr><td>COPY</td><td>拷贝文件，和ADD命令类似，但不支持URL和压缩包</td></tr><tr><td>CMD</td><td>容器启动后执行命令</td></tr><tr><td>EXPOSE</td><td>声明容器在运行时对外提供的服务端口</td></tr><tr><td>WORKDIR</td><td>指定容器工作路径</td></tr><tr><td>ENV</td><td>指定环境变量</td></tr><tr><td>ENTRYPINT</td><td>容器入口， ENTRYPOINT和 CMD指令的目的一样，都是指定 Docker容器启动时执行的命令，可多次设置，但只有最后一个有效。</td></tr><tr><td>USER</td><td>该指令用于设置启动镜像时的用户或者 UID,写在该指令后的 RUN、 CMD以及 ENTRYPOINT指令都将使用该用户执行命令。</td></tr><tr><td>VOLUME</td><td>指定挂载点，该指令使容器中的一个目录具有持久化存储的功能，该目录可被容器本身使用，也可共享给其他容器。当容器中的应用有持久化数据的需求时可以在 Dockerfile中使用该指令。格式为： VOLUME[&quot;/data&quot;]。</td></tr></tbody></table><h2 id="构建简单docker镜像" tabindex="-1"><a class="header-anchor" href="#构建简单docker镜像" aria-hidden="true">#</a> 构建简单Docker镜像</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>编写一个最简单的Dockerfile，以前文下载的Nginx镜像为例，来编写一个Dockerfile修改该Nginx镜像的首页</p></div><ol><li><p>新建一个空文件夹docker-demo，在里面再新建文件夹app，在app目录下新建一个名为Dockerfile的文件，在里面增加如下内容：()</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>FROM nginx\nRUN <span class="token builtin class-name">echo</span> <span class="token string">&#39;&lt;h1&gt;This is Nginx!!!&lt;/h1&gt;&lt;h2&gt;Q10Viking learning Docker&lt;/h2&gt;&#39;</span> <span class="token operator">&gt;</span> /usr/share/nginx/html/index.html\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>该Dockerfile非常简单，其中的 FROM、 RUN都是 Dockerfile的指令。 FROM指令用于指定基础镜像， RUN指令用于执行命令。</p></li><li><p>在Dockerfile所在路径执行以下命令构建镜像</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> nginx:jingmo <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中，-t指定镜像名字，命令最后的点（.）表示Dockerfile文件所在路径</p><details class="custom-container details"><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost app<span class="token punctuation">]</span><span class="token comment"># docker build -t nginx:jingmo .</span>\nSending build context to Docker daemon  <span class="token number">2</span>.048kB\nStep <span class="token number">1</span>/2 <span class="token builtin class-name">:</span> FROM nginx\n ---<span class="token operator">&gt;</span> f652ca386ed1\nStep <span class="token number">2</span>/2 <span class="token builtin class-name">:</span> RUN <span class="token builtin class-name">echo</span> <span class="token string">&#39;&lt;h1&gt;This is Nginx!!!&lt;/h1&gt;&lt;h2&gt;Q10Viking learning Docker&lt;/h2&gt;&#39;</span> <span class="token operator">&gt;</span> /usr/share/nginx/html/index.html\n ---<span class="token operator">&gt;</span> Running <span class="token keyword">in</span> 5b9c0d769a73\nRemoving intermediate container 5b9c0d769a73\n ---<span class="token operator">&gt;</span> 9ba9d4212a17\nSuccessfully built 9ba9d4212a17\nSuccessfully tagged nginx:jingmo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></details></li><li><p>执行以下命令，即可使用该镜像启动一个 Docker容器</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">92</span>:80 nginx:jingmo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>访问 http://Docker宿主机IP:92/，可看到下图所示界面</p><p><img src="/images/cloudnative/202112160848130.jpg" alt="202112160848130"></p></li></ol><h2 id="构建微服务镜像" tabindex="-1"><a class="header-anchor" href="#构建微服务镜像" aria-hidden="true">#</a> 构建微服务镜像😄</h2><ol><li>将jar包上传linux服务器/usr/local/docker-app/docker-demo/app/eureka目录，在jar包所在目录创建名为Dockerfile的文件</li></ol><details class="custom-container details"><summary>效果</summary><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost eureka<span class="token punctuation">]</span><span class="token comment"># pwd</span>\n/usr/local/docker-demo/app/eureka\n<span class="token punctuation">[</span>root@localhost eureka<span class="token punctuation">]</span><span class="token comment"># ls</span>\nmicroservice-eureka-server-0.0.1-SNAPSHOT.jar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></details><ol start="2"><li>在Dockerfile中添加以下内容</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 基于哪个镜像</span>\nFrom java:8\n<span class="token comment"># 复制文件到容器</span>\nADD microservice-eureka-server-0.0.1-SNAPSHOT.jar /app.jar\n<span class="token comment"># 声明需要暴露的端口</span>\nEXPOSE <span class="token number">8761</span>\n<span class="token comment"># 配置容器启动后执行的命令</span>\nENTRYPOINT <span class="token function">java</span> <span class="token variable">${JAVA_OPTS}</span> <span class="token parameter variable">-jar</span> /app.jar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="3"><li>使用docker build命令构建镜像</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> microservice-eureka-server:0.0.1 <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>4, 启动镜像，加-d可在后台启动</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8761</span>:8761 microservice-eureka-server:0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使用 -v 可以挂载一个主机上的目录到容器的目录⭐</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker run -d -p 8761:8761 -v /log:/container-log microservice-eureka-server:0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>加上JVM参数</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># --cap-add=SYS_PTRACE 这个参数是让docker能支持在容器里能执行jdk自带类似jinfo，jmap这些命令，如果不需要在容器里执行这些命令可以不加</span>\n<span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&#39;-Xms1028M -Xmx1028M -Xmn512M -Xss512K -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M&#39;</span> --cap-add<span class="token operator">=</span>SYS_PTRACE <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8761</span>:8761 microservice-eureka-server:0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="5"><li><p>访问http://Docker宿主机IP:8761/，可正常显示Eureka Server首页</p><p><img src="/images/cloudnative/202112160903821.jpg" alt="202112160903821"></p></li></ol><h2 id="发布到远程镜像仓库" tabindex="-1"><a class="header-anchor" href="#发布到远程镜像仓库" aria-hidden="true">#</a> <strong>发布到远程镜像仓库</strong></h2>',21),l={class:"custom-container tip"},t=(0,e.Lk)("p",{class:"custom-container-title"},"TIP",-1),c={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Lk)("p",null,"首先，需要在docke官方镜像仓库里注册一个账号",-1),p=(0,e.Fv)('<p>在linux服务器上用docker login命令登录镜像仓库</p><details class="custom-container details"><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost eureka<span class="token punctuation">]</span><span class="token comment"># docker login</span>\nLogin with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, <span class="token function">head</span> over to https://hub.docker.com to create one.\nUsername: q10viking\nPassword:\nWARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment">#credentials-store</span>\n\nLogin Succeeded\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></details><p>要把镜像推送到镜像仓库，需要将镜像前面加个分组名(一般就是docker hub的账户名)，执行如下命令修改镜像名字</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> tag microservice-eureka-server:0.0.1 q10viking/microservice-eureka-server:0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最后将镜像推送到远程仓库</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker push q10viking/microservice-eureka-server:0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><details class="custom-container details"><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost eureka<span class="token punctuation">]</span><span class="token comment"># docker push q10viking/microservice-eureka-server:0.0.1</span>\nThe push refers to repository <span class="token punctuation">[</span>docker.io/q10viking/microservice-eureka-server<span class="token punctuation">]</span>\nc8221a90fc10: Pushed\n35c20f26d188: Mounted from library/java\nc3fe59dd9556: Mounted from library/java\n6ed1a81ba5b6: Mounted from library/java\na3483ce177ce: Mounted from library/java\nce6c8756685b: Mounted from library/java\n30339f20ced0: Mounted from library/java\n0eb22bfb707d: Mounted from library/java\na2ae92ffcd29: Mounted from library/java\n<span class="token number">0.0</span>.1: digest: sha256:841ff3c2ca40edd1c29acd986b4d071a83a5227cc2a552f37c9be04d4a46966d size: <span class="token number">2212</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></details><p>登录到docker镜像查看下刚刚推送的镜像，这样镜像就能给别人用了</p><p><img src="/images/cloudnative/202112160911455.jpg" alt="202112160911455"></p>',9),o={},d=(0,a(66262).A)(o,[["render",function(s,n){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[r,(0,e.Lk)("div",l,[t,(0,e.Lk)("p",null,[(0,e.eW)("我们制作好了微服务镜像，一般需要发布到镜像仓库供别人使用，我们可以选择自建镜像仓库，也可以直接使用docker官方镜像仓库，这里我们选择docker官方镜像仓库："),(0,e.Lk)("a",c,[(0,e.eW)("hub.docker.com"),(0,e.bF)(a)])]),i]),p],64)}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);