"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[12698],{13012:(l,t,e)=>{e.r(t),e.d(t,{data:()=>n});const n={key:"v-07508778",path:"/MySQL/48%20B%E6%A0%91%E4%B8%8EB+%E6%A0%91.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[],filePathRelative:"MySQL/48 B树与B+树.md"}},94158:(l,t,e)=>{e.r(t),e.d(t,{default:()=>o});var n=e(20641);const r=(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,"**数据存储方式：**在B树中，每个节点都包含键和对应的值，叶子节点存储了实际的数据记录；而B+树中，只有叶子节点存储了实际的数据记录，非叶子节点只包含键信息和子节点的指针。"),(0,n.Lk)("li",null,"**数据检索方式：**在B树中，由于非叶子节点也存储了数据，所以查询时可以直接在非叶子节点找到对应的数据，具有更短的查询路径；而B+树的所有数据都存储在叶子节点上，只有通过叶子节点才能获取到完整的数据。"),(0,n.Lk)("li",null,[(0,n.Lk)("strong",null,[(0,n.eW)("范围查询效率："),(0,n.Lk)("strong",null,"由于B+树的所有数据都存储在叶子节点上，并且"),(0,n.eW)("叶子节点之间使用链表连接，所以范围查询的效率较高")]),(0,n.eW)("。而在B树中，范围查询需要通过遍历多个层级的节点，效率相对较低")]),(0,n.Lk)("li",null,"**适用场景：**B树适合进行随机读写操作，因为每个节点都包含了数据；而B+树适合进行范围查询和顺序访问，因为数据都存储在叶子节点上，并且叶子节点之间使用链表连接，有利于顺序遍历。")],-1),u=(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,"总结来说："),(0,n.eW)(" B树和B+树在数据存储方式、数据检索方式、范围查询效率以及适用场景方面存在区别。B树适合随机读写操作，而B+树适合范围查询和顺序访问。在实际应用中，根据不同的场景和需求选择合适的树结构可以带来更高效的数据处理和索引操作。")],-1),i={},o=(0,e(66262).A)(i,[["render",function(l,t){return(0,n.uX)(),(0,n.CE)(n.FK,null,[r,u],64)}]])},66262:(l,t)=>{t.A=(l,t)=>{const e=l.__vccOpts||l;for(const[l,n]of t)e[l]=n;return e}}}]);