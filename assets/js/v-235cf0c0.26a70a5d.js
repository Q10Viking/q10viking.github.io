"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[99762],{12911:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-235cf0c0",path:"/Redis/05%20Hash%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Hash常用操作",slug:"hash常用操作",children:[]},{level:2,title:"Hash优点",slug:"hash优点",children:[]},{level:2,title:"Hash缺点",slug:"hash缺点",children:[]}],filePathRelative:"Redis/05 Hash常用操作命令.md"}},89011:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});const t=(0,a(20641).Fv)('<h2 id="hash常用操作" tabindex="-1"><a class="header-anchor" href="#hash常用操作" aria-hidden="true">#</a> Hash常用操作</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token constant">HSET</span>  key  field  value\t\t\t\t\t\t\t\t<span class="token comment">//存储一个哈希表key的键值</span>\n<span class="token constant">HSETNX</span>  key  field  value \t\t\t\t\t\t\t<span class="token comment">//存储一个不存在的哈希表key的键值</span>\n<span class="token constant">HMSET</span>  key  field  value <span class="token punctuation">[</span>field value <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> \t\t   \t  <span class="token comment">//在一个哈希表key中存储多个键值对</span>\n<span class="token constant">HGET</span>  key  field \t\t\t\t\t\t\t\t    <span class="token comment">//获取哈希表key对应的field键值</span>\n<span class="token constant">HMGET</span>  key  field  <span class="token punctuation">[</span>field <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> \t\t \t\t\t\t <span class="token comment">//批量获取哈希表key中多个field键值</span>\n<span class="token constant">HDEL</span>  key  field  <span class="token punctuation">[</span>field <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> \t\t\t\t\t\t <span class="token comment">//删除哈希表key中的field键值</span>\n<span class="token constant">HLEN</span>  key\t\t\t\t\t\t\t\t\t\t   <span class="token comment">//返回哈希表key中field的数量</span>\n<span class="token constant">HGETALL</span>  key\t\t\t\t\t\t\t\t        <span class="token comment">//返回哈希表key中所有的键值</span>\n\n<span class="token constant">HINCRBY</span>  key  field  increment \t\t\t\t         <span class="token comment">//为哈希表key中field键的值加上增量increment</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="hash优点" tabindex="-1"><a class="header-anchor" href="#hash优点" aria-hidden="true">#</a> Hash优点</h2><ol><li><strong>同类数据归类整合储存</strong>，方便数据管理</li><li>相比string操作消耗内存与cpu更小</li><li>相比string储存更节省空间</li></ol><h2 id="hash缺点" tabindex="-1"><a class="header-anchor" href="#hash缺点" aria-hidden="true">#</a> Hash缺点</h2><ol><li><strong>过期功能不能使用在field上，只能用在key上</strong></li><li>Redis集群架构下不适合大规模使用，需要注意到key计算后，会导致数据倾斜</li></ol><blockquote><p>Redis集群下，数据存储的方式</p></blockquote><p><img src="/images/Redis/image-202111140536485011" alt=""></p>',8),e={},l=(0,a(66262).A)(e,[["render",function(n,s){return t}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);