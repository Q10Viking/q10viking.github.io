"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[83252],{32086:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-46d0e0b7",path:"/Feign/",title:"",lang:"zh-CN",frontmatter:{prev:{text:"Back To 目录",link:"/topicNav/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"什么是Feign",slug:"什么是feign",children:[{level:3,title:"优势",slug:"优势",children:[]}]},{level:2,title:"Ribbon与Feign对比",slug:"ribbon与feign对比",children:[{level:3,title:"Ribbon+RestTemplate",slug:"ribbon-resttemplate",children:[]},{level:3,title:"Feign进行微服务调用",slug:"feign进行微服务调用",children:[]}]}],filePathRelative:"Feign/README.md"}},48084:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(20641).Fv)('<h2 id="什么是feign" tabindex="-1"><a class="header-anchor" href="#什么是feign" aria-hidden="true">#</a> 什么是Feign</h2><p>Feign是Netflix开发的声明式、模板化的HTTP客户端.</p><p><strong>Spring Cloud openfeign对Feign进行了增强，使其支持Spring MVC注解，另外还整合了Ribbon和Nacos，从而使得Feign的使用更加方便</strong></p><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h3><p>Feign可以做到使用 <strong>HTTP 请求远程服务时就像调用本地方法一样的体验</strong>，开发者完全感知不到这是远程方法，更感知不到这是个 HTTP 请求。它像 Dubbo 一样，consumer 直接调用接口方法调用 provider，而不需要通过常规的 Http Client 构造请求再解析返回数据。它解决了让开发者调用远程接口就跟调用本地方法一样，无需关注与远程的交互细节，更无需关注分布式环境开发。</p><p>也属于一种RPC调用，底层协议用的是http协议</p><h2 id="ribbon与feign对比" tabindex="-1"><a class="header-anchor" href="#ribbon与feign对比" aria-hidden="true">#</a> Ribbon与Feign对比</h2><h3 id="ribbon-resttemplate" tabindex="-1"><a class="header-anchor" href="#ribbon-resttemplate" aria-hidden="true">#</a> Ribbon+RestTemplate</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@LoadBalanced</span>\n<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//调用方式</span>\n<span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://mall-order/order/findOrderByUserId/&quot;</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n<span class="token class-name">R</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="feign进行微服务调用" tabindex="-1"><a class="header-anchor" href="#feign进行微服务调用" aria-hidden="true">#</a> <strong>Feign进行微服务调用</strong></h3><p>通常在springCloud开发中，使用的openFeign的方式</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;mall-order&quot;</span><span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderFeignService</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/findOrderByUserId/{userId}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">findOrderByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Autowired</span>\n<span class="token class-name">OrderFeignService</span> orderFeignService<span class="token punctuation">;</span>\n<span class="token comment">//feign调用</span>\n<span class="token class-name">R</span> result <span class="token operator">=</span> orderFeignService<span class="token punctuation">.</span><span class="token function">findOrderByUserId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>        <span class="token comment">&lt;!--   引入openFegin     --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',13),t={},p=(0,a(66262).A)(t,[["render",function(n,s){return e}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);