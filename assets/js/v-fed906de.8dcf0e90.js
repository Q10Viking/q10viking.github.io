"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[38321],{10839:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-fed906de",path:"/rabbitmq/11%20%E7%94%9F%E4%BA%A7%E7%AB%AF%E5%AF%B9%E5%A4%84%E7%90%86%E6%B6%88%E6%81%AF%E7%9A%84%E7%90%86%E8%A7%A3.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/rabbitmq/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"RabbitMQ消息确认机制",slug:"rabbitmq消息确认机制",children:[]},{level:2,title:"Confirm⭐",slug:"confirm⭐",children:[{level:3,title:"代码注意",slug:"代码注意",children:[]}]},{level:2,title:"Return⭐",slug:"return⭐",children:[{level:3,title:"代码注意",slug:"代码注意-1",children:[]}]},{level:2,title:"注意",slug:"注意",children:[]}],filePathRelative:"rabbitmq/11 生产端对处理消息的理解.md"}},69351:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(20641).Fv)('<h2 id="rabbitmq消息确认机制" tabindex="-1"><a class="header-anchor" href="#rabbitmq消息确认机制" aria-hidden="true">#</a> RabbitMQ消息确认机制</h2><ol><li>RabbitMQ在传递消息的过程中充当了<strong>代理人Broker</strong>的角色，那么生产者（Producer）怎么知道消息被正确投递到了Broker呢？</li><li><strong>RabbitMQ提供了监听器（Listener）来接收消息投递的状态。</strong></li><li>消息确认涉及两种状态： Confirm与Return</li></ol><h2 id="confirm⭐" tabindex="-1"><a class="header-anchor" href="#confirm⭐" aria-hidden="true">#</a> Confirm⭐</h2><p>Confirm代表<strong>生产者将消息送到Broker时产生的状态</strong>，后续会出现两种情况</p><ol><li>ack代表Broker已经将数据接收</li><li>nack代表Broker拒收消息。原因有多种，队列已满，限流，IO异常,<strong>投递到的exchange不存在</strong>。</li></ol><h3 id="代码注意" tabindex="-1"><a class="header-anchor" href="#代码注意" aria-hidden="true">#</a> 代码注意</h3><ol><li>开启监听模式⭐</li><li>添加监听器</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//开启confirm监听模式</span>\nchannel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchannel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//第二个参数代表接收的数据是否为批量接收，一般我们用不到。</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息已被Broker接收,Tag:&quot;</span> <span class="token operator">+</span> l <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息已被Broker拒收,Tag:&quot;</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="return⭐" tabindex="-1"><a class="header-anchor" href="#return⭐" aria-hidden="true">#</a> Return⭐</h2><p>Return代表消息<strong>被Broker正常接收（ack）后，但Broker没有对应的队列进行投递时产生的状态</strong>，消息被退回给生产者。</p><h3 id="代码注意-1" tabindex="-1"><a class="header-anchor" href="#代码注意-1" aria-hidden="true">#</a> 代码注意</h3><ol><li>只需要添加监听器</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">addReturnListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Return</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===========================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Return编码：&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">getReplyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-Return描述:&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">getReplyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换机:&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-路由key:&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Return主题：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===========================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="/images/RabbitMQ/image-20211031031519307.png" alt="image-20211031031519307"></p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><p>上面两种状态只<strong>代表生产者与Broker之间消息投递的情况</strong>。与消费者是否接收/确认消息无关</p>',16),p={},e=(0,a(66262).A)(p,[["render",function(n,s){return t}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);