"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[65959],{63876:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-34c09da3",path:"/springmvc/04%20HandlerMapping%E5%88%86%E6%9E%90.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/springmvc/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Springboot自动配置",slug:"springboot自动配置",children:[]},{level:2,title:"如何判断是否是Handler",slug:"如何判断是否是handler",children:[]},{level:2,title:"如何组装链路(解析)",slug:"如何组装链路-解析",children:[]},{level:2,title:"映射",slug:"映射",children:[]}],filePathRelative:"springmvc/04 HandlerMapping分析.md"}},94701:(n,a,s)=>{s.r(a),s.d(a,{default:()=>d});var e=s(20641);const p=(0,e.Lk)("blockquote",null,[(0,e.Lk)("p",null,"SpringMVC中根据请求路径最终找到处理器Controller，主要是通过处理器映射器HandlerMapping来实现的，所以着重来分析一下它的源码")],-1),t=(0,e.Lk)("div",{class:"custom-container tip"},[(0,e.Lk)("p",{class:"custom-container-title"},"TIP"),(0,e.Lk)("ol",null,[(0,e.Lk)("li",null,"@RequestMapping是通过RequestMappingHandlerMapping负责解析的。"),(0,e.Lk)("li",null,"HandlerMapping负责根据请求映射到对应的handler方法。而RequestMappingHanderMapping是HandlerMapping的其中一个实现类，负责根据@RequestMapping注解进行映射。"),(0,e.Lk)("li",null,"HandlerMapping可分为两个过程 1）解析 2）映射")])],-1),l={href:"https://github.com/Q10Viking/learncode/tree/main/mybatis/springmvc/_01-source-code",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Fv)('<h2 id="springboot自动配置" tabindex="-1"><a class="header-anchor" href="#springboot自动配置" aria-hidden="true">#</a> Springboot自动配置</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>WebMvcAutoConfiguration\n\t里面配置了这个Bean\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="如何判断是否是handler" tabindex="-1"><a class="header-anchor" href="#如何判断是否是handler" aria-hidden="true">#</a> 如何判断是否是Handler</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//RequestMappingHandlerMapping#isHandler</span>\n<span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n    <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> <span class="token class-name">RequestMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过观察源码发现springboot中定义了一个<code>org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController</code></p><h2 id="如何组装链路-解析" tabindex="-1"><a class="header-anchor" href="#如何组装链路-解析" aria-hidden="true">#</a> 如何组装链路(解析)</h2><blockquote><p>下面的代码如何组装成<code>/hello/say</code>?</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/say&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;HelloController say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>简单的来说就是提取path进行相加，但是源码中有复杂的设定</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>util<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span></span>PathPattern</span>#combine\n<span class="token comment">// /* + /hotel =&gt; /hotel</span>\n<span class="token comment">// /*.* + /*.html =&gt; /*.html</span>\n<span class="token comment">// However:</span>\n<span class="token comment">// /usr + /user =&gt; /usr/user</span>\n<span class="token comment">// /{foo} + /bar =&gt; /{foo}/bar</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',10),r={href:"https://www.processon.com/view/link/615ea79e1efad4070b2d6707",target:"_blank",rel:"noopener noreferrer"},c={href:"https://www.processon.com/view/link/642ebb51a7da6b51ab13f83d",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Lk)("h2",{id:"映射",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#映射","aria-hidden":"true"},"#"),(0,e.eW)(" 映射")],-1),u=(0,e.Lk)("p",null,"一个请求过来如何找到对应请求链路",-1),k={href:"https://www.processon.com/view/link/615ea79e1efad4070b2d6707",target:"_blank",rel:"noopener noreferrer"},b={},d=(0,s(66262).A)(b,[["render",function(n,a){const s=(0,e.g2)("OutboundLink"),b=(0,e.g2)("common-progresson-snippet");return(0,e.uX)(),(0,e.CE)(e.FK,null,[p,t,(0,e.Lk)("p",null,[(0,e.Lk)("a",l,[(0,e.eW)("Source Code"),(0,e.bF)(s)])]),o,(0,e.Lk)("p",null,[(0,e.Lk)("a",r,[(0,e.eW)("Link"),(0,e.bF)(s)])]),(0,e.bF)(b,{src:"https://www.processon.com/view/link/615ea79e1efad4070b2d6707"}),(0,e.Lk)("p",null,[(0,e.Lk)("a",c,[(0,e.eW)("Link"),(0,e.bF)(s)])]),(0,e.bF)(b,{src:"https://www.processon.com/view/link/642ebb51a7da6b51ab13f83d"}),i,u,(0,e.Lk)("p",null,[(0,e.Lk)("a",k,[(0,e.eW)("Link"),(0,e.bF)(s)])]),(0,e.bF)(b,{src:"https://www.processon.com/view/link/615ea79e1efad4070b2d6707"})],64)}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);