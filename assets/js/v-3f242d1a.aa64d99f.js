"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[41481],{30105:(s,a,n)=>{n.r(a),n.d(a,{data:()=>t});const t={key:"v-3f242d1a",path:"/ElasticStack/33%20es%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/ElasticStack/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Elasticsearch的节点类型",slug:"elasticsearch的节点类型",children:[{level:3,title:"Master节点",slug:"master节点",children:[]},{level:3,title:"DataNode节点",slug:"datanode节点",children:[]},{level:3,title:"分片（Shard）",slug:"分片-shard",children:[]},{level:3,title:"副本",slug:"副本",children:[]},{level:3,title:"指定分片、副本数量",slug:"指定分片、副本数量",children:[]}]},{level:2,title:"文档写入原理❤️",slug:"文档写入原理❤️",children:[]},{level:2,title:"检索原理❤️",slug:"检索原理❤️",children:[]},{level:2,title:"准实时索引实现❤️",slug:"准实时索引实现❤️",children:[{level:3,title:"溢写到文件系统缓存",slug:"溢写到文件系统缓存",children:[]},{level:3,title:"写translog保障容错",slug:"写translog保障容错",children:[]},{level:3,title:"flush到磁盘",slug:"flush到磁盘",children:[]},{level:3,title:"segment合并",slug:"segment合并",children:[]}]}],filePathRelative:"ElasticStack/33 es架构原理.md"}},93722:(s,a,n)=>{n.r(a),n.d(a,{default:()=>o});const t=(0,n(20641).Fv)('<h2 id="elasticsearch的节点类型" tabindex="-1"><a class="header-anchor" href="#elasticsearch的节点类型" aria-hidden="true">#</a> <strong>Elasticsearch的节点类型</strong></h2><p>在Elasticsearch主要分成两类节点，一类是Master，一类是DataNode。</p><h3 id="master节点" tabindex="-1"><a class="header-anchor" href="#master节点" aria-hidden="true">#</a> <strong>Master节点</strong></h3><p>在Elasticsearch启动时，会选举出来一个Master节点。当某个节点启动后，然后使用Zen Discovery机制找到集群中的其他节点，并建立连接。 discovery.seed_hosts: [&quot;192.168.21.130&quot;, &quot;192.168.21.131&quot;, &quot;192.168.21.132&quot;]</p><p>并从候选主节点中选举出一个主节点。cluster.initial_master_nodes: [&quot;node1&quot;, &quot;node2&quot;,&quot;node3&quot;]</p><p>Master节点主要负责：</p><ol><li><strong>管理索引（创建索引、删除索引）、分配分片</strong></li><li>维护元数据</li><li>管理集群节点状态</li><li><strong>不负责数据写入和查询，比较轻量级</strong></li></ol><p>一个Elasticsearch集群中，只有一个Master节点。在生产环境中，内存可以相对小一点，但机器要稳定</p><h3 id="datanode节点" tabindex="-1"><a class="header-anchor" href="#datanode节点" aria-hidden="true">#</a> <strong>DataNode节点</strong></h3><p>在Elasticsearch集群中，会有N个DataNode节点。DataNode节点主要负责：</p><ol><li>数据写入、数据检索，大部分Elasticsearch的压力都在DataNode节点上</li><li>在生产环境中，内存最好配置大一些</li></ol><h3 id="分片-shard" tabindex="-1"><a class="header-anchor" href="#分片-shard" aria-hidden="true">#</a> <strong>分片（Shard）</strong></h3><p><strong>Elasticsearch是一个分布式的搜索引擎，索引的数据也是分成若干部分，分布在不同的服务器节点中</strong></p><p>一个索引（index）由多个shard（分片）组成，而分片是分布在不同的服务器上的,分布在不同服务器节点中的索引数据，就是分片（Shard）。</p><p>Elasticsearch会自动管理分片，如果发现分片分布不均衡，就会自动迁移</p><h3 id="副本" tabindex="-1"><a class="header-anchor" href="#副本" aria-hidden="true">#</a> <strong>副本</strong></h3><p>为了对Elasticsearch的分片进行容错，假设某个节点不可用，会导致整个索引库都将不可用。所以，需要对分片进行副本容错。每一个分片都会有对应的副本。</p><p>在Elasticsearch中，默认创建的索引为1个分片、每个分片有1个主分片和1个副本分片。</p><p>每个分片都会有一个Primary Shard（主分片），也会有若干个Replica Shard（副本分片）</p><p>Primary Shard和Replica Shard不在同一个节点上</p><h3 id="指定分片、副本数量" tabindex="-1"><a class="header-anchor" href="#指定分片、副本数量" aria-hidden="true">#</a> <strong>指定分片、副本数量</strong></h3><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>PUT /job_idx_shard_temp\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;mappings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;long&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;store&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;area&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;store&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;exp&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;store&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;edu&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;store&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;salary&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;store&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;job_type&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;store&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;cmp&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;store&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;pv&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;keyword&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;store&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;store&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;jd&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;number_of_shards&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;number_of_replicas&quot;</span><span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="文档写入原理❤️" tabindex="-1"><a class="header-anchor" href="#文档写入原理❤️" aria-hidden="true">#</a> 文档写入原理❤️</h2><p><img src="/images/elasticsearch/image-20210503014715892.png" alt="image-20210503014715892"></p><ol><li>选择任意一个DataNode发送请求，例如：node2。此时，node2就成为一个coordinating node（协调节点）</li><li>计算得到文档要写入的分片: shard = hash(routing) % number_of_primary_shards routing 是一个可变值，默认是文档的 _id</li><li>coordinating node会进行路由，将请求转发给对应的primary shard所在的DataNode（假设primary shard在node1、replica shard在node2）</li><li>node1节点上的Primary Shard处理请求，写入数据到索引库中，并将数据同步到Replica shard</li><li>Primary Shard和Replica Shard都保存好了文档，返回client</li></ol><hr><h2 id="检索原理❤️" tabindex="-1"><a class="header-anchor" href="#检索原理❤️" aria-hidden="true">#</a> 检索原理❤️</h2><p><img src="/images/elasticsearch/3511" alt="img"></p><ol><li>client发起查询请求，某个DataNode接收到请求，该DataNode就会成为协调节点（Coordinating Node）</li><li>协调节点（Coordinating Node）将查询请求广播到每一个数据节点，<strong>这些数据节点的分片会处理该查询请求</strong></li><li>每个分片进行数据查询，将符合条件的数据放在一个优先队列中，并将这些数据的文档ID、节点信息、分片信息返回给协调节点</li><li>协调节点将所有的结果进行汇总，并进行全局排序</li><li>协调节点向包含这些文档ID的分片发送get请求，对应的分片将文档数据返回给协调节点，最后协调节点将数据返回给客户端</li></ol><h2 id="准实时索引实现❤️" tabindex="-1"><a class="header-anchor" href="#准实时索引实现❤️" aria-hidden="true">#</a> 准实时索引实现❤️</h2><blockquote><p>实时搜索：刚刚加入的数据，就可以被搜索出来</p></blockquote><img src="/images/elasticsearch/3554" alt="img" style="zoom:50%;"><h3 id="溢写到文件系统缓存" tabindex="-1"><a class="header-anchor" href="#溢写到文件系统缓存" aria-hidden="true">#</a> <strong>溢写到文件系统缓存</strong></h3><p>当数据写入到ES分片时，会首先写入到内存中，然后通过内存的buffer生成一个segment，并刷到<strong>文件系统缓存</strong>中，<strong>数据可以被检索</strong>（注意不是直接刷到磁盘,在内存Memory Buffer中还不能被检索）</p><p>ES中默认1秒，refresh一次</p><h3 id="写translog保障容错" tabindex="-1"><a class="header-anchor" href="#写translog保障容错" aria-hidden="true">#</a> <strong>写translog保障容错</strong></h3><p>在写入到内存中的同时，也会记录translog日志，在refresh期间出现异常，会根据translog来进行数据恢复</p><p>等到文件系统缓存中的segment数据都刷到磁盘中，清空translog文件</p><h3 id="flush到磁盘" tabindex="-1"><a class="header-anchor" href="#flush到磁盘" aria-hidden="true">#</a> <strong>flush到磁盘</strong></h3><p>ES默认每隔30分钟会将文件系统缓存的数据刷入到磁盘</p><h3 id="segment合并" tabindex="-1"><a class="header-anchor" href="#segment合并" aria-hidden="true">#</a> <strong>segment合并</strong></h3><p>Segment太多时，ES定期会将多个segment合并成为大的segment，减少索引查询时IO开销，此阶段ES会真正的物理删除</p>',42),e={},o=(0,n(66262).A)(e,[["render",function(s,a){return t}]])},66262:(s,a)=>{a.A=(s,a)=>{const n=s.__vccOpts||s;for(const[s,t]of a)n[s]=t;return n}}}]);