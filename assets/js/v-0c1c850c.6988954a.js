"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[6593],{53753:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-0c1c850c",path:"/netty/21%20ByteBuf.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/netty/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"ByteBuf",slug:"bytebuf",children:[]},{level:2,title:"使用模式",slug:"使用模式",children:[{level:3,title:"堆缓冲区",slug:"堆缓冲区",children:[]},{level:3,title:"直接缓冲区",slug:"直接缓冲区",children:[]},{level:3,title:"复合缓冲区",slug:"复合缓冲区",children:[]}]},{level:2,title:"分配",slug:"分配",children:[{level:3,title:"ByteBufAllocator 接口",slug:"bytebufallocator-接口",children:[]},{level:3,title:"Unpooled缓冲区",slug:"unpooled缓冲区",children:[]}]},{level:2,title:"字符串",slug:"字符串",children:[]},{level:2,title:"随机/顺序访问索引",slug:"随机-顺序访问索引",children:[{level:3,title:"ByteBuf操作",slug:"bytebuf操作",children:[]}]},{level:2,title:"可丢弃的字节",slug:"可丢弃的字节",children:[{level:3,title:"可读字节",slug:"可读字节",children:[]},{level:3,title:"可写字节❤️",slug:"可写字节❤️",children:[]}]},{level:2,title:"索引管理",slug:"索引管理",children:[{level:3,title:"查找操作",slug:"查找操作",children:[]}]},{level:2,title:"派生缓冲区",slug:"派生缓冲区",children:[]},{level:2,title:"引用计数",slug:"引用计数",children:[]},{level:2,title:"工具类❤️",slug:"工具类❤️",children:[]},{level:2,title:"资源释放",slug:"资源释放",children:[]}],filePathRelative:"netty/21 ByteBuf.md"}},21269:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(20641);const t=(0,e.Fv)('<h2 id="bytebuf" tabindex="-1"><a class="header-anchor" href="#bytebuf" aria-hidden="true">#</a> ByteBuf</h2><ul><li>它可以被用户自定义的缓冲区类型扩展；</li><li>通过内置的复合缓冲区类型实现了透明的零拷贝；</li><li>容量可以按需增长（类似于JDK 的StringBuilder）；</li><li>在读和写这两种模式之间切换不需要调用ByteBuffer 的flip()方法；</li><li>读和写使用了不同的索引；</li><li>支持方法的链式调用；</li><li>支持引用计数；</li><li>支持池化。</li></ul><blockquote><p>ByteBuf 维护了两个不同的索引，名称以read 或者write 开头的ByteBuf 方法，将会推进其对应的索引，而名称以set 或者get 开头的操作则不会</p></blockquote>',3),c=(0,e.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e.Lk)("pre",{class:"language-java"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token keyword"},"import"),(0,e.eW)(),(0,e.Lk)("span",{class:"token import"},[(0,e.Lk)("span",{class:"token namespace"},[(0,e.eW)("io"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("netty"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("buffer"),(0,e.Lk)("span",{class:"token punctuation"},".")]),(0,e.Lk)("span",{class:"token class-name"},"ByteBuf")]),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token keyword"},"import"),(0,e.eW)(),(0,e.Lk)("span",{class:"token import"},[(0,e.Lk)("span",{class:"token namespace"},[(0,e.eW)("io"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("netty"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("buffer"),(0,e.Lk)("span",{class:"token punctuation"},".")]),(0,e.Lk)("span",{class:"token class-name"},"ByteBufUtil")]),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token keyword"},"import"),(0,e.eW)(),(0,e.Lk)("span",{class:"token import"},[(0,e.Lk)("span",{class:"token namespace"},[(0,e.eW)("io"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("netty"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("buffer"),(0,e.Lk)("span",{class:"token punctuation"},".")]),(0,e.Lk)("span",{class:"token class-name"},"Unpooled")]),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"NettyByteBuf"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token keyword"},"static"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"String"),(0,e.eW)(" msg "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"hello"'),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"static"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"void"),(0,e.eW)(),(0,e.Lk)("span",{class:"token function"},"main"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token class-name"},"String"),(0,e.Lk)("span",{class:"token punctuation"},"["),(0,e.Lk)("span",{class:"token punctuation"},"]"),(0,e.eW)(" args"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token comment"},"// 创建byteBuf对象，该对象内部包含一个字节数组byte[10]"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token comment"},"// 通过readerindex和writerIndex和capacity，将buffer分成三个区域"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token comment"},"// 已经读取的区域：[0,readerindex)"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token comment"},"// 可读取的区域：[readerindex,writerIndex)"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token comment"},"// 可写的区域: [writerIndex,capacity)"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"ByteBuf"),(0,e.eW)(" buffer "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"Unpooled"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"buffer"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token number"},"10"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token class-name"},"ByteBufUtil"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"prettyHexDump"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("buffer"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token keyword"},"for"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token keyword"},"int"),(0,e.eW)(" i "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"0"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)(" i "),(0,e.Lk)("span",{class:"token operator"},"<"),(0,e.eW)(" msg"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"length"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)(" i"),(0,e.Lk)("span",{class:"token operator"},"++"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n            buffer"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"writeByte"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("msg"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"charAt"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("i"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token class-name"},"ByteBufUtil"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"prettyHexDump"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("buffer"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},'"------------------"'),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token keyword"},"for"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token keyword"},"int"),(0,e.eW)(" i "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"0"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("i"),(0,e.Lk)("span",{class:"token operator"},"<"),(0,e.eW)("msg"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"length"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("i"),(0,e.Lk)("span",{class:"token operator"},"++"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n            "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token keyword"},"char"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("buffer"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"getByte"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("i"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token class-name"},"ByteBufUtil"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"prettyHexDump"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("buffer"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},'"------------------"'),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n\n        "),(0,e.Lk)("span",{class:"token keyword"},"for"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token keyword"},"int"),(0,e.eW)(" i "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"0"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("i"),(0,e.Lk)("span",{class:"token operator"},"<"),(0,e.eW)("msg"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"length"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("i"),(0,e.Lk)("span",{class:"token operator"},"++"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n            "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token keyword"},"char"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("buffer"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"readByte"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token class-name"},"ByteBufUtil"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"prettyHexDump"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("buffer"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},'"------------------"'),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token doc-comment comment"},"/**\n *\n +-------------------------------------------------+\n |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n +--------+-------------------------------------------------+----------------+\n |00000000| 68 65 6c 6c 6f                                  |hello           |\n +--------+-------------------------------------------------+----------------+\n ------------------\n h\n e\n l\n l\n o\n +-------------------------------------------------+\n |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n +--------+-------------------------------------------------+----------------+\n |00000000| 68 65 6c 6c 6f                                  |hello           |\n +--------+-------------------------------------------------+----------------+\n ------------------\n h\n e\n l\n l\n o\n\n ------------------\n\n */"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers"},[(0,e.Lk)("span",{class:"line-number"},"1"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"2"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"3"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"4"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"5"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"6"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"7"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"8"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"9"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"10"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"11"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"12"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"13"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"14"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"15"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"16"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"17"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"18"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"19"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"20"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"21"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"22"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"23"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"24"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"25"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"26"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"27"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"28"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"29"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"30"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"31"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"32"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"33"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"34"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"35"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"36"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"37"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"38"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"39"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"40"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"41"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"42"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"43"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"44"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"45"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"46"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"47"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"48"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"49"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"50"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"51"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"52"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"53"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"54"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"55"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"56"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"57"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"58"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"59"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"60"),(0,e.Lk)("br")])],-1),l=(0,e.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e.Lk)("pre",{class:"language-java"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"NettyByteBuf2"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"static"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"void"),(0,e.eW)(),(0,e.Lk)("span",{class:"token function"},"main"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token class-name"},"String"),(0,e.Lk)("span",{class:"token punctuation"},"["),(0,e.Lk)("span",{class:"token punctuation"},"]"),(0,e.eW)(" args"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"ByteBuf"),(0,e.eW)(" bytebuf "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"Unpooled"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"copiedBuffer"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},'"Hello World"'),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"Charset"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"forName"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},'"utf-8"'),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token class-name"},"ByteBufUtil"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"prettyHexDump"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("bytebuf"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n\n        "),(0,e.Lk)("span",{class:"token keyword"},"if"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("bytebuf"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"hasArray"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n            "),(0,e.Lk)("span",{class:"token keyword"},"byte"),(0,e.Lk)("span",{class:"token punctuation"},"["),(0,e.Lk)("span",{class:"token punctuation"},"]"),(0,e.eW)(" content "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(" bytebuf"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"array"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n            "),(0,e.Lk)("span",{class:"token comment"},"//将content转成字符串"),(0,e.eW)("\n            "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token keyword"},"new"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"String"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("content"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"Charset"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"forName"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},'"utf-8"'),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n            "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token class-name"},"ByteBufUtil"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"prettyHexDump"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("bytebuf"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n\n            "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},'"readable bytes = "'),(0,e.Lk)("span",{class:"token operator"},"+"),(0,e.eW)("bytebuf"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"readableBytes"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n\n            "),(0,e.Lk)("span",{class:"token comment"},"// 范围读取"),(0,e.eW)("\n            "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("bytebuf"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"getCharSequence"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token number"},"0"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.Lk)("span",{class:"token number"},"5"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.Lk)("span",{class:"token class-name"},"Charset"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"forName"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},'"utf-8"'),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n            "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("bytebuf"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"getCharSequence"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token number"},"6"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.Lk)("span",{class:"token number"},"5"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.Lk)("span",{class:"token class-name"},"Charset"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"forName"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},'"utf-8"'),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n            "),(0,e.Lk)("span",{class:"token class-name"},"System"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("out"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"println"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token class-name"},"ByteBufUtil"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"prettyHexDump"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("bytebuf"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n        "),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token doc-comment comment"},"/**\n *          +-------------------------------------------------+\n *          |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n * +--------+-------------------------------------------------+----------------+\n * |00000000| 48 65 6c 6c 6f 20 57 6f 72 6c 64                |Hello World     |\n * +--------+-------------------------------------------------+----------------+\n * Hello World\n *          +-------------------------------------------------+\n *          |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n * +--------+-------------------------------------------------+----------------+\n * |00000000| 48 65 6c 6c 6f 20 57 6f 72 6c 64                |Hello World     |\n * +--------+-------------------------------------------------+----------------+\n * readable bytes = 11\n * Hello\n * World\n *          +-------------------------------------------------+\n *          |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |\n * +--------+-------------------------------------------------+----------------+\n * |00000000| 48 65 6c 6c 6f 20 57 6f 72 6c 64                |Hello World     |\n * +--------+-------------------------------------------------+----------------+\n */"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers"},[(0,e.Lk)("span",{class:"line-number"},"1"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"2"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"3"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"4"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"5"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"6"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"7"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"8"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"9"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"10"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"11"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"12"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"13"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"14"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"15"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"16"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"17"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"18"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"19"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"20"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"21"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"22"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"23"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"24"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"25"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"26"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"27"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"28"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"29"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"30"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"31"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"32"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"33"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"34"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"35"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"36"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"37"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"38"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"39"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"40"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"41"),(0,e.Lk)("br")])],-1),p=(0,e.Fv)('<h2 id="使用模式" tabindex="-1"><a class="header-anchor" href="#使用模式" aria-hidden="true">#</a> 使用模式</h2><h3 id="堆缓冲区" tabindex="-1"><a class="header-anchor" href="#堆缓冲区" aria-hidden="true">#</a> <strong>堆缓冲区</strong></h3><p>最常用的ByteBuf 模式是将数据存储在JVM 的堆空间中。这种模式被称为支撑数组（backing array），它能在没有使用池化的情况下提供快速的分配和释放。可以由hasArray()来判断检查ByteBuf 是否由数组支撑。如果不是，则这是一个直接缓冲区。</p><h3 id="直接缓冲区" tabindex="-1"><a class="header-anchor" href="#直接缓冲区" aria-hidden="true">#</a> <strong>直接缓冲区</strong></h3><p>直接缓冲区是另外一种ByteBuf 模式。</p><p>直接缓冲区的主要缺点是，相对于基于堆的缓冲区，它们的分配和释放都较为昂贵。</p><h3 id="复合缓冲区" tabindex="-1"><a class="header-anchor" href="#复合缓冲区" aria-hidden="true">#</a> <strong>复合缓冲区</strong></h3><p>复合缓冲区CompositeByteBuf，它为多个ByteBuf 提供一个聚合视图。比如HTTP 协议，分为消息头和消息体，这两部分可能由应用程序的不同模块产生，各有各的ByteBuf，将会在消息被发送的时候组装为一个ByteBuf，此时可以将这两个ByteBuf聚合为一个CompositeByteBuf，然后使用统一和通用的ByteBuf API来操作。</p><h2 id="分配" tabindex="-1"><a class="header-anchor" href="#分配" aria-hidden="true">#</a> 分配</h2><blockquote><p>如何在我们的程序中获得ByteBuf的实例，并使用它呢？Netty提供了两种方式</p></blockquote><h3 id="bytebufallocator-接口" tabindex="-1"><a class="header-anchor" href="#bytebufallocator-接口" aria-hidden="true">#</a> <strong>ByteBufAllocator 接口</strong></h3><p>Netty 通过interface ByteBufAllocator分配我们所描述过的任意类型的ByteBuf 实例</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>buffer()</td><td>返回一个基于堆或者直接内存存储的ByteBuf</td></tr><tr><td>heapBuffer()</td><td>返回一个基于堆内存存储的ByteBuf</td></tr><tr><td>directBuffer()</td><td>返回一个基于直接内存存储的ByteBuf</td></tr><tr><td>compositeBuffer()</td><td>返回一个可以通过添加最大到指定数目的基于堆的或者直接内存存储的缓冲区来扩展的CompositeByteBuf</td></tr><tr><td>ioBuffer()</td><td>返回一个用于套接字的I/O 操作的ByteBuf，当所运行的环境具有sun.misc.Unsafe 支持时，返回基于直接内存存储的ByteBuf，否则返回基于堆内存存储的ByteBuf；当指定使用PreferHeapByteBufAllocator 时，则只会返回基于堆内存存储的ByteBuf。</td></tr></tbody></table><p>可以通过Channel（每个都可以有一个不同的ByteBufAllocator 实例）或者绑定到ChannelHandler 的ChannelHandlerContext 获取一个到ByteBufAllocator 的引用。</p><p>Netty提供了两种ByteBufAllocator的实现：PooledByteBufAllocator和Unpooled-ByteBufAllocator。前者池化了ByteBuf的实例以提高性能并最大限度地减少内存碎片。后者的实现不池化ByteBuf实例，并且在每次它被调用时都会返回一个新的实例。</p><h3 id="unpooled缓冲区" tabindex="-1"><a class="header-anchor" href="#unpooled缓冲区" aria-hidden="true">#</a> Unpooled缓冲区</h3><p>Netty 提供了一个简单的称为Unpooled 的工具类，它提供了静态的辅助方法来创建未池化的ByteBuf实例。</p><ul><li>buffer() 返回一个未池化的基于堆内存存储的ByteBuf</li><li>directBuffer()返回一个未池化的基于直接内存存储的ByteBuf</li><li>wrappedBuffer() 返回一个包装了给定数据的ByteBuf</li><li>copiedBuffer() 返回一个复制了给定数据的ByteBuf</li></ul><p>Unpooled 类还可用于ByteBuf 同样可用于那些并不需要Netty 的其他组件的非网络项目</p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">channelRead0</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> msg<span class="token punctuation">)</span> \n    \n    msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span> <span class="token comment">// io.netty.util.CharsetUtil</span>\n    <span class="token comment">//底层就是</span>\n\tmsg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h2 id="随机-顺序访问索引" tabindex="-1"><a class="header-anchor" href="#随机-顺序访问索引" aria-hidden="true">#</a> 随机/顺序访问索引</h2><p>如同在普通的Java 字节数组中一样，ByteBuf 的索引是从零开始的：第一个字节的索引是0，最后一个字节的索引总是capacity() - 1。使用那些需要一个索引值参数(<strong>随机访问</strong>,也即是数组下标)的方法（的其中）之一来访问数据既不会改变readerIndex 也不会改变writerIndex。如果有需要，也可以通过调用readerIndex(index)或者writerIndex(index)来手动移动这两者。<strong>顺序访问</strong>通过索引访问</p><p>有两种类别的读/写操作：</p><ul><li><p>get()和set()操作，从给定的索引开始，并且保持索引不变；get+数据字长（bool.byte,int,short,long,bytes）</p></li><li><p>read()和write()操作，从给定的索引开始，并且会根据已经访问过的字节数对索引进行调整。</p></li></ul><h3 id="bytebuf操作" tabindex="-1"><a class="header-anchor" href="#bytebuf操作" aria-hidden="true">#</a> ByteBuf操作</h3><ul><li>isReadable() 如果至少有一个字节可供读取，则返回true</li><li>isWritable() 如果至少有一个字节可被写入，则返回true</li><li>readableBytes() 返回可被读取的字节数</li><li>writableBytes() 返回可被写入的字节数</li><li>capacity() 返回ByteBuf 可容纳的字节数。在此之后，它会尝试再次扩展直到达到maxCapacity()</li><li>maxCapacity() 返回ByteBuf 可以容纳的最大字节数</li><li>hasArray() 如果ByteBuf 由一个字节数组支撑，则返回true</li><li>array() 如果 ByteBuf 由一个字节数组支撑则返回该数组；否则，它将抛出一个UnsupportedOperationException 异常</li></ul><h2 id="可丢弃的字节" tabindex="-1"><a class="header-anchor" href="#可丢弃的字节" aria-hidden="true">#</a> 可丢弃的字节</h2><p>可丢弃字节的分段包含了已经被读过的字节。通过调用discardReadBytes()方法，可以丢弃它们并回收空间。这个分段的初始大小为0，存储在readerIndex 中，会随着read 操作的执行而增加（get*操作不会移动readerIndex）。</p><p>缓冲区上调用discardReadBytes()方法后，可丢弃字节分段中的空间已经变为可写的了。频繁地调用discardReadBytes()方法以确保可写分段的最大化，但是请注意，这将极有可能会导致内存复制，因为可读字节必须被移动到缓冲区的开始位置。建议只在有真正需要的时候才这样做，例如，当内存非常宝贵的时候。</p><p><img src="/images/netty/10114.png" alt="img"></p><h3 id="可读字节" tabindex="-1"><a class="header-anchor" href="#可读字节" aria-hidden="true">#</a> <strong>可读字节</strong></h3><p>ByteBuf 的可读字节分段存储了实际数据。新分配的、包装的或者复制的缓冲区的默认的readerIndex 值为0</p><h3 id="可写字节❤️" tabindex="-1"><a class="header-anchor" href="#可写字节❤️" aria-hidden="true">#</a> <strong>可写字节</strong>❤️</h3><p>可写字节分段是指一个拥有未定义内容的、写入就绪的内存区域。新分配的缓冲区的writerIndex 的默认值为0。任何名称以write 开头的操作都将从当前的writerIndex 处开始写数据，并将它增加已经写入的字节数</p><p><img src="/images/netty/10115.png" alt="https://note.youdao.com/yws/public/resource/f71d324d40f6c4bfb67e419a8fb42862/xmlnote/OFFICEF514A94F437C4DB9A88C5A69C176BCEA/10115"></p><h2 id="索引管理" tabindex="-1"><a class="header-anchor" href="#索引管理" aria-hidden="true">#</a> 索引管理</h2><p>调用markReaderIndex()、markWriterIndex()、resetWriterIndex()和resetReaderIndex()来标记和重置ByteBuf 的readerIndex 和writerIndex。</p><p>也可以通过调用readerIndex(int)或者writerIndex(int)来将索引移动到指定位置。试图将任何一个索引设置到一个无效的位置都将导致一个IndexOutOfBoundsException。</p><p>可以通过调用clear()方法来将readerIndex 和writerIndex 都设置为0。注意，这并不会清除内存中的内容。</p><h3 id="查找操作" tabindex="-1"><a class="header-anchor" href="#查找操作" aria-hidden="true">#</a> 查找操作</h3><ul><li><p>在ByteBuf中有多种可以用来确定指定值的索引的方法。最简单的是使用indexOf()方法。</p></li><li><p>较复杂的查找可以通过调用forEachByte()。下面的代码展示了一个查找回车符<code>（\\r）</code>的例子。</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ByteBuf</span> buffer <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> index <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">forEachByte</span><span class="token punctuation">(</span><span class="token class-name">ByteBufProcessor</span><span class="token punctuation">.</span><span class="token constant">FIND_CR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="派生缓冲区" tabindex="-1"><a class="header-anchor" href="#派生缓冲区" aria-hidden="true">#</a> <strong>派生缓冲区</strong></h2><p>派生缓冲区为ByteBuf 提供了以专门的方式来呈现其内容的视图。这类视图是通过以下方法被创建的：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">slice</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">unmodifiableBuffer</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">ByteOrder</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">readSlice</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>每个这些方法都将返回一个新的ByteBuf 实例，它具有自己的读索引、写索引和标记索引。其内部存储和JDK 的ByteBuffer 一样也是共享的。</p><p><strong>ByteBuf</strong> 复制 如果需要一个现有缓冲区的真实副本，请使用copy()或者copy(int, int)方法。不同于派生缓冲区，由这个调用所返回的ByteBuf 拥有独立的数据副本。</p><h2 id="引用计数" tabindex="-1"><a class="header-anchor" href="#引用计数" aria-hidden="true">#</a> <strong>引用计数</strong></h2><p>引用计数是一种通过在某个对象所持有的资源不再被其他对象引用时释放该对象所持有的资源来优化内存使用和性能的技术。</p><p>Netty 在第4 版中为ByteBuf引入了引用计数技术，<code> interface ReferenceCounted</code></p><h2 id="工具类❤️" tabindex="-1"><a class="header-anchor" href="#工具类❤️" aria-hidden="true">#</a> 工具类❤️</h2><p><strong>ByteBufUtil</strong> 提供了用于操作ByteBuf 的静态的辅助方法。因为这个API 是通用的，并且和池化无关，所以这些方法已然在分配类的外部实现。</p><p>这些静态方法中最有价值的可能就是hexdump()方法，它以十六进制的表示形式打印ByteBuf 的内容。这在各种情况下都很有用，例如，出于调试的目的记录ByteBuf 的内容。十六进制的表示通常会提供一个比字节值的直接表示形式更加有用的日志条目，此外，十六进制的版本还可以很容易地转换回实际的字节表示。</p><p>另一个有用的方法是boolean equals(ByteBuf, ByteBuf)，它被用来判断两个ByteBuf实例的相等性。</p><h2 id="资源释放" tabindex="-1"><a class="header-anchor" href="#资源释放" aria-hidden="true">#</a> 资源释放</h2><p>当某个ChannelInboundHandler 的实现重写channelRead()方法时，它要负责显式地释放与池化的ByteBuf 实例相关的内存。Netty 为此提供了一个实用方法ReferenceCountUtil.release()</p><p>Netty 将使用WARN 级别的日志消息记录未释放的资源，使得可以非常简单地在代码中发现违规的实例。但是以这种方式管理资源可能很繁琐。一个更加简单的方式是使用SimpleChannelInboundHandler，SimpleChannelInboundHandler 会自动释放资源。</p><blockquote><p>对于入站请求，Netty的EventLoo在处理Channel的读操作时进行分配ByteBuf，对于这类ByteBuf，需要我们自行进行释放，有三种方式：</p></blockquote><ul><li>使用SimpleChannelInboundHandler</li><li>在重写channelRead()方法使用ReferenceCountUtil.release()</li><li>在重写channelRead()方法使用使用ctx.fireChannelRead继续向后传递；</li></ul><blockquote><p>对于出站请求，不管ByteBuf是否由我们的业务创建的，当调用了write或者writeAndFlush方法后，Netty会自动替我们释放，不需要我们业务代码自行释放</p></blockquote>',62),o={},k=(0,a(66262).A)(o,[["render",function(n,s){const a=(0,e.g2)("CodeGroupItem"),o=(0,e.g2)("CodeGroup");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,(0,e.bF)(o,null,{default:(0,e.k6)((()=>[(0,e.bF)(a,{title:"NettyByteBuf"},{default:(0,e.k6)((()=>[c])),_:1}),(0,e.bF)(a,{title:"NettyByteBuf2"},{default:(0,e.k6)((()=>[l])),_:1})])),_:1}),p],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);