"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[31574],{92576:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-a70c7804",path:"/javascript/01%20%E5%8F%98%E9%87%8F%E4%B8%8E%E7%B1%BB%E5%9E%8B.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/javascript/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"1 类型",slug:"_1-类型",children:[{level:3,title:"1.1 基本类型",slug:"_1-1-基本类型",children:[]},{level:3,title:"1.2 检测类型typeof",slug:"_1-2-检测类型typeof",children:[]},{level:3,title:"1.3  instanceof",slug:"_1-3-instanceof",children:[]},{level:3,title:"1.4 比较",slug:"_1-4-比较",children:[]},{level:3,title:"1.5 类型转换",slug:"_1-5-类型转换",children:[]}]},{level:2,title:"2常用内置方法",slug:"_2常用内置方法",children:[{level:3,title:"2.1 isNaN",slug:"_2-1-isnan",children:[]},{level:3,title:"2.2 Object.is比较",slug:"_2-2-object-is比较",children:[]}]},{level:2,title:"3 逻辑运算符",slug:"_3-逻辑运算符",children:[]},{level:2,title:"4 Object常用方法",slug:"_4-object常用方法",children:[{level:3,title:"4.1 Object.keys",slug:"_4-1-object-keys",children:[]},{level:3,title:"4.2 Object.is",slug:"_4-2-object-is",children:[]}]}],filePathRelative:"javascript/01 变量与类型.md"}},35940:(a,n,s)=>{s.r(n),s.d(n,{default:()=>r});const e=(0,s(20641).Fv)('<h2 id="_1-类型" tabindex="-1"><a class="header-anchor" href="#_1-类型" aria-hidden="true">#</a> 1 类型</h2><h3 id="_1-1-基本类型" tabindex="-1"><a class="header-anchor" href="#_1-1-基本类型" aria-hidden="true">#</a> 1.1 基本类型</h3><h4 id="_1-1-1-number-数字-整数-小数-负数" tabindex="-1"><a class="header-anchor" href="#_1-1-1-number-数字-整数-小数-负数" aria-hidden="true">#</a> 1.1.1 number 数字 整数 小数 负数</h4><h4 id="_1-1-2-string-字符串" tabindex="-1"><a class="header-anchor" href="#_1-1-2-string-字符串" aria-hidden="true">#</a> 1.1.2 string 字符串</h4><h4 id="_1-1-3-boolean-布尔值" tabindex="-1"><a class="header-anchor" href="#_1-1-3-boolean-布尔值" aria-hidden="true">#</a> 1.1.3 boolean 布尔值</h4><h4 id="_1-1-4-undefined-未赋值" tabindex="-1"><a class="header-anchor" href="#_1-1-4-undefined-未赋值" aria-hidden="true">#</a> 1.1.4 undefined 未赋值</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token comment">// 也就是 a = undefined</span>\n\n<span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">===</span> <span class="token keyword">undefined</span>  <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-1-5-null-空引用" tabindex="-1"><a class="header-anchor" href="#_1-1-5-null-空引用" aria-hidden="true">#</a> 1.1.5 null 空引用</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> language <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_1-1-6-symbol-es6" tabindex="-1"><a class="header-anchor" href="#_1-1-6-symbol-es6" aria-hidden="true">#</a> 1.1.6 Symbol(ES6)</h4><h3 id="_1-2-检测类型typeof" tabindex="-1"><a class="header-anchor" href="#_1-2-检测类型typeof" aria-hidden="true">#</a> 1.2 检测类型typeof</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表达式</span>\n<span class="token keyword">typeof</span> variable\n<span class="token comment">// 函数</span>\n<span class="token keyword">typeof</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_1-2-1-typeof-nan" tabindex="-1"><a class="header-anchor" href="#_1-2-1-typeof-nan" aria-hidden="true">#</a> 1.2.1 typeof(NaN)</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_1-3-instanceof" tabindex="-1"><a class="header-anchor" href="#_1-3-instanceof" aria-hidden="true">#</a> 1.3 instanceof</h3><h4 id="_1-3-1-是否是数组类型" tabindex="-1"><a class="header-anchor" href="#_1-3-1-是否是数组类型" aria-hidden="true">#</a> 1.3.1 是否是数组类型</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>variable <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_1-4-比较" tabindex="-1"><a class="header-anchor" href="#_1-4-比较" aria-hidden="true">#</a> 1.4 比较</h3><h4 id="_1-4-1-不严格等于" tabindex="-1"><a class="header-anchor" href="#_1-4-1-不严格等于" aria-hidden="true">#</a> 1.4.1 == 不严格等于</h4><ol><li>只要内容相同即可</li><li>类型不要求</li></ol><h4 id="_1-4-2-严格等于" tabindex="-1"><a class="header-anchor" href="#_1-4-2-严格等于" aria-hidden="true">#</a> 1.4.2 === 严格等于</h4><ol><li>内容和类型都必须一样</li></ol><h3 id="_1-5-类型转换" tabindex="-1"><a class="header-anchor" href="#_1-5-类型转换" aria-hidden="true">#</a> 1.5 类型转换</h3><h4 id="_1-5-1-字符串转数字" tabindex="-1"><a class="header-anchor" href="#_1-5-1-字符串转数字" aria-hidden="true">#</a> 1.5.1 字符串转数字</h4><h5 id="_1-parseint-转为正数" tabindex="-1"><a class="header-anchor" href="#_1-parseint-转为正数" aria-hidden="true">#</a> 1 parseInt 转为正数</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 会去掉a</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;20a&quot;</span><span class="token punctuation">)</span> <span class="token comment">// = 20</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_2-number-可以能转化为浮点数" tabindex="-1"><a class="header-anchor" href="#_2-number-可以能转化为浮点数" aria-hidden="true">#</a> 2 Number 可以能转化为浮点数</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;20a&quot;</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_3-parsefloat" tabindex="-1"><a class="header-anchor" href="#_3-parsefloat" aria-hidden="true">#</a> 3 parseFloat</h5><h4 id="_1-5-2-转字符串" tabindex="-1"><a class="header-anchor" href="#_1-5-2-转字符串" aria-hidden="true">#</a> 1.5.2 转字符串</h4><h5 id="_1-tostring" tabindex="-1"><a class="header-anchor" href="#_1-tostring" aria-hidden="true">#</a> 1 toString()</h5><h6 id="转换成二进制" tabindex="-1"><a class="header-anchor" href="#转换成二进制" aria-hidden="true">#</a> 转换成二进制</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">true</span>\na<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span>\n<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 转换成二进制</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span>\na<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// &quot;11&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="_2-string" tabindex="-1"><a class="header-anchor" href="#_2-string" aria-hidden="true">#</a> 2 String</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// &quot;true&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_2常用内置方法" tabindex="-1"><a class="header-anchor" href="#_2常用内置方法" aria-hidden="true">#</a> 2常用内置方法</h2><h3 id="_2-1-isnan" tabindex="-1"><a class="header-anchor" href="#_2-1-isnan" aria-hidden="true">#</a> 2.1 isNaN</h3><h3 id="_2-2-object-is比较" tabindex="-1"><a class="header-anchor" href="#_2-2-object-is比较" aria-hidden="true">#</a> 2.2 Object.is比较</h3><h4 id="_2-2-1-nan比较" tabindex="-1"><a class="header-anchor" href="#_2-2-1-nan比较" aria-hidden="true">#</a> 2.2.1 NaN比较</h4><h5 id="_1-比较" tabindex="-1"><a class="header-anchor" href="#_1-比较" aria-hidden="true">#</a> 1 ===比较</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="_2-object-is比较" tabindex="-1"><a class="header-anchor" href="#_2-object-is比较" aria-hidden="true">#</a> 2 Object.is比较</h5><div class="language-jss ext-jss line-numbers-mode"><pre class="language-jss"><code>console.log(Object.is(NaN, NaN)); // true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_3-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_3-逻辑运算符" aria-hidden="true">#</a> 3 逻辑运算符</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">4</span> <span class="token comment">// a = 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_4-object常用方法" tabindex="-1"><a class="header-anchor" href="#_4-object常用方法" aria-hidden="true">#</a> 4 Object常用方法</h2><h3 id="_4-1-object-keys" tabindex="-1"><a class="header-anchor" href="#_4-1-object-keys" aria-hidden="true">#</a> 4.1 Object.keys</h3><h3 id="_4-2-object-is" tabindex="-1"><a class="header-anchor" href="#_4-2-object-is" aria-hidden="true">#</a> 4.2 Object.is</h3>',48),t={},r=(0,s(66262).A)(t,[["render",function(a,n){return e}]])},66262:(a,n)=>{n.A=(a,n)=>{const s=a.__vccOpts||a;for(const[a,e]of n)s[a]=e;return s}}}]);