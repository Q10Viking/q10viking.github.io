"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[56470],{5143:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6f64228d",path:"/FileSystem/02%20nio%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/FileSystem/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Path",slug:"path",children:[{level:3,title:"create path",slug:"create-path",children:[]},{level:3,title:"convert path",slug:"convert-path",children:[]},{level:3,title:"Join Two Path",slug:"join-two-path",children:[]},{level:3,title:"Creating a Path Between Two Paths",slug:"creating-a-path-between-two-paths",children:[]},{level:3,title:"Comparing Two Path",slug:"comparing-two-path",children:[]},{level:3,title:"iterator path name",slug:"iterator-path-name",children:[]}]},{level:2,title:"File",slug:"file",children:[{level:3,title:"checking file",slug:"checking-file",children:[]},{level:3,title:"delete file",slug:"delete-file",children:[]},{level:3,title:"copy file",slug:"copy-file",children:[]},{level:3,title:"move file",slug:"move-file",children:[]},{level:3,title:"file basic attributes",slug:"file-basic-attributes",children:[]},{level:3,title:"file store",slug:"file-store",children:[]}]},{level:2,title:"读写文件⭐",slug:"读写文件⭐",children:[{level:3,title:"读取小文件",slug:"读取小文件",children:[]},{level:3,title:"写小文件",slug:"写小文件",children:[]},{level:3,title:"Buffered I/O Methods for Text Files",slug:"buffered-i-o-methods-for-text-files",children:[]},{level:3,title:"Stream IO",slug:"stream-io",children:[]},{level:3,title:"Channel IO",slug:"channel-io",children:[]},{level:3,title:"create temp file ⭐",slug:"create-temp-file-⭐",children:[]}]},{level:2,title:"Random Access File",slug:"random-access-file",children:[]},{level:2,title:"文件系统",slug:"文件系统",children:[]}],filePathRelative:"FileSystem/02 nio中的文件操作.md"}},94427:(n,s,a)=>{a.r(s),a.d(s,{default:()=>fn});var p=a(20641);const t=(0,p.Lk)("h2",{id:"path",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#path","aria-hidden":"true"},"#"),(0,p.eW)(" Path")],-1),e={href:"https://docs.oracle.com/javase/tutorial/essential/io/pathOps.html",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Lk)("h3",{id:"create-path",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#create-path","aria-hidden":"true"},"#"),(0,p.eW)(" create path")],-1),c={class:"custom-container tip"},l=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),u=(0,p.Lk)("p",null,"代表一个文件或者文件夹的路径",-1),i={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter02/PathsMain.java",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathsMain</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> currentPathStr <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.dir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currentPathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// create path  尽管这个路劲不存在，但是也不会报错</span>\n        <span class="token class-name">Path</span> logsPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentPathStr<span class="token punctuation">,</span> <span class="token string">&quot;logs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;foo.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;toString: %s%n&quot;</span><span class="token punctuation">,</span> logsPath<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;getFileName: %s%n&quot;</span><span class="token punctuation">,</span> logsPath<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;getName(0): %s%n&quot;</span><span class="token punctuation">,</span> logsPath<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;getNameCount: %d%n&quot;</span><span class="token punctuation">,</span> logsPath<span class="token punctuation">.</span><span class="token function">getNameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;subpath(0,2): %s%n&quot;</span><span class="token punctuation">,</span> logsPath<span class="token punctuation">.</span><span class="token function">subpath</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;getParent: %s%n&quot;</span><span class="token punctuation">,</span> logsPath<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;getRoot: %s%n&quot;</span><span class="token punctuation">,</span> logsPath<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;toUri: %s%n&quot;</span><span class="token punctuation">,</span> logsPath<span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * D:\\learncode\\filesystem\n * toString: D:\\learncode\\filesystem\\logs\\foo.log\n * getFileName: foo.log\n * getName(0): learncode\n * getNameCount: 4\n * subpath(0,2): learncode\\filesystem\n * getParent: D:\\learncode\\filesystem\\logs\n * getRoot: D:\\\n * toUri: file:///D:/learncode/filesystem/logs/foo.log\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="convert-path" tabindex="-1"><a class="header-anchor" href="#convert-path" aria-hidden="true">#</a> convert path</h3>',2),k={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter02/ConvertPath.java",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Fv)('<ul><li>可以很方便将相对路径转换为绝对路径</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConvertPath</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// 设置相对路径，等价于 Paths.get(&quot;logs\\\\foo.log&quot;)</span>\n        <span class="token class-name">Path</span> logsPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;logs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;foo.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logsPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logsPath<span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logsPath<span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 与toAbsolutePath不同的是，如果该路径不存在则会报错NoSuchFileException</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logsPath<span class="token punctuation">.</span><span class="token function">toRealPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * logs\\foo.log\n * D:\\learncode\\filesystem\\logs\\foo.log\n * file:///D:/learncode/filesystem/logs/foo.log\n * Exception in thread &quot;main&quot; java.nio.file.NoSuchFileException: D:\\learncode\\filesystem\\logs\\foo.log\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="join-two-path" tabindex="-1"><a class="header-anchor" href="#join-two-path" aria-hidden="true">#</a> Join Two Path</h3>',3),b={class:"custom-container tip"},d=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),h=(0,p.Lk)("p",null,"可以很方便将绝对路径拼接相对路径",-1),g={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter02/JoinTwoPath.java",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinTwoPath</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\learncode\\\\filesystem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// D:\\learncode\\filesystem\\logs\\foo.log</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s %n&quot;</span><span class="token punctuation">,</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;logs/foo.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="creating-a-path-between-two-paths" tabindex="-1"><a class="header-anchor" href="#creating-a-path-between-two-paths" aria-hidden="true">#</a> Creating a Path Between Two Paths</h3>',2),y={class:"custom-container tip"},v=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),w=(0,p.Lk)("p",null,"两个路径之间的相对路径",-1),q={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter02/BetweenTwoPath.java",target:"_blank",rel:"noopener noreferrer"},S=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BetweenTwoPath</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> p1 <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> p3 <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;home/sally/bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 相对路径</span>\n        <span class="token class-name">Path</span> p1_to_p3 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">relativize</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// sally\\bar</span>\n        <span class="token class-name">Path</span> p3_to_p1 <span class="token operator">=</span> p3<span class="token punctuation">.</span><span class="token function">relativize</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ..\\..</span>\n        <span class="token class-name">Path</span> p3_to_p3 <span class="token operator">=</span> p3<span class="token punctuation">.</span><span class="token function">relativize</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为空</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n %s%n %s%n&quot;</span><span class="token punctuation">,</span>p1_to_p3<span class="token punctuation">,</span>p3_to_p1<span class="token punctuation">,</span>p3_to_p3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="comparing-two-path" tabindex="-1"><a class="header-anchor" href="#comparing-two-path" aria-hidden="true">#</a> Comparing Two Path</h3>',2),F={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter02/ComparingTwoPath.java",target:"_blank",rel:"noopener noreferrer"},P=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparingTwoPath</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> otherPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\learncode\\\\filesystem\\\\logs\\\\foo.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> beginPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> endPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;foo.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>otherPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// equality logic here</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;equal&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span>otherPath<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>beginPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// path begins with &quot;C:\\&quot;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;starts with &quot;</span> <span class="token operator">+</span> beginPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span>otherPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>endPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// path ends with &quot;foo.log&quot;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;end with &quot;</span> <span class="token operator">+</span> endPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="iterator-path-name" tabindex="-1"><a class="header-anchor" href="#iterator-path-name" aria-hidden="true">#</a> iterator path name</h3>',2),j={class:"custom-container tip"},x=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),L=(0,p.Lk)("p",null,"不包含root directory",-1),C={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter02/IteratorPathName.java",target:"_blank",rel:"noopener noreferrer"},T=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorPathName</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\learncode\\\\filesystem\\\\logs\\\\foo.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// The first element returned is that closest to the root in the directory tree.</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Path</span> name<span class="token operator">:</span> path<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * learncode\n * filesystem\n * logs\n * foo.log\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> File</h2><p>在java nio中提供了Files工具类结合使用Path，对文件和文件夹进行操作。</p><h3 id="checking-file" tabindex="-1"><a class="header-anchor" href="#checking-file" aria-hidden="true">#</a> checking file</h3>',4),I={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter03/CheckingFile.java",target:"_blank",rel:"noopener noreferrer"},O=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckingFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;imgs/avatar.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> path2 <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;imgs/avatar.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;file is exist? %s%n&quot;</span><span class="token punctuation">,</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token class-name">LinkOption</span><span class="token punctuation">.</span><span class="token constant">NOFOLLOW_LINKS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Is the same file? %s%n&quot;</span><span class="token punctuation">,</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isSameFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>path2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="delete-file" tabindex="-1"><a class="header-anchor" href="#delete-file" aria-hidden="true">#</a> delete file</h3>',2),B=(0,p.Lk)("p",null,"在删除文件夹的时候，如果该文件夹不为空，则不会进行删除",-1),E={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter03/DeleteFile.java",target:"_blank",rel:"noopener noreferrer"},R=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> dir <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> fileA <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 如果文件不为空，会报错 DirectoryNotEmptyException</span>\n            <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//            Files.delete(fileA);</span>\n        <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFileException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s: no such&quot;</span> <span class="token operator">+</span> <span class="token string">&quot; file or directory%n&quot;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DirectoryNotEmptyException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s not empty%n&quot;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// File permission problems are caught here.</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="copy-file" tabindex="-1"><a class="header-anchor" href="#copy-file" aria-hidden="true">#</a> copy file</h3>',2),A=(0,p.Lk)("p",null,"注意如果copy的是文件夹，那么文件夹下面的文件不会copy过去。",-1),W={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter03/CopyFile.java",target:"_blank",rel:"noopener noreferrer"},z=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter03\\\\b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter03\\\\b-copy.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// CopyOption see: https://docs.oracle.com/javase/tutorial/essential/io/copy.html</span>\n        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>target<span class="token punctuation">,</span> <span class="token class-name">StandardCopyOption</span><span class="token punctuation">.</span><span class="token constant">REPLACE_EXISTING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="move-file" tabindex="-1"><a class="header-anchor" href="#move-file" aria-hidden="true">#</a> move file</h3>',2),_=(0,p.Lk)("p",null,"注意，在移动文件夹的时候，不像copy文件夹那样，move会把文件夹下面的文件一起移动",-1),D={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter03/CopyDir.java",target:"_blank",rel:"noopener noreferrer"},N=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoveDir</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter03-2\\\\chapter03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="file-basic-attributes" tabindex="-1"><a class="header-anchor" href="#file-basic-attributes" aria-hidden="true">#</a> file basic attributes</h3>',2),V={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter03/BasicAttrFile.java",target:"_blank",rel:"noopener noreferrer"},Q=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicAttrFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;imgs\\\\avatar.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">BasicFileAttributes</span> attr <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAttributes</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;creationTime: &quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">creationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;lastAccessTime: &quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">lastAccessTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;lastModifiedTime: &quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">lastModifiedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;isDirectory: &quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;isOther: &quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">isOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;isRegularFile: &quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">isRegularFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;isSymbolicLink: &quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">isSymbolicLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;size: &quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * creationTime: 2022-10-09T07:29:07.22373Z\n * lastAccessTime: 2022-10-09T07:29:07.22373Z\n * lastModifiedTime: 2022-09-21T17:23:44.518Z\n * isDirectory: false\n * isOther: false\n * isRegularFile: true\n * isSymbolicLink: false\n * size: 39364\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="file-store" tabindex="-1"><a class="header-anchor" href="#file-store" aria-hidden="true">#</a> file store</h3>',2),M=(0,p.Lk)("p",null,"打印该文件所在磁盘的使用情况",-1),J={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter03/FileStoreAttr.java",target:"_blank",rel:"noopener noreferrer"},G=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileStoreAttr</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;imgs\\\\avatar.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">FileStore</span> store <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">getFileStore</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> total <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> used <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span>\n                store<span class="token punctuation">.</span><span class="token function">getUnallocatedSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> avail <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getUsableSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// D:\\learncode\\filesystem\\imgs\\avatar.jpg</span>\n        <span class="token comment">// 实际上打印的是这个文件所在的磁盘的空间</span>\n        <span class="token comment">// total = 789G ; used = 781G ; avail = 8G</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;total = %dG ; used = %dG ; avail = %dG%n&quot;</span><span class="token punctuation">,</span>total<span class="token punctuation">,</span>used<span class="token punctuation">,</span>avail<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="读写文件⭐" tabindex="-1"><a class="header-anchor" href="#读写文件⭐" aria-hidden="true">#</a> 读写文件⭐</h2><p><img src="/images/filesystem/io-fileiomethods.gif" alt="img"></p><h3 id="读取小文件" tabindex="-1"><a class="header-anchor" href="#读取小文件" aria-hidden="true">#</a> 读取小文件</h3>',4),U={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter04/ReadSmallFile.java",target:"_blank",rel:"noopener noreferrer"},X=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadSmallFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter04\\\\small.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        lines<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**output\n * 静默 Learning Java NIO File\n * 与超过 800 万 开发者一起发现、参与优秀开源项目，私有仓库也完全免费 ：）\n * -------------------------------\n * 静默 Learning Java NIO File\n * 与超过 800 万 开发者一起发现、参与优秀开源项目，私有仓库也完全免费 ：）\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="写小文件" tabindex="-1"><a class="header-anchor" href="#写小文件" aria-hidden="true">#</a> 写小文件</h3>',2),Y={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter04/WriteSmallFile.java",target:"_blank",rel:"noopener noreferrer"},Z=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteSmallFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">MSG</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;静默 Learning Java NIO File&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;与超过 800 万 开发者一起发现、参与优秀开源项目，私有仓库也完全免费 ：）&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter04\\\\small.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token constant">MSG</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lines <span class="token operator">=</span> <span class="token constant">MSG</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="buffered-i-o-methods-for-text-files" tabindex="-1"><a class="header-anchor" href="#buffered-i-o-methods-for-text-files" aria-hidden="true">#</a> Buffered I/O Methods for Text Files</h3><p>处理字符文字的IO</p><h4 id="read-text-file" tabindex="-1"><a class="header-anchor" href="#read-text-file" aria-hidden="true">#</a> read text file</h4>',4),K={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter04/ReadTextFile.java",target:"_blank",rel:"noopener noreferrer"},H=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadTextFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter04\\\\small.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newBufferedReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="write-text-file" tabindex="-1"><a class="header-anchor" href="#write-text-file" aria-hidden="true">#</a> write text file</h4>',2),$={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter04/WriteTextFile.java",target:"_blank",rel:"noopener noreferrer"},nn=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteTextFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">MSG</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;静默 Learning Java NIO File&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;与超过 800 万 开发者一起发现、参与优秀开源项目，私有仓库也完全免费 ：）&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter04\\\\small.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newBufferedWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">MSG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="stream-io" tabindex="-1"><a class="header-anchor" href="#stream-io" aria-hidden="true">#</a> Stream IO</h3><h4 id="read-file-write-file" tabindex="-1"><a class="header-anchor" href="#read-file-write-file" aria-hidden="true">#</a> read file &amp; write file</h4><blockquote><p>To flush a stream manually, invoke its flush method. The flush method is valid on any output stream, but has no effect unless the stream is buffered.</p></blockquote>',4),sn={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter04/ReadAndWriteStreamFile.java",target:"_blank",rel:"noopener noreferrer"},an=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * Methods for Unbuffered Streams and Interoperable with java.io APIs\n * https://docs.oracle.com/javase/tutorial/essential/io/file.html#streams\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadAndWriteStreamFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> readPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter04\\\\avatar.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> writePath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter04\\\\avatar-copy.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span>readPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>writePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n            <span class="token class-name">BufferedInputStream</span> bin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">BufferedOutputStream</span> bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> bin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                bout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// To flush a stream manually, invoke its flush method.</span>\n            <span class="token comment">// The flush method is valid on any output stream, but has no effect unless the stream is buffered.</span>\n            bout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="channel-io" tabindex="-1"><a class="header-anchor" href="#channel-io" aria-hidden="true">#</a> Channel IO</h3><blockquote><p>Specifying <code>READ</code> opens the channel for reading. Specifying <code>WRITE</code> or <code>APPEND</code> opens the channel for writing. If none of these options are specified, then the channel is opened for reading.</p></blockquote>',3),pn={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter04/ReadAndWriteByteChannel.java",target:"_blank",rel:"noopener noreferrer"},tn=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadAndWriteByteChannel</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> readPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter04\\\\small.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> writePath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter04\\\\small-channel.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">SeekableByteChannel</span> inChannel <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newByteChannel</span><span class="token punctuation">(</span>readPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">SeekableByteChannel</span> outChannel <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newByteChannel</span><span class="token punctuation">(</span>writePath<span class="token punctuation">,</span> <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">CREATE</span><span class="token punctuation">,</span><span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">WRITE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BUFFER_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n            <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token constant">BUFFER_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">while</span><span class="token punctuation">(</span>inChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// change to read model</span>\n                byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                outChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                byteBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="create-temp-file-⭐" tabindex="-1"><a class="header-anchor" href="#create-temp-file-⭐" aria-hidden="true">#</a> create temp file ⭐</h3>',2),en={href:"https://www.baeldung.com/java-secure-random",target:"_blank",rel:"noopener noreferrer"},on=(0,p.Lk)("p",null,"底层的随机数是通过java.security.SecureRandom.nextLong生成的",-1),cn={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter04/CreateTempFile.java",target:"_blank",rel:"noopener noreferrer"},ln=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateTempFile</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 前缀，后缀</span>\n        <span class="token class-name">Path</span> tempFile <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;.myapp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;The temporary file&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot; has been created: %s%n&quot;</span><span class="token punctuation">,</span> tempFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Path</span> tempFile2 <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.myapp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;The temporary file&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot; has been created: %s%n&quot;</span><span class="token punctuation">,</span> tempFile2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * The temporary file has been created: C:\\Users\\11930\\AppData\\Local\\Temp\\2585945490360134177.myapp\n * The temporary file has been created: tmp\\chapter04\\test831222729464056259.myapp\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="random-access-file" tabindex="-1"><a class="header-anchor" href="#random-access-file" aria-hidden="true">#</a> Random Access File</h2><p>通过设置position来改变</p>',3),un={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter06/RandomAccessFilesDemo.java",target:"_blank",rel:"noopener noreferrer"},rn=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomAccessFilesDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter06\\\\data.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;I was here!\\n&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">ByteBuffer</span> out <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ByteBuffer</span> copy <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//RandomAccessFile file = new RandomAccessFile(&quot;tmp\\\\chapter06\\\\data.txt&quot;, &quot;rw&quot;);</span>\n        <span class="token comment">//FileChannel channel = file.getChannel();</span>\n\n        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> <span class="token class-name">FileChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">READ</span><span class="token punctuation">,</span>\n                                <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">WRITE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// read the first 12 byte of the file</span>\n            <span class="token keyword">int</span> nread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token keyword">do</span> <span class="token punctuation">{</span>\n                nread <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>nread <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> copy<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n            <span class="token comment">// write &quot;I was here\\n&quot; at the beginning of file</span>\n            channel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            out<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// move to the end of the file .Copy 12 bytes to</span>\n            <span class="token comment">// the end of the file.then write &quot;I was here!\\n&quot; again</span>\n\n            channel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            copy<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span>copy<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>原来的文件</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>I want to become fullstack developer.\nToday,I master Javascript and Java programming language.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>程序执行的结果</p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>I was here!\ncome fullstack developer.\nToday,I master Javascript and Java programming languageI want to beI was here!\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>java7之前的RandomAccessFile在java8中的nio中可以直接使用FileChannel</p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">RandomAccessFile</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter06\\\\data.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 等价与</span>\n<span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;tmp\\\\chapter06\\\\data.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FileChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">READ</span><span class="token punctuation">,</span> <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">WRITE</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统" aria-hidden="true">#</a> 文件系统</h2>',8),kn={class:"custom-container tip"},mn=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),bn=(0,p.Lk)("p",null,"Microsoft Windows supports multiple root nodes.",-1),dn={href:"https://github.com/Q10Viking/learncode/blob/main/filesystem/src/org/hzz/chapter01/FileSystemDemo.java",target:"_blank",rel:"noopener noreferrer"},hn=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">FileStore</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">FileSystem</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">FileSystems</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileSystemDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">FileSystem</span> fileSystem <span class="token operator">=</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        fileSystem<span class="token punctuation">.</span><span class="token function">getRootDirectories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileStore</span> store<span class="token operator">:</span> fileSystem<span class="token punctuation">.</span><span class="token function">getFileStores</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">long</span> total <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n            <span class="token keyword">long</span> used <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> store<span class="token punctuation">.</span><span class="token function">getUnallocatedSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n            <span class="token keyword">long</span> avail <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getUsableSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%-20s %12d %12d %12d%n&quot;</span><span class="token punctuation">,</span> store<span class="token punctuation">,</span> total<span class="token punctuation">,</span> used<span class="token punctuation">,</span> avail<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * C:\\\n * D:\\\n * E:\\\n * F:\\\n * G:\\\n * H:\\\n * Windows (C:)            123018236     99776024     23242212\n * DATA (D:)               828327932    819870516      8457416\n * Software (E:)           133943292     97342816     36600476\n * RECOVERY (F:)            14488572     12825860      1662712\n * GRMCULXFRER (G:)        976762452    803494568    173267884\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><img src="/images/filesystem/image-20221009001834310.png" alt="image-20221009001834310"></p>',2),gn={},fn=(0,a(66262).A)(gn,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("Path Operations (The Java™ Tutorials > Essential Java Classes > Basic I/O) (oracle.com)"),(0,p.bF)(a)])]),o,(0,p.Lk)("div",c,[l,u,(0,p.Lk)("p",null,[(0,p.Lk)("a",i,[(0,p.eW)("Source Code PathsMain.java"),(0,p.bF)(a)])])]),r,(0,p.Lk)("p",null,[(0,p.Lk)("a",k,[(0,p.eW)("Source Code ConvertPath.java"),(0,p.bF)(a)])]),m,(0,p.Lk)("div",b,[d,h,(0,p.Lk)("p",null,[(0,p.Lk)("a",g,[(0,p.eW)("Source Code JoinTwoPath.java"),(0,p.bF)(a)])])]),f,(0,p.Lk)("div",y,[v,w,(0,p.Lk)("p",null,[(0,p.Lk)("a",q,[(0,p.eW)("Source Code BetweenTwoPath.java"),(0,p.bF)(a)])])]),S,(0,p.Lk)("p",null,[(0,p.Lk)("a",F,[(0,p.eW)("Source Code ComparingTwoPath.java"),(0,p.bF)(a)])]),P,(0,p.Lk)("div",j,[x,L,(0,p.Lk)("p",null,[(0,p.Lk)("a",C,[(0,p.eW)("Source Code IteratorPathName.java"),(0,p.bF)(a)])])]),T,(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,[(0,p.eW)("检查文件是否存在 "),(0,p.Lk)("a",I,[(0,p.eW)("Source Code CheckingFile.java"),(0,p.bF)(a)])])]),O,(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,[B,(0,p.Lk)("p",null,[(0,p.Lk)("a",E,[(0,p.eW)("Source Code DeleteFile.java"),(0,p.bF)(a)])])])]),R,(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,[A,(0,p.Lk)("p",null,[(0,p.Lk)("a",W,[(0,p.eW)("Source Code CopyFile.java"),(0,p.bF)(a)])])])]),z,(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,[_,(0,p.Lk)("p",null,[(0,p.Lk)("a",D,[(0,p.eW)("Source Code MoveDir.java"),(0,p.bF)(a)])])])]),N,(0,p.Lk)("p",null,[(0,p.Lk)("a",V,[(0,p.eW)("Source Code BasicAttrFile.java"),(0,p.bF)(a)])]),Q,(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,[M,(0,p.Lk)("p",null,[(0,p.Lk)("a",J,[(0,p.eW)("Source Code FileStoreAttr.java"),(0,p.bF)(a)])])])]),G,(0,p.Lk)("p",null,[(0,p.eW)("一次性读取"),(0,p.Lk)("a",U,[(0,p.eW)("Source Code ReadSmallFile.java"),(0,p.bF)(a)])]),X,(0,p.Lk)("p",null,[(0,p.eW)("一次性写小文件"),(0,p.Lk)("a",Y,[(0,p.eW)("Source Code WriteSmallFile.java"),(0,p.bF)(a)])]),Z,(0,p.Lk)("p",null,[(0,p.Lk)("a",K,[(0,p.eW)("Source Code ReadTextFile.java"),(0,p.bF)(a)])]),H,(0,p.Lk)("p",null,[(0,p.Lk)("a",$,[(0,p.eW)("Source Code WriteTextFile.java"),(0,p.bF)(a)])]),nn,(0,p.Lk)("p",null,[(0,p.Lk)("a",sn,[(0,p.eW)("Source Code ReadAndWriteStreamFile.java"),(0,p.bF)(a)])]),an,(0,p.Lk)("p",null,[(0,p.Lk)("a",pn,[(0,p.eW)("Source Code ReadAndWriteByteChannel.java"),(0,p.bF)(a)])]),tn,(0,p.Lk)("p",null,[(0,p.Lk)("a",en,[(0,p.eW)("The Java SecureRandom Class | Baeldung"),(0,p.bF)(a)])]),on,(0,p.Lk)("p",null,[(0,p.Lk)("a",cn,[(0,p.eW)("Source Code CreateTempFile.java"),(0,p.bF)(a)])]),ln,(0,p.Lk)("p",null,[(0,p.Lk)("a",un,[(0,p.eW)("Source Code RandomAccessFilesDemo.java"),(0,p.bF)(a)])]),rn,(0,p.Lk)("div",kn,[mn,bn,(0,p.Lk)("p",null,[(0,p.Lk)("a",dn,[(0,p.eW)("Source Code"),(0,p.bF)(a)])])]),hn],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);