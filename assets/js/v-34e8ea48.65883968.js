"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[35900],{9261:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-34e8ea48",path:"/concurrency/34%20%E5%AE%9A%E6%97%B6%E7%B1%BBTimer.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/concurrency/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"只执行一次",slug:"只执行一次",children:[{level:3,title:"延迟long类型",slug:"延迟long类型",children:[]},{level:3,title:"延迟Date类型",slug:"延迟date类型",children:[]}]},{level:2,title:"重复执行",slug:"重复执行",children:[{level:3,title:"Fixed Delay",slug:"fixed-delay",children:[]},{level:3,title:"Fixed Rate",slug:"fixed-rate",children:[]},{level:3,title:"每日任务",slug:"每日任务",children:[]}]},{level:2,title:"取消执行",slug:"取消执行",children:[{level:3,title:"TimeTask内取消",slug:"timetask内取消",children:[]},{level:3,title:"Timer取消",slug:"timer取消",children:[]}]},{level:2,title:"Timer vs  ExecutorService",slug:"timer-vs-executorservice",children:[]},{level:2,title:"原理分析",slug:"原理分析",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"concurrency/34 定时类Timer.md"}},83011:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(20641);const e={href:"https://gitee.com/q10viking/java-practice/tree/master/Timer/Timer/src/test/java/org/hzz",target:"_blank",rel:"noopener noreferrer"},t=(0,p.Fv)('<p>Timer 是<strong>线程安全的</strong>，多个线程可以共享一个 Timer 对象，而不需要外部同步。Timer 并不提供实时保证，因为它是通过 <code>Object.wait(long)</code> 调度任务的。</p><h2 id="只执行一次" tabindex="-1"><a class="header-anchor" href="#只执行一次" aria-hidden="true">#</a> 只执行一次</h2><h3 id="延迟long类型" tabindex="-1"><a class="header-anchor" href="#延迟long类型" aria-hidden="true">#</a> 延迟long类型</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenUsingTimer_whenSchedulingTaskOnce_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TimerTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Task performed on: Tue Mar 26 11:45:11 GMT+08:00 2024nThread&#39;s name: Timer</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task performed on: &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;n&quot;</span> <span class="token operator">+</span>\n                               <span class="token string">&quot;Thread&#39;s name: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token string">&quot;Timer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">long</span> delay <span class="token operator">=</span> <span class="token number">1000L</span><span class="token punctuation">;</span>\n    timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="延迟date类型" tabindex="-1"><a class="header-anchor" href="#延迟date类型" aria-hidden="true">#</a> 延迟Date类型</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseMigrationTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> oldDatabase<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newDatabase<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">DatabaseMigrationTask</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> oldDatabase<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newDatabase<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>oldDatabase <span class="token operator">=</span> oldDatabase<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>newDatabase <span class="token operator">=</span> newDatabase<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        newDatabase<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>oldDatabase<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">givenDatabaseMigrationTask_whenTimerScheduledForNowPlusTwoSeconds_thenDataMigratedAfterTwoSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> oldDatabase <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Harrison Ford&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Carrie Fisher&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mark Hamill&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newDatabase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">LocalDateTime</span> twoSecondsLater <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Date</span> twoSecondsLaterAsDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>twoSecondsLater<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DatabaseMigrationTask</span><span class="token punctuation">(</span>oldDatabase<span class="token punctuation">,</span> newDatabase<span class="token punctuation">)</span><span class="token punctuation">,</span> twoSecondsLaterAsDate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>twoSecondsLater<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;newDatabase size = &quot;</span> <span class="token operator">+</span> newDatabase<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newDatabase<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * newDatabase size = 0\n     * newDatabase size = 0\n     * newDatabase size = 0\n     * newDatabase size = 0\n     * [Harrison Ford, Carrie Fisher, Mark Hamill]\n     */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="重复执行" tabindex="-1"><a class="header-anchor" href="#重复执行" aria-hidden="true">#</a> 重复执行</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewsletterTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Email sent at: &quot;</span>\n                <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span><span class="token function">scheduledExecutionTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> value <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;] The duration of sending the mail will took: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="fixed-delay" tabindex="-1"><a class="header-anchor" href="#fixed-delay" aria-hidden="true">#</a> Fixed Delay</h3><p>任务会有延迟</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 间隔2s调用，第一个任务T1执行的时间是1s,然后间隔2s执行第二个任务也就是3s开始，但是t2执行需要2s,所以从第3秒开始已经过了2秒那么就开始执行第三个任务T</span>\n0s     1s    2s     3s           5s\n<span class="token operator">|</span>--T1--<span class="token operator">|</span>\n<span class="token operator">|</span>-----2s-----<span class="token operator">|</span>--1s--<span class="token operator">|</span>-----T2-----<span class="token operator">|</span>\n<span class="token operator">|</span>-----2s-----<span class="token operator">|</span>--1s--<span class="token operator">|</span>-----2s-----<span class="token operator">|</span>--T3--<span class="token operator">|</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenNewsletterTask_whenTimerScheduledEachSecondFixedDelay_thenNewsletterSentEachSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NewsletterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Email</span> sent at<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span><span class="token constant">T12</span><span class="token operator">:</span><span class="token number">45</span><span class="token operator">:</span><span class="token number">42.834</span>\n<span class="token punctuation">[</span><span class="token class-name">Timer</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">The</span> duration of sending the mail will took<span class="token operator">:</span> <span class="token number">6</span>\n<span class="token class-name">Email</span> sent at<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span><span class="token constant">T12</span><span class="token operator">:</span><span class="token number">45</span><span class="token operator">:</span><span class="token number">48.857</span>\n<span class="token punctuation">[</span><span class="token class-name">Timer</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">The</span> duration of sending the mail will took<span class="token operator">:</span> <span class="token number">5</span>\n<span class="token class-name">Email</span> sent at<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span><span class="token constant">T12</span><span class="token operator">:</span><span class="token number">45</span><span class="token operator">:</span><span class="token number">53.874</span>\n<span class="token punctuation">[</span><span class="token class-name">Timer</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">The</span> duration of sending the mail will took<span class="token operator">:</span> <span class="token number">6</span>\n<span class="token class-name">Email</span> sent at<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span><span class="token constant">T12</span><span class="token operator">:</span><span class="token number">45</span><span class="token operator">:</span><span class="token number">59.880</span>\n<span class="token punctuation">[</span><span class="token class-name">Timer</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">The</span> duration of sending the mail will took<span class="token operator">:</span> <span class="token number">5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="fixed-rate" tabindex="-1"><a class="header-anchor" href="#fixed-rate" aria-hidden="true">#</a> Fixed Rate</h3><p>任务不会延迟到点就开始调用</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 没经过两秒就调用一次，不管前面的任务是否执行完成。比如任务1开始执行，需要经过两秒开始调用T2</span>\n0s     1s    2s     3s    4s\n<span class="token operator">|</span>--T1--<span class="token operator">|</span>       \n<span class="token operator">|</span>-----2s-----<span class="token operator">|</span>-----T2-----<span class="token operator">|</span>\n<span class="token operator">|</span>-----2s-----<span class="token operator">|</span>-----2s-----<span class="token operator">|</span>--T3--<span class="token operator">|</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">givenNewsletterTask_whenTimerScheduledEachSecondFixedRate_thenNewsletterSentEachSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NewsletterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Email</span> sent at<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span><span class="token constant">T12</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">15.534</span>\n<span class="token punctuation">[</span><span class="token class-name">Timer</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">The</span> duration of sending the mail will took<span class="token operator">:</span> <span class="token number">5</span>\n<span class="token class-name">Email</span> sent at<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span><span class="token constant">T12</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">16.534</span>\n<span class="token punctuation">[</span><span class="token class-name">Timer</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">The</span> duration of sending the mail will took<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token class-name">Email</span> sent at<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span><span class="token constant">T12</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">17.534</span>\n<span class="token punctuation">[</span><span class="token class-name">Timer</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">The</span> duration of sending the mail will took<span class="token operator">:</span> <span class="token number">6</span>\n<span class="token class-name">Email</span> sent at<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span><span class="token constant">T12</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">18.534</span>\n<span class="token punctuation">[</span><span class="token class-name">Timer</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">The</span> duration of sending the mail will took<span class="token operator">:</span> <span class="token number">3</span>\n<span class="token class-name">Email</span> sent at<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span><span class="token constant">T12</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">19.534</span>\n<span class="token punctuation">[</span><span class="token class-name">Timer</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">The</span> duration of sending the mail will took<span class="token operator">:</span> <span class="token number">6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="每日任务" tabindex="-1"><a class="header-anchor" href="#每日任务" aria-hidden="true">#</a> 每日任务</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenUsingTimer_whenSchedulingDailyTask_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TimerTask</span> repeatedTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task performed on &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token string">&quot;Timer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">long</span> delay <span class="token operator">=</span> <span class="token number">1000L</span><span class="token punctuation">;</span>\n    <span class="token keyword">long</span> period <span class="token operator">=</span> <span class="token number">1000L</span> <span class="token operator">*</span> <span class="token number">60L</span> <span class="token operator">*</span> <span class="token number">60L</span> <span class="token operator">*</span> <span class="token number">24L</span><span class="token punctuation">;</span>\n    timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>repeatedTask<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="取消执行" tabindex="-1"><a class="header-anchor" href="#取消执行" aria-hidden="true">#</a> 取消执行</h2><h3 id="timetask内取消" tabindex="-1"><a class="header-anchor" href="#timetask内取消" aria-hidden="true">#</a> TimeTask内取消</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenUsingTimer_whenCancelingTimerTask_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TimerTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task performed on &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token string">&quot;Timer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="timer取消" tabindex="-1"><a class="header-anchor" href="#timer取消" aria-hidden="true">#</a> Timer取消</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenUsingTimer_whenCancelingTimer_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n  <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TimerTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task performed on &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token string">&quot;Timer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    timer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="timer-vs-executorservice" tabindex="-1"><a class="header-anchor" href="#timer-vs-executorservice" aria-hidden="true">#</a> Timer vs ExecutorService</h2><p>可以使用ExecutorService来替代Timer</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenUsingExecutorService_whenSchedulingRepeatedTask_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TimerTask</span> repeatedTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task performed on &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// cancel在这里没有意义</span>\n                <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token class-name">ScheduledExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> delay  <span class="token operator">=</span> <span class="token number">1000L</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> period <span class="token operator">=</span> <span class="token number">1000L</span><span class="token punctuation">;</span>\n        executor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>repeatedTask<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>delay <span class="token operator">+</span> period <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>Timer可以对系统时钟的变化敏感；ScheduledThreadPoolExecutor不是。</li><li>Timer只有一个执行线程；ScheduledThreadPoolExecutor可以配置任意数量的线程。</li><li>TimerTask内部抛出的运行时异常会杀死线程，因此以下计划任务不会进一步运行；使用ScheduledThreadExecutor，当前任务将被取消，但其余任务将继续运行。</li></ul><h2 id="原理分析" tabindex="-1"><a class="header-anchor" href="#原理分析" aria-hidden="true">#</a> 原理分析</h2><p>timer底层是把一个个任务放在一个TaskQueue中，TaskQueue是以平衡二进制堆表示的优先级队列，他是通过nextExecutionTime进行优先级排序的，距离下次执行时间越短优先级越高，通过getMin()获得queue[1]</p><p>并且出队的时候通过synchronized保证线程安全，延迟执行和特定时间执行的底层实现类似，源码如下</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sched</span><span class="token punctuation">(</span><span class="token class-name">TimerTask</span> task<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal execution time.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Constrain value of period sufficiently to prevent numeric</span>\n        <span class="token comment">// overflow while still being effectively infinitely large.</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            period <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>thread<span class="token punctuation">.</span>newTasksMayBeScheduled<span class="token punctuation">)</span>\n                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Timer already cancelled.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token class-name">TimerTask</span><span class="token punctuation">.</span><span class="token constant">VIRGIN</span><span class="token punctuation">)</span>\n                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>\n                        <span class="token string">&quot;Task already scheduled or cancelled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                task<span class="token punctuation">.</span>nextExecutionTime <span class="token operator">=</span> time<span class="token punctuation">;</span>\n                task<span class="token punctuation">.</span>period <span class="token operator">=</span> period<span class="token punctuation">;</span>\n                task<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">TimerTask</span><span class="token punctuation">.</span><span class="token constant">SCHEDULED</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> task<span class="token punctuation">)</span> <span class="token comment">// 如果当前任务处于队列的第一个说明轮到这个任务执行了</span>\n                queue<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>我们主要来看下周期性调度通过什么方式实现的，我们直接来分析源码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 首先一直监听队列中有没有任务</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token class-name">TimerTask</span> task<span class="token punctuation">;</span>\n                <span class="token keyword">boolean</span> taskFired<span class="token punctuation">;</span>\n    <span class="token comment">// 同步，保证任务执行顺序</span>\n                <span class="token keyword">synchronized</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// Wait for queue to become non-empty</span>\n                    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> newTasksMayBeScheduled<span class="token punctuation">)</span>\n                        queue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// Queue is empty and will forever remain; die</span>\n\n                    <span class="token comment">// Queue nonempty; look at first evt and do the right thing</span>\n                    <span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> executionTime<span class="token punctuation">;</span>\n     <span class="token comment">// 获取优先级最高的任务</span>\n                    task <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token class-name">TimerTask</span><span class="token punctuation">.</span><span class="token constant">CANCELLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            queue<span class="token punctuation">.</span><span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// No action required, poll queue again</span>\n                        <span class="token punctuation">}</span>\n                        currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 获取任务下次执行时间</span>\n                        executionTime <span class="token operator">=</span> task<span class="token punctuation">.</span>nextExecutionTime<span class="token punctuation">;</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>taskFired <span class="token operator">=</span> <span class="token punctuation">(</span>executionTime<span class="token operator">&lt;=</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token comment">// 到这里是延迟执行和特定时间点执行已经结束了，状态标记为EXECUTED,周期性执行继续往下走</span>\n                            <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>period <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Non-repeating, remove</span>\n                                queue<span class="token punctuation">.</span><span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                task<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">TimerTask</span><span class="token punctuation">.</span><span class="token constant">EXECUTED</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// Repeating task, reschedule</span>\n        <span class="token comment">// 这里他又重新计算了下下个任务的执行，并且任务还在队列中</span>\n                                queue<span class="token punctuation">.</span><span class="token function">rescheduleMin</span><span class="token punctuation">(</span>\n                                  task<span class="token punctuation">.</span>period<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">?</span> currentTime <span class="token operator">-</span> task<span class="token punctuation">.</span>period\n                                                <span class="token operator">:</span> executionTime <span class="token operator">+</span> task<span class="token punctuation">.</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n     <span class="token comment">// 如果任务执行时间大于当前时间说明任务还没点，继续等，否则执行run代码块</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>taskFired<span class="token punctuation">)</span> <span class="token comment">// Task hasn&#39;t yet fired; wait</span>\n                        queue<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>executionTime <span class="token operator">-</span> currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>taskFired<span class="token punctuation">)</span> <span class="token comment">// Task fired; run it, holding no locks</span>\n                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',37),o={href:"https://www.baeldung.com/java-timer-and-timertask",target:"_blank",rel:"noopener noreferrer"},c={},l=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),t,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("Timer And TimerTask"),(0,p.bF)(a)])])],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);