"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[10377],{51596:(e,r,o)=>{o.r(r),o.d(r,{data:()=>l});const l={key:"v-1c4aa28e",path:"/zk/19%20zk%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/zk/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[],filePathRelative:"zk/19 zk数据同步.md"}},41482:(e,r,o)=>{o.r(r),o.d(r,{default:()=>p});const l=(0,o(20641).Fv)('<p><strong>Zookeeper 数据同步流程</strong></p><p>在 Zookeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性。</p><p>ZAB 协议分为两部分：</p><ul><li>消息广播</li><li>崩溃恢复</li></ul><p><strong>消息广播</strong></p><p>Zookeeper 使用单一的主进程 Leader 来接收和处理客户端所有事务请求，并采用 ZAB 协议的原子广播协议，将事务请求以 Proposal 提议广播到所有 Follower 节点，当集群中有过半的Follower 服务器进行正确的 ACK 反馈，那么Leader就会再次向所有的 Follower 服务器发送commit 消息，将此次提案进行提交。这个过程可以简称为 2pc 事务提交，整个流程可以参考下图，注意 Observer 节点只负责同步 Leader 数据，不参与 2PC 数据同步过程。</p><p><img src="/images/zk/45559.png" alt="https://note.youdao.com/yws/public/resource/f0549278905bb988c831d6910c54143a/xmlnote/75C0C12CE3AB4E729F408C2AFE869C3A/45559"></p><p><strong>崩溃恢复</strong></p><p>在正常情况消息下广播能运行良好，但是一旦 Leader 服务器出现崩溃，或者由于网络原理导致 Leader 服务器失去了与过半 Follower 的通信，那么就会进入崩溃恢复模式，需要选举出一个新的 Leader 服务器。在这个过程中可能会出现两种数据不一致性的隐患，需要 ZAB 协议的特性进行避免。</p><ul><li>Leader 服务器将消息 commit 发出后，立即崩溃</li><li>Leader 服务器刚提出 proposal 后，立即崩溃</li></ul><p>ZAB 协议的恢复模式使用了以下策略：</p><ul><li>选举 zxid 最大的节点作为新的 leader</li><li>新 leader 将事务日志中尚未提交的消息进行处理</li></ul>',12),t={},p=(0,o(66262).A)(t,[["render",function(e,r){return l}]])},66262:(e,r)=>{r.A=(e,r)=>{const o=e.__vccOpts||e;for(const[e,l]of r)o[e]=l;return o}}}]);