"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[76857],{43165:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-a744909a",path:"/golang/16%20%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"类型断言",slug:"类型断言",children:[]},{level:2,title:"switch",slug:"switch",children:[]}],filePathRelative:"golang/16 类型断言.md"}},19926:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const t=(0,a(20641).Fv)('<h2 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>\n<span class="token keyword">func</span> <span class="token function">typeAssert</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i is int -&gt; %d\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i is float32 -&gt; %f\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i is not int or float32\\n&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">typeAssert</span><span class="token punctuation">(</span>t <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">switch</span> v <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i is int -&gt; %d\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>\n\t<span class="token keyword">case</span> <span class="token builtin">float32</span><span class="token punctuation">:</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i is float32 -&gt; %f\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>\n\t<span class="token keyword">default</span><span class="token punctuation">:</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;i is %T -&gt; %v\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">typeAssert</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// i is float64 -&gt; 1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',4),p={},o=(0,a(66262).A)(p,[["render",function(n,s){return t}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);