"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[94794],{95025:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5c091a05",path:"/java/34%20Integer%E4%B8%8Eint.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/java/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"问题",slug:"问题",children:[]},{level:2,title:"分析",slug:"分析",children:[]},{level:2,title:"自动包装和拆装",slug:"自动包装和拆装",children:[]},{level:2,title:"IntegerCache常量池设计的目的？",slug:"integercache常量池设计的目的",children:[]},{level:2,title:"为什么需要Integer?",slug:"为什么需要integer",children:[]},{level:2,title:"",slug:"",children:[]}],filePathRelative:"java/34 Integer与int.md"}},98194:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(20641);const e=(0,p.Fv)('<h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><blockquote><p>先看一段代码,发现a==b 为true,而c == d为false。本文就是重点分析为什么a==b 为true,而c == d为false</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        <span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>d <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a == b &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c == d &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * a == b true\n * c == d false\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>为了简化待会反汇编的代码，我们简化一下代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerSimpleTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通过命令<code>javap -c IntegerSimpleTest.class</code>对class文件进行反汇编。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Compiled</span> from <span class="token string">&quot;IntegerSimpleTest.java&quot;</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>autobox<span class="token punctuation">.</span></span>IntegerSimpleTest</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>autobox<span class="token punctuation">.</span></span>IntegerSimpleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Code</span><span class="token operator">:</span>\n       <span class="token number">0</span><span class="token operator">:</span> aload_0\n       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>\n       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Code</span><span class="token operator">:</span>\n       <span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">100</span>\n       <span class="token number">2</span><span class="token operator">:</span> invokestatic  #<span class="token number">2</span>                  <span class="token comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>\n       <span class="token number">5</span><span class="token operator">:</span> astore_1\n       <span class="token number">6</span><span class="token operator">:</span> sipush        <span class="token number">200</span>\n       <span class="token number">9</span><span class="token operator">:</span> invokestatic  #<span class="token number">2</span>                  <span class="token comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>\n      <span class="token number">12</span><span class="token operator">:</span> astore_2\n      <span class="token number">13</span><span class="token operator">:</span> <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>可以看到jvm会对int类型进行自动包装调用了<code>Integer.valueOf</code>这个静态方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中<strong>IntegerCache常量池</strong>缓存了[-128, 127]的Integer</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token comment">// 默认</span>\ncache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>\n    cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>所以a==b 为true是因为使用了缓存的Integer,</p><p>而c == d为false是因为没有使用缓存，每次都new一个Integer</p></blockquote><h2 id="自动包装和拆装" tabindex="-1"><a class="header-anchor" href="#自动包装和拆装" aria-hidden="true">#</a> 自动包装和拆装</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerSimpleTest2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>反汇编</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>autobox<span class="token punctuation">.</span></span>IntegerSimpleTest2</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>autobox<span class="token punctuation">.</span></span>IntegerSimpleTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Code</span><span class="token operator">:</span>\n       <span class="token number">0</span><span class="token operator">:</span> aload_0\n       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>\n       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Code</span><span class="token operator">:</span>\n       <span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">100</span>\n       <span class="token number">2</span><span class="token operator">:</span> invokestatic  #<span class="token number">2</span>                  <span class="token comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>\n       <span class="token number">5</span><span class="token operator">:</span> astore_1\n       <span class="token number">6</span><span class="token operator">:</span> aload_1\n       <span class="token number">7</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/lang/Integer.intValue:()I</span>\n      <span class="token number">10</span><span class="token operator">:</span> bipush        <span class="token number">100</span>\n      <span class="token number">12</span><span class="token operator">:</span> iadd\n      <span class="token number">13</span><span class="token operator">:</span> istore_2\n      <span class="token number">14</span><span class="token operator">:</span> <span class="token keyword">return</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>可以看到JVM会对int类型赋值给Integer类型时，进行了自动包装，调用<code>Integer.valueOf</code>,</p><p>而Integer类型赋值给int类型时，会进行自动拆箱，调用<code>Integer.intValue</code></p></blockquote><p>经过上面的分析，再来看一个例子，就非常清楚了</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerSimpleTest2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n        <span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n        <span class="token comment">// a会进行拆箱操作，所以a == b为true</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a == b &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// a和c经过自动装箱，都超过了Integer.cache,都是new出来的新Integer对象，所以a == c为false</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a == c &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * a == b true\n * a == c false\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="integercache常量池设计的目的" tabindex="-1"><a class="header-anchor" href="#integercache常量池设计的目的" aria-hidden="true">#</a> IntegerCache常量池设计的目的？</h2><blockquote><p>Integer为什么这么设计？ 但凡涉及到Cache的，一定和性能有关，在Integer这个对象中，常用的数值区间是在-128到127之间，所以为了避免对这个区间范围内的数据频繁创建和销毁对象，所以构建了一个缓存</p></blockquote><p><img src="/images/MySQL/1666682-20211030200051573-1064638876.png" alt="image-20211029101125958"></p><h2 id="为什么需要integer" tabindex="-1"><a class="header-anchor" href="#为什么需要integer" aria-hidden="true">#</a> 为什么需要Integer?</h2><blockquote><p>有了int为什么还需要Integer类型？</p><p>Java 中的基础数据类型有8 种：<strong>byte, boolean, short, char int, float, long double</strong></p></blockquote><p>主要是因为面向对象的思想，因为<strong>Java语言是面向对象</strong>的，这也是它只所以流行的原因之一，对象封装有很多好处，可以把属性也就是数据跟处理这些数据的方法结合在一起。</p><p>Integer将int包装起来，并且提供了很多方法来操作这个int。</p>',27),t={href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Lk)("p",null,[(0,p.Lk)("img",{src:"/images/MySQL/image-20230510192509014.png",alt:"image-20230510192509014"})],-1),c=(0,p.Lk)("h2",{id:"",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#","aria-hidden":"true"},"#")],-1),l={},r=(0,a(66262).A)(l,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[e,(0,p.Lk)("p",null,[(0,p.Lk)("a",t,[(0,p.eW)("Integer (Java Platform SE 8 ) (oracle.com)"),(0,p.bF)(a)])]),o,c],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);