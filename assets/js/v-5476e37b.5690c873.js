"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[25819],{39646:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-5476e37b",path:"/netty/07%20EchoServer.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/networkDevelopByJava/"}},excerpt:"",headers:[{level:2,title:"Echo protocol",slug:"echo-protocol",children:[]},{level:2,title:"Socket",slug:"socket",children:[]},{level:2,title:"EchoServer",slug:"echoserver",children:[]},{level:2,title:"Client",slug:"client",children:[]},{level:2,title:"资源释放处理",slug:"资源释放处理",children:[]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"netty/07 EchoServer.md"}},86671:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var t=a(20641);const e=(0,t.Lk)("h2",{id:"echo-protocol",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#echo-protocol","aria-hidden":"true"},"#"),(0,t.eW)(" Echo protocol")],-1),p={class:"custom-container tip"},o=(0,t.Lk)("p",{class:"custom-container-title"},"TIP",-1),c={href:"https://datatracker.ietf.org/doc/html/rfc862",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Lk)("p",null,"A very useful debugging and measurement tool is an echo service. An echo service simply sends back to the originating source any data it receives.",-1),l=(0,t.Fv)('<h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><p>The communication that occurs between the client and the server must be reliable. That is, no data can be dropped and it must arrive on the client side in the same order in which the server sent it.</p><p><strong>TCP provides a reliable, point-to-point communication channel</strong> that client-server applications on the Internet use to communicate with each other. To communicate over TCP, a client program and a server program establish a connection to one another. Each program binds a socket to its end of the connection. To communicate, the client and the server each reads from and writes to the socket bound to the connection.</p><h2 id="echoserver" tabindex="-1"><a class="header-anchor" href="#echoserver" aria-hidden="true">#</a> EchoServer</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><strong>TCP Based Echo Service</strong></p><p>One echo service is defined as a connection based application on TCP. A server listens for TCP connections on TCP port 7. Once a connection is established any data received is sent back. This continues until the calling user terminates the connection.</p></div>',5),u=(0,t.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-java"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"EchoDemo"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"static"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"void"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"main"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"String"),(0,t.Lk)("span",{class:"token punctuation"},"["),(0,t.Lk)("span",{class:"token punctuation"},"]"),(0,t.eW)(" args"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"throws"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"IOException"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token class-name"},"EchoServer"),(0,t.eW)(" server "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"EchoServer"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token number"},"8380"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token comment"},"// 不够优雅"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token class-name"},"Runtime"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getRuntime"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"addShutdownHook"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"Thread"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"->"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token class-name"},"System"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("out"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"钩子函数被执行，可以在这里关闭资源"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            server"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"stop"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        server"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"start"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"7"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"8"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"9"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"10"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"11"),(0,t.Lk)("br")])],-1),i=(0,t.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-java"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"EchoServer"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"private"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"ServerSocket"),(0,t.eW)(" serverSocket"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"private"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"int"),(0,t.eW)(" port"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"EchoServer"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token keyword"},"int"),(0,t.eW)(" port"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("port "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" port"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n\n    "),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"void"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"start"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"try"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            serverSocket "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"ServerSocket"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("port"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token class-name"},"System"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("out"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"Server start up listen port->"'),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)("serverSocket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getLocalPort"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token keyword"},"while"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token boolean"},"true"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token class-name"},"System"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("out"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"监听客户端连接... ..."'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token class-name"},"Socket"),(0,t.eW)(" client "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" serverSocket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"accept"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token class-name"},"System"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("out"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"客户端连接："'),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)("client"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getInetAddress"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.Lk)("span",{class:"token string"},'":"'),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)("client"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getPort"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"ClientHandler"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("client"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"start"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"catch"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"IOException"),(0,t.eW)(" e"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            e"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"printStackTrace"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n\n    "),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"void"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"stop"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"try"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("serverSocket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"close"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"catch"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"IOException"),(0,t.eW)(" e"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            e"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"printStackTrace"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token class-name"},"System"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("out"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"Server shutdown"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"7"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"8"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"9"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"10"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"11"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"12"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"13"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"14"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"15"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"16"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"17"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"18"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"19"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"20"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"21"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"22"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"23"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"24"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"25"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"26"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"27"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"28"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"29"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"30"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"31"),(0,t.Lk)("br")])],-1),r=(0,t.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-java"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"ClientHandler"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"extends"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"Thread"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"private"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"final"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"Socket"),(0,t.eW)(" socket"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"private"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"final"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"String"),(0,t.eW)(" hostname"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"private"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"final"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"int"),(0,t.eW)(" port"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n\n    "),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"ClientHandler"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"Socket"),(0,t.eW)(" socket"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("socket "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" socket"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("hostname "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" socket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getInetAddress"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"toString"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("port "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" socket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getPort"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n\n    "),(0,t.Lk)("span",{class:"token annotation punctuation"},"@Override"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"void"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"run"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"try"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token class-name"},"BufferedReader"),(0,t.eW)(" reader "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"BufferedReader"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("\n                        "),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"InputStreamReader"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("socket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getInputStream"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token class-name"},"PrintWriter"),(0,t.eW)(" writer "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"PrintWriter"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("socket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getOutputStream"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.Lk)("span",{class:"token boolean"},"true"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token class-name"},"String"),(0,t.eW)(" line"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token comment"},"// 判断socket停止的方法"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token keyword"},"while"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("line "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" reader"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"readLine"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"!="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"null"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n                writer"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("line"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"catch"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"IOException"),(0,t.eW)(" e"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token class-name"},"System"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("out"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"客户端"'),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"getClientInfo"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)(),(0,t.Lk)("span",{class:"token string"},'"异常"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"finally"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token keyword"},"try"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("socket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"close"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"catch"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"IOException"),(0,t.eW)(" e"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n                e"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"printStackTrace"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token class-name"},"System"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("out"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"客户端退出"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n\n    "),(0,t.Lk)("span",{class:"token keyword"},"private"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"String"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"getClientInfo"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"return"),(0,t.eW)(),(0,t.Lk)("span",{class:"token string"},'"客户端 "'),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("hostname "),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)(),(0,t.Lk)("span",{class:"token string"},'":"'),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("port"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"7"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"8"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"9"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"10"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"11"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"12"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"13"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"14"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"15"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"16"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"17"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"18"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"19"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"20"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"21"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"22"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"23"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"24"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"25"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"26"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"27"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"28"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"29"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"30"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"31"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"32"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"33"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"34"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"35"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"36"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"37"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"38"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"39"),(0,t.Lk)("br")])],-1),L=(0,t.Fv)('<hr><h2 id="client" tabindex="-1"><a class="header-anchor" href="#client" aria-hidden="true">#</a> Client</h2><p>This client program is straightforward and simple because the echo server implements a simple protocol. The client sends text to the server, and the server echoes it back. When your client programs are talking to a more complicated server such as an HTTP server, your client program will also be more complicated. However, the basics are much the same as they are in this program:</p><ol><li>Open a socket.</li><li>Open an input stream and output stream to the socket.</li><li>⭐<strong>Read from and write to the stream according to the server&#39;s protocol.</strong>⭐</li><li>Close the streams.</li><li>Close the socket.</li></ol><p>Only step 3 differs from client to client, depending on the server. The other steps remain largely the same.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span>\n                <span class="token class-name">Socket</span> echoSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">Inet4Address</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8380</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>echoSocket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>\n                        <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>echoSocket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">BufferedReader</span> stdIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>\n                        <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端: &quot;</span> <span class="token operator">+</span> echoSocket<span class="token punctuation">.</span><span class="token function">getLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> echoSocket<span class="token punctuation">.</span><span class="token function">getLocalPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务端: &quot;</span> <span class="token operator">+</span> echoSocket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> echoSocket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> userInput<span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userInput <span class="token operator">=</span> stdIn<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInput<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;echo &quot;</span><span class="token operator">+</span>in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Don&#39;t know about host &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Couldn&#39;t get I/O for the connection to &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="资源释放处理" tabindex="-1"><a class="header-anchor" href="#资源释放处理" aria-hidden="true">#</a> 资源释放处理</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>1️⃣ 服务器如何优雅的关闭资源？</p><p>2️⃣ 如何优雅的处理与客户端的读写？</p></div>',8),b={href:"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html",target:"_blank",rel:"noopener noreferrer"},m=(0,t.Lk)("code",null,"try",-1),d=(0,t.Fv)('<p>The Java runtime automatically closes the input and output streams, the client socket, and the server socket because they have been created in the <code>try</code>-with-resources statement.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span>\n    <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>\n        <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> inMsg<span class="token punctuation">,</span> outMsg<span class="token punctuation">;</span>\n    outMsg <span class="token operator">=</span> protocol<span class="token punctuation">.</span><span class="token function">processInput</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>outMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>inMsg <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        outMsg <span class="token operator">=</span> protocol<span class="token punctuation">.</span><span class="token function">processInput</span><span class="token punctuation">(</span>inMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>outMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>outMsg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;Byte.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',3),h={href:"https://docs.oracle.com/javase/tutorial/networking/sockets/index.html",target:"_blank",rel:"noopener noreferrer"},W=(0,t.Lk)("p",null,"https://docs.oracle.com/javase/tutorial/networking/sockets/examples/EchoClient.java",-1),g={},v=(0,a(66262).A)(g,[["render",function(n,s){const a=(0,t.g2)("OutboundLink"),g=(0,t.g2)("CodeGroupItem"),v=(0,t.g2)("CodeGroup");return(0,t.uX)(),(0,t.CE)(t.FK,null,[e,(0,t.Lk)("div",p,[o,(0,t.Lk)("p",null,[(0,t.Lk)("a",c,[(0,t.eW)("Echo protocol rfc862 (ietf.org)"),(0,t.bF)(a)])]),k]),l,(0,t.bF)(v,null,{default:(0,t.k6)((()=>[(0,t.bF)(g,{title:"EchoDemo"},{default:(0,t.k6)((()=>[u])),_:1}),(0,t.bF)(g,{title:"EchoServer"},{default:(0,t.k6)((()=>[i])),_:1}),(0,t.bF)(g,{title:"ClientHandler"},{default:(0,t.k6)((()=>[r])),_:1})])),_:1}),L,(0,t.Lk)("p",null,[(0,t.eW)("use "),(0,t.Lk)("a",b,[m,(0,t.eW)("-with-resources"),(0,t.bF)(a)]),(0,t.eW)(" statement .")]),d,(0,t.Lk)("p",null,[(0,t.Lk)("a",h,[(0,t.eW)("Lesson: All About Sockets (The Java™ Tutorials > Custom Networking) (oracle.com)"),(0,t.bF)(a)])]),W],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);