"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[39296],{29942:(e,i,l)=>{l.r(i),l.d(i,{data:()=>t});const t={key:"v-085ed0ae",path:"/MySQL/64%20%E5%AF%B9%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84%E7%90%86%E8%A7%A3.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"表",slug:"表",children:[]},{level:2,title:"分库分表面临的问题",slug:"分库分表面临的问题",children:[]}],filePathRelative:"MySQL/64 对分库分表的理解.md"}},77970:(e,i,l)=>{l.r(i),l.d(i,{default:()=>r});const t=(0,l(20641).Fv)('<h2 id="表" tabindex="-1"><a class="header-anchor" href="#表" aria-hidden="true">#</a> 表</h2><ul><li>**水平切分：**水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</li><li>**垂直切分：**垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。</li></ul><h2 id="分库分表面临的问题" tabindex="-1"><a class="header-anchor" href="#分库分表面临的问题" aria-hidden="true">#</a> 分库分表面临的问题</h2><ol><li>**数据一致性：**由于数据被分布到不同的数据库和表中，分库分表涉及跨节点的事务，需要确保数据的一致性。可以采用两阶段提交（2PC）协议、最终一致性方案或者基于分布式事务的工具来管理分布式事务，确保数据的一致性。</li><li>**跨分片查询：**当业务需要跨多个分片进行查询时，可能会面临性能问题和复杂的查询逻辑。可以使用分布式查询引擎、数据聚合、缓存和分布式计算框架等技术来处理跨分片查询需求，提高查询效率和简化查询逻辑。</li><li>**全局唯一性约束：**在分库分表环境下，全局唯一性约束可能受到挑战。可以采用分布式唯一ID生成器（如Snowflake算法）来生成全局唯一ID，避免冲突。</li></ol>',4),a={},r=(0,l(66262).A)(a,[["render",function(e,i){return t}]])},66262:(e,i)=>{i.A=(e,i)=>{const l=e.__vccOpts||e;for(const[e,t]of i)l[e]=t;return l}}}]);