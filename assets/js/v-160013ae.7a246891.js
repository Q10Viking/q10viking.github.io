"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[30735],{58726:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-160013ae",path:"/concurrency/16%20AQS%E8%AF%A6%E8%A7%A31.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/concurrency/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"AQS具备的特性",slug:"aqs具备的特性",children:[]},{level:2,title:"AQS(AbstractQueuedSynchronizer)大概架构图",slug:"aqs-abstractqueuedsynchronizer-大概架构图",children:[{level:3,title:"Lock三大核心原理",slug:"lock三大核心原理",children:[]}]},{level:2,title:"LockSupport唤醒指定的线程",slug:"locksupport唤醒指定的线程",children:[]},{level:2,title:"AQS源码分析",slug:"aqs源码分析",children:[{level:3,title:"IDEA工具分析",slug:"idea工具分析",children:[]},{level:3,title:"ReentrantLock公平锁与非公平锁的实现",slug:"reentrantlock公平锁与非公平锁的实现",children:[]},{level:3,title:"同步等待队列",slug:"同步等待队列",children:[]},{level:3,title:"ReentrantLock加锁初步分析",slug:"reentrantlock加锁初步分析",children:[]}]}],filePathRelative:"concurrency/16 AQS详解1.md"}},25354:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(20641).Fv)('<h2 id="aqs具备的特性" tabindex="-1"><a class="header-anchor" href="#aqs具备的特性" aria-hidden="true">#</a> AQS具备的特性</h2><ol><li>阻塞等待队列</li><li>共享/独占</li><li>公平/非公平</li><li>可重入</li><li>允许中断</li></ol><p>AQS（AbstractQueuedSynchronizer）是Java并发编程中的一个重要组件，它是一个抽象类，提供了线程同步的底层实现机制。AQS的作用是实现线程的同步和互斥操作，它提供了两种主要的锁机制，分别是排他锁和共享锁。</p><p>排他锁也称为独占锁，<strong>在多个线程竞争同一共享资源时，同一时刻只允许一个线程访问该共享资源</strong>，即多个线程中只有一个线程获得锁资源。在AQS中，排他锁是通过内置的同步状态来实现的。当同步状态为0时，表示锁是未被获取的；当同步状态大于0时，表示锁已经被获取且被占用；当同步状态小于0时，表示锁已经被获取但是处于等待状态。</p><p><strong>共享锁允许多个线程同时获得锁资源，但是在同一时刻只有一个线程可以获取到锁的拥有权，其他线程需要等待该线程释放锁</strong>。在AQS中，共享锁的实现与排他锁类似，也是通过内置的同步状态来实现的。</p><p>AQS通过一个内置的FIFO（先进先出）等待队列来实现线程的排队和调度。当线程需要获取锁资源时，如果锁已经被其他线程获取，则该线程会被加入到等待队列中等待。当锁被释放时，等待队列中的第一个线程会获得锁资源并继续执行。</p><p>在实现AQS时，需要继承自AQS类并实现其抽象方法。其中比较重要的方法包括：tryAcquire()和tryRelease()方法，用于实现锁的获取和释放；acquire()和release()方法，用于实现阻塞和唤醒操作；isHeldExclusively()方法，用于判断是否是排他锁。</p><p>总之，AQS是Java并发编程中的重要组件之一，它提供了线程同步的底层实现机制。在使用AQS时，需要根据具体的应用场景选择合适的锁机制来实现线程的同步和互斥操作。</p><h2 id="aqs-abstractqueuedsynchronizer-大概架构图" tabindex="-1"><a class="header-anchor" href="#aqs-abstractqueuedsynchronizer-大概架构图" aria-hidden="true">#</a> AQS(AbstractQueuedSynchronizer)大概架构图</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// false为非公平锁，true为公平锁</span>\n<span class="token constant">T0</span><span class="token punctuation">,</span><span class="token constant">T1</span><span class="token punctuation">,</span><span class="token constant">T2</span><span class="token punctuation">,</span><span class="token constant">T3</span><span class="token punctuation">,</span><span class="token constant">T4</span>线程\nlock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\t\t<span class="token comment">//\t如果有几百个线程在循环，那么消耗CPU资源过多，浪费。所以存储Thread</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>加锁成功<span class="token punctuation">)</span><span class="token punctuation">{</span>\t<span class="token comment">//\t通过CAS加锁-&gt;比较与交换 compare and swap</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>跳出循环\n        <span class="token punctuation">}</span>\n        <span class="token class-name">HashSet</span><span class="token punctuation">,</span><span class="token class-name">LinkedQueue</span>等集合存储起当前线程\n        <span class="token class-name">HashSet</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">LinkedQueue</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//利用LockSupport工具阻塞线程</span>\n        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n <span class="token constant">T0</span>获取锁\n 执行业务代码\nlock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 释放锁</span>\n     <span class="token comment">// 唤醒之前存储起来的Thread</span>\n     <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">HashSet</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">LinkedQueue</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="lock三大核心原理" tabindex="-1"><a class="header-anchor" href="#lock三大核心原理" aria-hidden="true">#</a> Lock三大核心原理</h3><ol><li><p>自旋</p></li><li><p>LockSupport</p></li><li><p>CAS</p></li></ol><p>并且依赖一种数据结构(容器类)来保存Thread引用，Queue</p><h2 id="locksupport唤醒指定的线程" tabindex="-1"><a class="header-anchor" href="#locksupport唤醒指定的线程" aria-hidden="true">#</a> LockSupport唤醒指定的线程</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Juc01_Thread_LockSupport</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token class-name">Thread</span> t0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{},开始执行!&quot;</span><span class="token punctuation">,</span>current<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//spin 自旋</span>\n                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;准备park住当前线程：{}....&quot;</span><span class="token punctuation">,</span>current<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;当前线程{}已经被唤醒....&quot;</span><span class="token punctuation">,</span>current<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n\n        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;t0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        t0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;准备唤醒{}线程!&quot;</span><span class="token punctuation">,</span>t0<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n 00:17:34.551 [t0] INFO com.yg.edu.lock.Juc01_Thread_LockSupport - t0,开始执行!\n 00:17:34.553 [t0] INFO com.yg.edu.lock.Juc01_Thread_LockSupport - 准备park住当前线程：t0....\n 00:17:39.549 [main] INFO com.yg.edu.lock.Juc01_Thread_LockSupport - 准备唤醒t0线程!\n 00:17:39.549 [t0] INFO com.yg.edu.lock.Juc01_Thread_LockSupport - 当前线程t0已经被唤醒....\n 00:17:39.549 [t0] INFO com.yg.edu.lock.Juc01_Thread_LockSupport - 准备park住当前线程：t0....\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><hr><h2 id="aqs源码分析" tabindex="-1"><a class="header-anchor" href="#aqs源码分析" aria-hidden="true">#</a> AQS源码分析</h2><h3 id="idea工具分析" tabindex="-1"><a class="header-anchor" href="#idea工具分析" aria-hidden="true">#</a> IDEA工具分析</h3><blockquote><p>ctrl+alt+shift+u</p></blockquote><p><img src="/images/concurrency/image-20210621010208278.png" alt="image-20210621010208278"></p><blockquote><p>ctrl+alt+b 查看继承类</p></blockquote><p><img src="/images/concurrency/image-20210621010329383.png" alt="image-20210621010329383"></p><blockquote><p>ctrl+A选中---&gt;enter</p></blockquote><p><img src="/images/concurrency/AbstractQueuedSynchronizer.png" alt="AbstractQueuedSynchronizer"></p><p>如果没展示全部则选择</p><p><img src="/images/concurrency/image-20210621011759739.png" alt="image-20210621011759739"></p><h3 id="reentrantlock公平锁与非公平锁的实现" tabindex="-1"><a class="header-anchor" href="#reentrantlock公平锁与非公平锁的实现" aria-hidden="true">#</a> ReentrantLock公平锁与非公平锁的实现</h3><p>ReentrantLock如何实现synchronized不具备的公平与非公平性呢？</p><p>在ReentrantLock内部定义了一个Sync的内部类，该类继承AbstractQueuedSynchronized，对该抽象类的部分方法做了实现；并且还定义了两个子类：</p><ol><li><p>FairSync 公平锁的实现</p></li><li><p>NonfairSync 非公平锁的实现</p></li></ol><p>这两个类都继承自Sync，也就是间接继承了AbstractQueuedSynchronized，所以这一个ReentrantLock同时具备公平与非公平特性。</p><p>上面主要涉及的设计模式：模板模式-子类根据需要做具体业务实现</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 当前获得锁的线程</span>\n<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Thread</span> exclusiveOwnerThread<span class="token punctuation">;</span>\n<span class="token comment">// 同步器状态的变量</span>\n<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>\n<span class="token comment">// 队列的构造</span>\n<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span> tail<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="同步等待队列" tabindex="-1"><a class="header-anchor" href="#同步等待队列" aria-hidden="true">#</a> 同步等待队列</h3><ol><li>AQS当中的<strong>同步等待队列也称CLH队列</strong>，CLH队列是Craig、Landin、Hagersten三人发明的一种基于<strong>双向链表数据结构的队列</strong>，是<strong>FIFO先入先出线程等待队列</strong></li><li>Java中的CLH队列是原CLH队列的一个变种,线程由原自旋机制改为阻塞机制</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>\n    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> prev<span class="token punctuation">;</span>\n    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>\n    <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="/images/concurrency/14090" alt="img"></p><h3 id="reentrantlock加锁初步分析" tabindex="-1"><a class="header-anchor" href="#reentrantlock加锁初步分析" aria-hidden="true">#</a> ReentrantLock加锁初步分析</h3><p><img src="/images/concurrency/AQS_source_code.png" alt="AQS_source_code"></p>',40),e={},t=(0,a(66262).A)(e,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);