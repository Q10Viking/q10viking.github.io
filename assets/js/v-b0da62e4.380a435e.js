"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[97696],{65605:(s,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a={key:"v-b0da62e4",path:"/Redis/14%20Redis%E7%9A%84%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%AB%98%E6%80%A7%E8%83%BD.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Redis是单线程吗",slug:"redis是单线程吗",children:[]},{level:2,title:"Redis 单线程为什么还能这么快",slug:"redis-单线程为什么还能这么快",children:[]},{level:2,title:"Redis 单线程如何处理那么多的并发客户端连接",slug:"redis-单线程如何处理那么多的并发客户端连接",children:[]}],filePathRelative:"Redis/14 Redis的单线程和高性能.md"}},81733:(s,e,n)=>{n.r(e),n.d(e,{default:()=>i});const a=(0,n(20641).Fv)('<h2 id="redis是单线程吗" tabindex="-1"><a class="header-anchor" href="#redis是单线程吗" aria-hidden="true">#</a> <strong>Redis是单线程吗</strong></h2><p>Redis 的单线程主要是指 <strong>Redis 的网络 IO 和键值对读写是由一个线程来完成的</strong>，这也是 <strong>Redis 对外提供键值存储服务的主要流程</strong>。</p><p>但 Redis 的其他功能，比如<strong>持久化、异步删除、集群数据同步</strong>等，其实是由额外的线程执行的。</p><h2 id="redis-单线程为什么还能这么快" tabindex="-1"><a class="header-anchor" href="#redis-单线程为什么还能这么快" aria-hidden="true">#</a> <strong>Redis 单线程为什么还能这么快</strong></h2><ol><li>因为它所有的数据都在<strong>内存</strong>中，所有的运算都是内存级别的运算</li><li>而且单线程避免了多线程的切换性能损耗问题。</li><li>正因为 Redis 是单线程，所以要小心使用 Redis 指令，对于那些耗时的指令(比如keys)，一定要谨慎使用，一不小心就可能会导致 Redis 卡顿。</li></ol><h2 id="redis-单线程如何处理那么多的并发客户端连接" tabindex="-1"><a class="header-anchor" href="#redis-单线程如何处理那么多的并发客户端连接" aria-hidden="true">#</a> <strong>Redis 单线程如何处理那么多的并发客户端连接</strong></h2><p>Redis的<strong>IO多路复用</strong>：redis利用<strong>epoll来实现IO多路复用，将连接信息和事件放到队列</strong>中，依次放到文件事件分派器，<strong>事件分派器</strong>将事件分发给事<strong>件处理器</strong></p><p><img src="/images/Redis/69701.png" alt=""></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 查看redis支持的最大连接数，在redis.conf文件中可修改，# maxclients 10000</span>\n<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG GET maxclients\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;maxclients&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;10000&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',9),r={},i=(0,n(66262).A)(r,[["render",function(s,e){return a}]])},66262:(s,e)=>{e.A=(s,e)=>{const n=s.__vccOpts||s;for(const[s,a]of e)n[s]=a;return n}}}]);