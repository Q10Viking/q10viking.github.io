"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[75596],{23425:(s,n,a)=>{a.r(n),a.d(n,{data:()=>p});const p={key:"v-30c446b0",path:"/ElasticStack/15%20%E8%BF%91%E4%BC%BC%E6%90%9C%E7%B4%A2.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/ElasticStack/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"近似搜索描述",slug:"近似搜索描述",children:[]},{level:2,title:"match phrase❤️",slug:"match-phrase❤️",children:[{level:3,title:"match phrase原理 -- term position",slug:"match-phrase原理-term-position",children:[]},{level:3,title:"match phrase搜索参数 -- slop❤️",slug:"match-phrase搜索参数-slop❤️",children:[]}]},{level:2,title:"前缀搜索 prefix search",slug:"前缀搜索-prefix-search",children:[]},{level:2,title:"通配符",slug:"通配符",children:[]},{level:2,title:"正则表达式",slug:"正则表达式",children:[]},{level:2,title:"搜索推荐",slug:"搜索推荐",children:[]},{level:2,title:"模糊搜索",slug:"模糊搜索",children:[]}],filePathRelative:"ElasticStack/15 近似搜索.md"}},96663:(s,n,a)=>{a.r(n),a.d(n,{default:()=>t});const p=(0,a(20641).Fv)('<h2 id="近似搜索描述" tabindex="-1"><a class="header-anchor" href="#近似搜索描述" aria-hidden="true">#</a> 近似搜索描述</h2><p>前文都是精确匹配。如doc中有数据java assistant，那么搜索jave是搜索不到数据的。因为jave单词在doc中是不存在的</p><p>如果需要的结果是有特殊要求，如：hello world必须是一个完整的短语，不可分割；或document中的field内，包含的hello和world单词，且两个单词之间离的越近，相关度分数越高。那么这种特殊要求的搜索就是近似搜索。包括hell搜索条件在hello world数据中搜索，包括h搜索提示等都数据近似搜索的一部分。</p><p>如何上述特殊要求的搜索，使用match搜索语法就无法实现了。</p><blockquote><p>使用slop参数的match phrase搜索，就称为近似匹配（proximity search）</p></blockquote><hr><h2 id="match-phrase❤️" tabindex="-1"><a class="header-anchor" href="#match-phrase❤️" aria-hidden="true">#</a> match phrase❤️</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>短语搜索。就是搜索条件不分词。代表搜索条件不可分割。</p></div><p>如果java assistant是一个不可分割的短语，我们可以使用短语搜索match phrase来实现。语法如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /es_db/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;match_phrase&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;remark&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java assistant&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="match-phrase原理-term-position" tabindex="-1"><a class="header-anchor" href="#match-phrase原理-term-position" aria-hidden="true">#</a> match phrase原理 -- term position</h3><p>ES是如何实现match phrase短语搜索的？其实在ES中，使用match phrase做搜索的时候，也是和match类似，首先对搜索条件进行分词-analyze。将搜索条件拆分成hello和world。既然是分词后再搜索，ES是如何实现短语搜索的？</p><p>这里涉及到了倒排索引的建立过程。在倒排索引建立的时候，ES会先对document数据进行分词，如：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET _analyze\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello world, java spark&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standard&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>分词结果</p><p><img src="/images/elasticsearch/image-20211112182802153.png" alt=""></p><p>从上述结果中，可以看到。ES在做分词的时候，除了将数据切分外，还会保留一个position。position代表的是这个词在整个数据中的下标。</p><p>❤️当ES执行match phrase搜索的时候，首先将搜索条件hello world分词为hello和world。然后在倒排索引中检索数据，如果hello和world都在某个document的某个field出现时，那么检查这两个匹配到的单词的position是否是连续的，如果是连续的，代表匹配成功，如果是不连续的，则匹配失败。❤️</p><h3 id="match-phrase搜索参数-slop❤️" tabindex="-1"><a class="header-anchor" href="#match-phrase搜索参数-slop❤️" aria-hidden="true">#</a> match phrase搜索参数 -- slop❤️</h3><p>在做搜索操作的是，如果搜索参数是hello spark。而ES中存储的数据是hello world, java spark。那么使用match phrase则无法搜索到。在这个时候，可以使用match来解决这个问题。但是，当我们需要在搜索的结果中，做一个特殊的要求：❤️hello和spark两个单词距离越近，document在结果集合中排序越靠前，这个时候再使用match则未必能得到想要的结果❤️。</p><p>ES的搜索中，对match phrase提供了参数slop。<strong>slop代表match phrase短语搜索的时候，单词最多移动多少次</strong>，<strong>可以实现数据匹配</strong>。在所有匹配结果中，多个单词距离越近，相关度评分越高，排序越靠前</p><p>这种<strong>使用slop参数的match phrase搜索，就称为近似匹配 proximity search</strong></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>如：\n数据为： hello world<span class="token punctuation">,</span> java spark\n搜索为： match phrase <span class="token operator">:</span> hello spark。\nslop为： <span class="token number">3</span>  （代表单词最多移动<span class="token number">3</span>次。）\n\n执行短语搜索的时候，将条件hello spark分词为hello和spark两个单词。并且连续。\nhello   spark\n接下来，可以根据slop参数执行单词的移动。\n下标 ：\t<span class="token number">0</span>\t\t<span class="token number">1</span>\t\t<span class="token number">2</span>\t\t<span class="token number">3</span>\ndoc ：   hello\t world   java\t  spark\n搜索 ：   hello    spark\n移动<span class="token number">1</span>：   hello\t\t   spark\n移动<span class="token number">2</span>：   hello\t\t\t\t   spark\n匹配成功，不需要移动第三次即可匹配。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>如果：\n数据为： hello world, java spark\n搜索为： match phrase : spark hello。\nslop为： 5  （代表单词最多移动5次。）\n执行短语搜索的时候，将条件spark hello分词为hello和spark两个单词。并且连续。\nspark    hello\n接下来，可以根据slop参数执行单词的移动。\n下标 ：\t0\t\t1\t\t2\t\t3\ndoc  ：\thello\t world\t java\t spark\n搜索 ：   spark\thello\n移动1：\t\tspark/hello\n移动2：   hello\t spark\n移动3：   hello\t\t   spark\n移动4：   hello\t\t\t\t   spark\n匹配成功，不需要移动第五次即可匹配。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>如果当slop移动次数使用完毕，还没有匹配成功，则无搜索结果。如果使用中文分词，则移动次数更加复杂，因为中文词语有重叠情况，很难计算具体次数，需要多次尝试才行。</p><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>测试英文</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET _analyze\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello world, java spark&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standard&quot;</span>\n<span class="token punctuation">}</span>\n\nPOST /test_a/_doc/<span class="token number">3</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;f&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello world, java spark&quot;</span>\n<span class="token punctuation">}</span>\n\nGET /test_a/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;match_phrase&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;f&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello spark&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;slop&quot;</span><span class="token operator">:</span> <span class="token number">2</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nGET /test_a/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;match_phrase&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;f&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;spark hello&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;slop&quot;</span><span class="token operator">:</span> <span class="token number">4</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p><img src="/images/elasticsearch/image-20220813014906395.png" alt="image-20220813014906395"></p><p><img src="/images/elasticsearch/image-20220813015018434.png" alt="image-20220813015018434"></p><p>如果少移动一次就匹配不到了</p><p><img src="/images/elasticsearch/image-20220813015105086.png" alt="image-20220813015105086"></p><hr><p>测试中文</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET _analyze\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;中国，一个世界上最强的国家&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;analyzer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ik_max_word&quot;</span>\n<span class="token punctuation">}</span>\n\nPOST /test_a/_doc/<span class="token number">1</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;f&quot;</span><span class="token operator">:</span> <span class="token string">&quot;中国，一个世界上最强的国家&quot;</span>\n<span class="token punctuation">}</span>\n\nGET /test_a/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;match_phrase&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;f&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;中国最强&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;slop&quot;</span><span class="token operator">:</span> <span class="token number">5</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nGET /test_a/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;match_phrase&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;f&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;最强中国&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;slop&quot;</span><span class="token operator">:</span> <span class="token number">9</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p><img src="/images/elasticsearch/image-20220813015252614.png" alt="image-20220813015252614"></p><p><img src="/images/elasticsearch/image-20220813015323360.png" alt="image-20220813015323360"></p><hr><h2 id="前缀搜索-prefix-search" tabindex="-1"><a class="header-anchor" href="#前缀搜索-prefix-search" aria-hidden="true">#</a> 前缀搜索 prefix search</h2><p>使用前缀匹配实现搜索能力。通常针对keyword类型字段，也就是不分词的字段。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /test_a/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;f.keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Java&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>注意：针对前缀搜索，是对keyword类型字段而言。而keyword类型字段数据大小写敏感</strong></p><p>前缀搜索效率比较低。前缀搜索不会计算相关度分数。前缀越短，效率越低。如果使用前缀搜索，建议使用长前缀。因为前缀搜索需要扫描完整的索引内容，所以前缀越长，相对效率越高。</p><hr><h2 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h2><p>ES中也有通配符。但是和java还有数据库不太一样。通配符可以在倒排索引中使用，也可以在keyword类型字段中使用。</p><p>常用通配符：</p><ul><li><p>? - 一个任意字符</p></li><li><p>* - 0~n个任意字符</p></li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /test_a/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;wildcard&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;f.keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;?a*a*&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>性能也很低，也是需要扫描完整的索引。不推荐使用。</p><hr><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><p>ES支持正则表达式。可以在倒排索引或keyword类型字段中使用。</p><p>常用符号：</p><ul><li><p>[] - 范围，如： [0-9]是0~9的范围数字</p></li><li><p>. - 一个字符</p></li><li><p>+ - 前面的表达式可以出现多次。</p></li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /test_a/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;regexp&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;f.keyword&quot;</span><span class="token operator">:</span> <span class="token string">&quot;[A-z].+&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>性能也很低，需要扫描完整索引。</p><hr><h2 id="搜索推荐" tabindex="-1"><a class="header-anchor" href="#搜索推荐" aria-hidden="true">#</a> 搜索推荐</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>搜索推荐： search as your type， 搜索提示。如：索引中有若干数据以“hello”开头，那么在输入hello的时候，推荐相关信息。（类似百度输入框）</p></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /test_a/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;match_phrase_prefix&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;f&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java s&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;slop&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;max_expansions&quot;</span><span class="token operator">:</span> <span class="token number">10</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol><li>其原理和match phrase类似，是先使用match匹配term数据（java），然后在指定的slop移动次数范围内，前缀匹配（s）</li><li>max_expansions是用于指定prefix最多匹配多少个term（单词），超过这个数量就不再匹配了。</li><li>这种语法的限制是，只有最后一个term会执行前缀搜索。</li><li>行性能很差，毕竟最后一个term是需要扫描所有符合slop要求的倒排索引的term。</li><li><strong>因为效率较低，如果必须使用，则一定要使用参数max_expansions</strong></li></ol><hr><h2 id="模糊搜索" tabindex="-1"><a class="header-anchor" href="#模糊搜索" aria-hidden="true">#</a> 模糊搜索</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>搜索的时候，可能搜索条件文本输入错误，如：hello world -&gt; hello word。这种拼写错误还是很常见的。<strong>fuzzy技术就是用于解决错误拼写</strong>的（在英文中很有效，在中文中几乎无效。）。</p><p>其中fuzziness代表value的值word可以修改多少个字母来进行拼写错误的纠正（修改字母的数量包含字母变更，增加或减少字母。）。f代表要搜索的字段名称。</p></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /test_a/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;fuzzy&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;f&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;word&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;fuzziness&quot;</span><span class="token operator">:</span> <span class="token number">2</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',66),e={},t=(0,a(66262).A)(e,[["render",function(s,n){return p}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,p]of n)a[s]=p;return a}}}]);