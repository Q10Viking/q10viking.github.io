"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[53904],{31950:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0a9658a8",path:"/MySQL/60%20%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E6%B7%B1%E5%88%86%E9%A1%B5.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"如何优化深分页limit 1000000",slug:"如何优化深分页limit-1000000",children:[]},{level:2,title:"实战",slug:"实战",children:[{level:3,title:"数据准备",slug:"数据准备",children:[]},{level:3,title:"普通分页查询",slug:"普通分页查询",children:[]},{level:3,title:"相同偏移量，不同数据量",slug:"相同偏移量-不同数据量",children:[]},{level:3,title:"相同数据量，不同偏移量",slug:"相同数据量-不同偏移量",children:[]}]}],filePathRelative:"MySQL/60 如何优化深分页.md"}},57192:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(20641).Fv)('<h2 id="如何优化深分页limit-1000000" tabindex="-1"><a class="header-anchor" href="#如何优化深分页limit-1000000" aria-hidden="true">#</a> <strong>如何优化深分页limit 1000000</strong></h2><p>深分页问题是 MySQL 中常见的性能问题，当你尝试获取大量数据的后续页面时，性能会显著下降。这是因为 MySQL 需要先扫描到指定的偏移量，然后再返回数据。</p><p>例如，以下查询可能会非常慢：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这是因为 MySQL 需要先扫描 1000000 行数据，然后再返回后面的 10 行数据。</p><p>解决深分页问题的常见方法有以下几种：</p><ol><li><p><strong>使用覆盖索引：</strong> 覆盖索引可以让 MySQL 在索引中获取所有需要的数据，而无需回表查询。这可以大大提高查询速度。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p><strong>记住上次的位置：</strong> 如果你的应用程序可以记住上次查询的最后一个 ID，那么你可以使用 WHERE 子句来避免扫描大量数据。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> last_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p><strong>使用分页插件：</strong> 有些数据库框架提供了分页插件，可以自动优化分页查询。</p></li><li><p><strong>避免深分页：</strong> 在设计应用程序时，尽量避免深分页。例如，你可以提供搜索功能，让用户快速找到他们需要的数据，而不是浏览大量的页面。</p></li></ol><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><h3 id="数据准备" tabindex="-1"><a class="header-anchor" href="#数据准备" aria-hidden="true">#</a> 数据准备</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- 1.创建表：</span>\n<span class="token keyword">drop</span> <span class="token keyword">table</span> user_login_log<span class="token punctuation">;</span>\n\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user_login_log <span class="token punctuation">(</span>\n  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  user_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  ip <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  attr1 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  attr2 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  attr3 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  attr4 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  attr5 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  attr6 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  attr7 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  attr8 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  attr9 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  attr10 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n\n<span class="token comment">-- 2.mock数据：</span>\n<span class="token comment">-- 创建存储过程</span>\n<span class="token keyword">DELIMITER</span> $$\n<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> insert_mock_data<span class="token punctuation">(</span><span class="token operator">IN</span> n <span class="token keyword">INT</span><span class="token punctuation">)</span>\n<span class="token keyword">BEGIN</span>\n  <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">set</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">WHILE</span> i <span class="token operator">&lt;</span> n <span class="token keyword">DO</span>\n    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user_login_log<span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> attr1<span class="token punctuation">,</span> attr2<span class="token punctuation">,</span> attr3<span class="token punctuation">,</span> attr4<span class="token punctuation">,</span> attr5<span class="token punctuation">,</span> attr6<span class="token punctuation">,</span> attr7<span class="token punctuation">,</span> attr8<span class="token punctuation">,</span> attr9<span class="token punctuation">,</span> attr10<span class="token punctuation">)</span>\n    <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;user_&#39;</span><span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span>FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr1_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr2_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr3_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr4_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr5_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr6_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr7_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr8_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr9_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      CONCAT<span class="token punctuation">(</span><span class="token string">&#39;attr10_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSmZPdUqUBYmoJJakYmoLNJTyMnfOBpXTBbDKOSUWYfCxFJFakYoyCqXNZJkhfeizXsSm&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">then</span>\n\t\t\t<span class="token keyword">commit</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>\n    <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>\n<span class="token keyword">END</span>$$\n<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>\n\n<span class="token comment">-- 生成随机数</span>\n<span class="token comment">-- 为了提升mock数据的效率，这里把额外字段数据写死了。</span>\n<span class="token comment">-- 如果想修改成随机数，将第二个参数换成rand_string(66)，也就是改成 CONCAT(&#39;attr*_&#39;, rand_string(66)) 就可以啦。</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> rand_string<span class="token punctuation">(</span>n <span class="token keyword">INT</span><span class="token punctuation">)</span>\n<span class="token keyword">RETURNS</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DETERMINISTIC</span> <span class="token keyword">NO</span> <span class="token keyword">SQL</span>\n<span class="token keyword">BEGIN</span>\n  <span class="token keyword">DECLARE</span> chars_str <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">DECLARE</span> return_str <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">WHILE</span> i <span class="token operator">&lt;</span> n <span class="token keyword">DO</span> \n    <span class="token keyword">SET</span> return_str <span class="token operator">=</span> CONCAT<span class="token punctuation">(</span>return_str<span class="token punctuation">,</span> SUBSTRING<span class="token punctuation">(</span>chars_str<span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">SET</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>\n  <span class="token keyword">RETURN</span> return_str<span class="token punctuation">;</span>\n<span class="token keyword">END</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 调用存储过程插入1000万条数据</span>\n<span class="token keyword">CALL</span> insert_mock_data<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><h3 id="普通分页查询" tabindex="-1"><a class="header-anchor" href="#普通分页查询" aria-hidden="true">#</a> 普通分页查询</h3><p>MySQL通过Limit关键字实现分页查询，语法如下：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">Limit</span> <span class="token keyword">offset</span><span class="token punctuation">,</span> row_count<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>limit是mysql的语法\nselect * from table limit m,n\n其中m是指记录开始的index，从0开始，表示第一条记录\nn是指从第m+1条开始，取n条。\nselect * from tablename limit 2,4\n即取出第3条至第6条，4条记录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="相同偏移量-不同数据量" tabindex="-1"><a class="header-anchor" href="#相同偏移量-不同数据量" aria-hidden="true">#</a> 相同偏移量，不同数据量</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>从上面结果可以得出结论：数据量越大，花费时间越长</p></blockquote><p><img src="/images/MySQL/image-20240325113524726.png" alt="image-20240325113524726"></p><h4 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h4><p>明确查询字段，避免使用select *，减少MySQL优化器负担。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- 避免使用select *</span>\n<span class="token keyword">select</span> user_id<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> attr1<span class="token punctuation">,</span> attr2<span class="token punctuation">,</span> attr3<span class="token punctuation">,</span> attr4<span class="token punctuation">,</span> attr5<span class="token punctuation">,</span> attr6<span class="token punctuation">,</span> attr7<span class="token punctuation">,</span> attr8<span class="token punctuation">,</span> attr9<span class="token punctuation">,</span> attr10 <span class="token keyword">from</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>按需查找字段，减少网络IO消耗。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- 按需查找字段</span>\n<span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> user_id <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>查询字段索引覆盖，通过辅助索引提升查询效率</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- 覆盖索引</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_login_log <span class="token keyword">ADD</span> <span class="token keyword">index</span> idx_user_id <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> user_id <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">;</span>\n\n<span class="token keyword">alter</span> <span class="token keyword">TABLE</span> user_login_log <span class="token keyword">drop</span> <span class="token keyword">index</span> idx_user_id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>针对数据量大的情况，我们可以做如下优化：</p><ul><li><p>按需查询字段，减少网络IO消耗</p></li><li><p>避免使用select *，减少MySQL优化器负担</p></li><li><p>查询的字段尽量保证索引覆盖</p></li><li><p>借助nosql缓存数据缓解MySQL数据库的压力</p></li></ul><h3 id="相同数据量-不同偏移量" tabindex="-1"><a class="header-anchor" href="#相同数据量-不同偏移量" aria-hidden="true">#</a> 相同数据量，不同偏移量</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>从上面结果可以得出结论：偏移量越大，花费时间越长</p></blockquote><p><img src="/images/MySQL/image-20240325113640086.png" alt="image-20240325113640086"></p><h4 id="优化-1" tabindex="-1"><a class="header-anchor" href="#优化-1" aria-hidden="true">#</a> 优化</h4><p><strong>偏移量大的场景我们也可以使用数据量大的优化方案，除此之外还可以将偏移量改为使用Id限定的方式提升查询效率</strong></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- 增加索引where条件，缩减数据范围</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_login_log <span class="token keyword">where</span> id <span class="token operator">&gt;</span> <span class="token number">1000000</span> <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>针对偏移量越大的情况，我们可以做如下优化：</p><ul><li>添加where条件缩减扫描条数，然后limit关键再进行数据筛选（使用索引字段进行条件过滤）</li></ul>',36),e={},t=(0,a(66262).A)(e,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);