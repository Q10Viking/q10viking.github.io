"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[83467],{81108:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-01a3f7a0",path:"/designpattern/05%20%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/designpattern/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"模式定义",slug:"模式定义",children:[]},{level:2,title:"优点",slug:"优点",children:[]},{level:2,title:"代码示例",slug:"代码示例",children:[]}],filePathRelative:"designpattern/05 原型模式.md"}},62397:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(20641);const t=(0,p.Fv)('<h2 id="模式定义" tabindex="-1"><a class="header-anchor" href="#模式定义" aria-hidden="true">#</a> 模式定义</h2><p>指原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p><p><img src="/images/designpattern/image-20230228111840520.png" alt="image-20230228111840520"></p><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h2><ol><li>可以不耦合具体类的情况下克隆对象</li><li>避免重复的初始化代码</li><li>更方便的构建复杂对象</li></ol><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2>',6),e={href:"https://github.com/Q10Viking/learncode/tree/main/designpattern/src/org/hzz/prototype",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Fv)('<ul><li><p>如果对应的类中的字段为 8 种原生数据类型，或者8种原生数据类型的包装类型，或String，BigInteger</p></li><li><pre><code>则只需要实现Cloneable这个接口且覆盖Object.clone方法，即可利用jvm的克隆机制，完成对象的拷贝\n</code></pre></li><li><pre><code>这种方式即是浅拷贝， 如果对应的类中数据为自定义数据类型，或者其他可变的数据类型（如Date,或者其\n</code></pre></li><li><pre><code>他对象类型），要借助jvm的克隆机制完成数据的拷贝，则需要实现所有的对象字段的遍历拷贝，即是深拷贝\n</code></pre></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> part1<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> part2<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> part3<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> part4<span class="token punctuation">;</span>\n    <span class="token comment">// 自定义数据类型</span>\n    <span class="token keyword">private</span> <span class="token class-name">BaseInfo</span> baseInfo<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token class-name">String</span> part1<span class="token punctuation">,</span> <span class="token class-name">String</span> part2<span class="token punctuation">,</span> <span class="token class-name">String</span> part3<span class="token punctuation">,</span> <span class="token class-name">String</span> part4<span class="token punctuation">,</span> <span class="token class-name">BaseInfo</span> baseInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>part1<span class="token operator">=</span>part1<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>part2<span class="token operator">=</span>part2<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>part3<span class="token operator">=</span>part3<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>part4<span class="token operator">=</span>part4<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>baseInfo<span class="token operator">=</span>baseInfo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPart1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> part1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPart1</span><span class="token punctuation">(</span><span class="token class-name">String</span> part1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>part1<span class="token operator">=</span>part1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPart2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> part2<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPart2</span><span class="token punctuation">(</span><span class="token class-name">String</span> part2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>part2<span class="token operator">=</span>part2<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPart3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> part3<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPart3</span><span class="token punctuation">(</span><span class="token class-name">String</span> part3<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>part3<span class="token operator">=</span>part3<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPart4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> part4<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPart4</span><span class="token punctuation">(</span><span class="token class-name">String</span> part4<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>part4<span class="token operator">=</span>part4<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token keyword">public</span> <span class="token class-name">BaseInfo</span> <span class="token function">getBaseInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> baseInfo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBaseInfo</span><span class="token punctuation">(</span><span class="token class-name">BaseInfo</span> baseInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>baseInfo<span class="token operator">=</span>baseInfo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Product{&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;part1=&#39;&quot;</span> <span class="token operator">+</span> part1 <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, part2=&#39;&quot;</span> <span class="token operator">+</span> part2 <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, part3=&#39;&quot;</span> <span class="token operator">+</span> part3 <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, part4=&#39;&quot;</span> <span class="token operator">+</span> part4 <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, baseInfo=&quot;</span> <span class="token operator">+</span> baseInfo <span class="token operator">+</span>\n                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">Product</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>\n<span class="token comment">//        return useSerializClone();</span>\n        <span class="token keyword">return</span> <span class="token function">useJVMClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 利用jvm克隆机制完成的深拷贝\n     */</span>\n    <span class="token keyword">private</span> <span class="token class-name">Product</span> <span class="token function">useJVMClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">BaseInfo</span> baseInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseInfo</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseInfo<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        product<span class="token punctuation">.</span><span class="token function">setBaseInfo</span><span class="token punctuation">(</span>baseInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">Product</span> <span class="token function">useSerializClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br></div></div><blockquote><p>测试</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">BaseInfo</span> baseInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseInfo</span><span class="token punctuation">(</span><span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Product</span> product<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span> <span class="token string">&quot;part1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;part2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;part3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;part4&quot;</span><span class="token punctuation">,</span> baseInfo <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Product</span> clone<span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;original: &quot;</span> <span class="token operator">+</span> product <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;clone:  &quot;</span> <span class="token operator">+</span> clone <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        product<span class="token punctuation">.</span><span class="token function">getBaseInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCompanyName</span><span class="token punctuation">(</span> <span class="token string">&quot;HZZ Come ON&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        product<span class="token punctuation">.</span><span class="token function">setPart1</span><span class="token punctuation">(</span><span class="token string">&quot;rename part1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;original: &quot;</span> <span class="token operator">+</span> product <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;clone:  &quot;</span> <span class="token operator">+</span> clone <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * original: Product<span class="token punctuation">{</span>part1=&#39;part1&#39;, part2=&#39;part2&#39;, part3=&#39;part3&#39;, part4=&#39;part4&#39;, baseInfo=BaseInfo<span class="token punctuation">{</span>companyName=&#39;Q10Viking&#39;<span class="token punctuation">}</span><span class="token punctuation">}</span>\n * clone:  Product<span class="token punctuation">{</span>part1=&#39;part1&#39;, part2=&#39;part2&#39;, part3=&#39;part3&#39;, part4=&#39;part4&#39;, baseInfo=BaseInfo<span class="token punctuation">{</span>companyName=&#39;Q10Viking&#39;<span class="token punctuation">}</span><span class="token punctuation">}</span>\n * original: Product<span class="token punctuation">{</span>part1=&#39;rename part1&#39;, part2=&#39;part2&#39;, part3=&#39;part3&#39;, part4=&#39;part4&#39;, baseInfo=BaseInfo<span class="token punctuation">{</span>companyName=&#39;HZZ Come ON&#39;<span class="token punctuation">}</span><span class="token punctuation">}</span>\n * clone:  Product<span class="token punctuation">{</span>part1=&#39;part1&#39;, part2=&#39;part2&#39;, part3=&#39;part3&#39;, part4=&#39;part4&#39;, baseInfo=BaseInfo<span class="token punctuation">{</span>companyName=&#39;Q10Viking&#39;<span class="token punctuation">}</span><span class="token punctuation">}</span>\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',4),c={},l=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),o],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);