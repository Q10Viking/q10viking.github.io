"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[54879],{14601:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-642c5757",path:"/MySQL/09%20explain%E5%88%86%E6%9E%90%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"1. 全值匹配",slug:"_1-全值匹配",children:[]},{level:2,title:"2. 最左前缀法则",slug:"_2-最左前缀法则",children:[]},{level:2,title:"3. 不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描",slug:"_3-不在索引列上做任何操作-计算、函数、-自动or手动-类型转换-会导致索引失效而转向全表扫描",children:[]},{level:2,title:"4. 存储引擎不能使用索引中范围条件右边的列",slug:"_4-存储引擎不能使用索引中范围条件右边的列",children:[]},{level:2,title:"5. 尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句",slug:"_5-尽量使用覆盖索引-只访问索引的查询-索引列包含查询列-减少-select-语句",children:[]},{level:2,title:"6. mysql在使用不等于（！=或者<>），not in ，not exists 的时候无法使用索引会导致全表扫描",slug:"_6-mysql在使用不等于-或者-not-in-not-exists-的时候无法使用索引会导致全表扫描",children:[]},{level:2,title:"7. is null,is not null 一般情况下也无法使用索引",slug:"_7-is-null-is-not-null-一般情况下也无法使用索引",children:[]},{level:2,title:"8. like以通配符开头（'$abc...'）mysql索引失效会变成全表扫描操作",slug:"_8-like以通配符开头-abc-mysql索引失效会变成全表扫描操作",children:[]},{level:2,title:"9. 字符串不加单引号索引失效",slug:"_9-字符串不加单引号索引失效",children:[]},{level:2,title:"10 少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化",slug:"_10-少用or或in-用它查询时-mysql不一定使用索引-mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引-详见范围查询优化",children:[]},{level:2,title:"11 范围查询优化",slug:"_11-范围查询优化",children:[]},{level:2,title:"⭐⭐索引使用总结",slug:"⭐⭐索引使用总结",children:[]},{level:2,title:"测试数据",slug:"测试数据",children:[]}],filePathRelative:"MySQL/09 explain分析索引最佳实战.md"}},39853:(s,n,a)=>{a.r(n),a.d(n,{default:()=>o});const e=(0,a(20641).Fv)('<h2 id="_1-全值匹配" tabindex="-1"><a class="header-anchor" href="#_1-全值匹配" aria-hidden="true">#</a> 1. 全值匹配</h2><p>针对联合索引，最左前缀原则，对于联合索引，使用的字段覆盖越多越好</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211026235907189.png" alt="image-20211026235907189"></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211026235954942.png" alt="image-20211026235954942"></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027000032859.png" alt="image-20211027000032859"></p><hr><h2 id="_2-最左前缀法则" tabindex="-1"><a class="header-anchor" href="#_2-最左前缀法则" aria-hidden="true">#</a> 2. 最左前缀法则</h2><p>如果<strong>要索引了多列</strong>，要遵守最左前缀法则。指的是查询<strong>从索引的最左前列开始并且不跳过索引中的列</strong>。</p><p><img src="/images/MySQL/image-20210520101928183.png" alt="image-20210520101928183"></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- 走了部分索引name</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Bill&#39;</span> <span class="token operator">and</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">-- 走了部分索引name,age</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Bill&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>\n<span class="token comment">-- 没有走索引</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">AND</span> position <span class="token operator">=</span> <span class="token string">&#39;dev&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">-- 没有走索引</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> position <span class="token operator">=</span> <span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_3-不在索引列上做任何操作-计算、函数、-自动or手动-类型转换-会导致索引失效而转向全表扫描" tabindex="-1"><a class="header-anchor" href="#_3-不在索引列上做任何操作-计算、函数、-自动or手动-类型转换-会导致索引失效而转向全表扫描" aria-hidden="true">#</a> 3. 不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> <span class="token keyword">left</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>给hire_time增加一个普通索引：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>idx_hire_time<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>hire_time<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span> <span class="token punctuation">;</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> <span class="token keyword">date</span><span class="token punctuation">(</span>hire_time<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token string">&#39;2021-10-26&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="/images/MySQL/image-20211027002313798.png" alt="image-20211027002313798"></p><p>转化为日期范围查询，有可能会走索引</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> hire_time <span class="token operator">&gt;=</span><span class="token string">&#39;2021-10-26 00:00:00&#39;</span> <span class="token operator">and</span> hire_time <span class="token operator">&lt;=</span><span class="token string">&#39;2021-10-26 23:59:59&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027002512622.png" alt="image-20211027002512622"></p><p>还原最初索引状态</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span> <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>idx_hire_time<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><h2 id="_4-存储引擎不能使用索引中范围条件右边的列" tabindex="-1"><a class="header-anchor" href="#_4-存储引擎不能使用索引中范围条件右边的列" aria-hidden="true">#</a> 4. 存储引擎不能使用索引中范围条件右边的列</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- position有走索引</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">-- position有走索引， 因为在age是范围查找的，对应的position可能是无需的，那么position就不能再走索引查询了</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">&gt;</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="/images/MySQL/image-20211027003259658.png" alt="image-20211027003259658"></p><p>可以看到position没有走，而bame,age都是走的查询，78如果只是name的话是74<img src="/images/MySQL/image-20211027003335914.png" alt="image-20211027003335914"></p><hr><h2 id="_5-尽量使用覆盖索引-只访问索引的查询-索引列包含查询列-减少-select-语句" tabindex="-1"><a class="header-anchor" href="#_5-尽量使用覆盖索引-只访问索引的查询-索引列包含查询列-减少-select-语句" aria-hidden="true">#</a> 5. 尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句</h2><blockquote><p>减少回表查询</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">AND</span> position<span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027012806773.png" alt="image-20211027012806773"></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027012844507.png" alt="image-20211027012844507"></p><h2 id="_6-mysql在使用不等于-或者-not-in-not-exists-的时候无法使用索引会导致全表扫描" tabindex="-1"><a class="header-anchor" href="#_6-mysql在使用不等于-或者-not-in-not-exists-的时候无法使用索引会导致全表扫描" aria-hidden="true">#</a> 6. mysql在使用不等于（！=或者&lt;&gt;），not in ，not exists 的时候无法使用索引会导致全表扫描</h2><p>&lt; 小于、 &gt; 大于、 &lt;=、&gt;= 这些，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">!=</span> <span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027013111811.png" alt="image-20211027013111811"></p><h2 id="_7-is-null-is-not-null-一般情况下也无法使用索引" tabindex="-1"><a class="header-anchor" href="#_7-is-null-is-not-null-一般情况下也无法使用索引" aria-hidden="true">#</a> 7. is null,is not null 一般情况下也无法使用索引</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027013234790.png" alt="image-20211027013234790"></p><h2 id="_8-like以通配符开头-abc-mysql索引失效会变成全表扫描操作" tabindex="-1"><a class="header-anchor" href="#_8-like以通配符开头-abc-mysql索引失效会变成全表扫描操作" aria-hidden="true">#</a> 8. like以通配符开头（&#39;$abc...&#39;）mysql索引失效会变成全表扫描操作</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;%Lei&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027013407542.png" alt="image-20211027013407542"></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- 走了索引</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;Lei%&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="/images/MySQL/image-20211027013512040.png" alt="image-20211027013512040"></p><p><strong>问题：解决like&#39;%字符串%&#39;索引不被使用的方法？</strong></p><ol><li><p>使用覆盖索引，查询字段必须是建立覆盖索引字段</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;%Lei%&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027013754413.png" alt="image-20211027013754413"></p></li><li><p>如果不能使用覆盖索引则可能需要借助搜索引擎</p></li></ol><h2 id="_9-字符串不加单引号索引失效" tabindex="-1"><a class="header-anchor" href="#_9-字符串不加单引号索引失效" aria-hidden="true">#</a> 9. 字符串不加单引号索引失效</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;1000&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027013857329.png" alt="image-20211027013857329"></p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027013936150.png" alt="image-20211027013936150"></p><h2 id="_10-少用or或in-用它查询时-mysql不一定使用索引-mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引-详见范围查询优化" tabindex="-1"><a class="header-anchor" href="#_10-少用or或in-用它查询时-mysql不一定使用索引-mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引-详见范围查询优化" aria-hidden="true">#</a> 10 少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">&#39;HanMeimei&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="/images/MySQL/image-20211027014057892.png" alt="image-20211027014057892"></p><h2 id="_11-范围查询优化" tabindex="-1"><a class="header-anchor" href="#_11-范围查询优化" aria-hidden="true">#</a> 11 范围查询优化</h2><p>mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- 给年龄添加单值索引</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>idx_age<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span> <span class="token punctuation">;</span>\n<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> age <span class="token operator">&gt;=</span><span class="token number">1</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span><span class="token number">2000000</span><span class="token punctuation">;</span>\n<span class="token comment">-- 还原最初索引状态</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span> <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>idx_age<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="⭐⭐索引使用总结" tabindex="-1"><a class="header-anchor" href="#⭐⭐索引使用总结" aria-hidden="true">#</a> ⭐⭐索引使用总结</h2><p><img src="/images/MySQL/image-20211027014439280.png" alt="image-20211027014439280"></p><h2 id="测试数据" tabindex="-1"><a class="header-anchor" href="#测试数据" aria-hidden="true">#</a> 测试数据</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>employees<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>\n <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>\n <span class="token identifier"><span class="token punctuation">`</span>position<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;职位&#39;</span><span class="token punctuation">,</span>\n <span class="token identifier"><span class="token punctuation">`</span>hire_time<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;入职时间&#39;</span><span class="token punctuation">,</span>\n <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_name_age_position<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>position<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;员工记录表&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;HanMeimei&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">&#39;dev&#39;</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;Lucy&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">&#39;dev&#39;</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',64),p={},o=(0,a(66262).A)(p,[["render",function(s,n){return e}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);