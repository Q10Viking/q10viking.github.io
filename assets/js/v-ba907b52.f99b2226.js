"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[27898],{16160:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-ba907b52",path:"/nacos/11%20Nacos%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/nacos/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"SpringBoot启动",slug:"springboot启动",children:[]},{level:2,title:"Nacos服务发现",slug:"nacos服务发现",children:[]}],filePathRelative:"nacos/11 Nacos服务发现.md"}},83986:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(20641).Fv)('<h2 id="springboot启动" tabindex="-1"><a class="header-anchor" href="#springboot启动" aria-hidden="true">#</a> SpringBoot启动</h2><p>扩展点实现SmartLifeCycle</p><p>LifeCycleProcessor 切入点nacos服务发现。</p><p>org.springframework.context.support.DefaultLifecycleProcessor#getLifecycleBeans</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\\n  com.alibaba.cloud.nacos.discovery.NacosDiscoveryAutoConfiguration,\\\n  com.alibaba.cloud.nacos.ribbon.RibbonNacosAutoConfiguration,\\\n  com.alibaba.cloud.nacos.endpoint.NacosDiscoveryEndpointAutoConfiguration,\\\n  com.alibaba.cloud.nacos.registry.NacosServiceRegistryAutoConfiguration,\\\n  com.alibaba.cloud.nacos.discovery.NacosDiscoveryClientConfiguration,\\   # 服务发现的配置</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>实现了<span class="token class-name">SmartLifecycle</span>接口\n<span class="token annotation punctuation">@Bean</span>\n\t<span class="token annotation punctuation">@ConditionalOnMissingBean</span>\n\t<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;spring.cloud.nacos.discovery.watch.enabled&quot;</span><span class="token punctuation">,</span>\n\t\t\tmatchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n\t<span class="token keyword">public</span> <span class="token class-name">NacosWatch</span> <span class="token function">nacosWatch</span><span class="token punctuation">(</span><span class="token class-name">NacosServiceManager</span> nacosServiceManager<span class="token punctuation">,</span>\n\t\t\t<span class="token class-name">NacosDiscoveryProperties</span> nacosDiscoveryProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosWatch</span><span class="token punctuation">(</span>nacosServiceManager<span class="token punctuation">,</span> nacosDiscoveryProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="nacos服务发现" tabindex="-1"><a class="header-anchor" href="#nacos服务发现" aria-hidden="true">#</a> Nacos服务发现</h2><ol><li>程序启动就拉取一次</li><li>定时任务不断更新</li><li>服务端服务变动时通知客户端更新</li></ol><p>学习到spring事件的使用</p><p>https://www.processon.com/view/link/6294ef2f1efad45e08412172</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Map&lt;Boolean, List&lt;Instance&gt;&gt; ipMap = new HashMap&lt;&gt;(2);\n        ipMap.put(Boolean.TRUE, new ArrayList&lt;&gt;());\n        ipMap.put(Boolean.FALSE, new ArrayList&lt;&gt;());\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>服务发现时间回调\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>nacos通知注册的服务，刷新服务列表通过udp的方式。</p><p>线程工厂</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ScheduledExecutorService</span> executorService\n    \n<span class="token keyword">this</span><span class="token punctuation">.</span>executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token annotation punctuation">@Override</span>\n                <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;com.alibaba.nacos.naming.push.receiver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">return</span> thread<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>线程池异常处理</p>',16),p={},t=(0,s(66262).A)(p,[["render",function(n,a){return e}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);