"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[33868],{48330:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-55ec449e",path:"/Redis/36%20%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"简单缓存架构",slug:"简单缓存架构",children:[]},{level:2,title:"数据冷热分离❤️",slug:"数据冷热分离❤️",children:[]},{level:2,title:"缓存击穿（失效）",slug:"缓存击穿-失效",children:[]},{level:2,title:"缓存穿透❤️",slug:"缓存穿透❤️",children:[]},{level:2,title:"突发性热点数据重建缓存❤️",slug:"突发性热点数据重建缓存❤️",children:[{level:3,title:"优化❤️",slug:"优化❤️",children:[]}]},{level:2,title:"缓存与数据库双写不一致⭐",slug:"缓存与数据库双写不一致⭐",children:[{level:3,title:"解决方案(读写锁)❤️",slug:"解决方案-读写锁-❤️",children:[]}]},{level:2,title:"缓存雪崩❤️",slug:"缓存雪崩❤️",children:[]}],filePathRelative:"Redis/36 互联网多级缓存架构.md"}},20280:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(20641);const t={class:"custom-container tip"},c=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),e={href:"https://github.com/Q10Viking/learncode/tree/main/redis/_06_springboot_redis_cache",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Lk)("p",null,"redis+mysql",-1),l=(0,p.Fv)('<blockquote><p>互联网多级缓存架构</p></blockquote><ol><li>nginx缓存</li><li>web中的java本地缓存</li><li>Redis缓存</li></ol><p><img src="/images/Redis/80946.png" alt=""></p><h2 id="简单缓存架构" tabindex="-1"><a class="header-anchor" href="#简单缓存架构" aria-hidden="true">#</a> 简单缓存架构</h2><p>redis--&gt;DB</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**-------------------------------------------------------------------------------\n     *    简单版redis+db\n     *-------------------------------------------------------------------------------*/</span>\n<span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductV1</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n    <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token comment">// 从redis中获取</span>\n    product <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>redisUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>product<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从缓存中获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从DB获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    product <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 加入缓存 并且有过期时间</span>\n    redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">PRODUCT_CACHE_TIMEOUT</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><img src="/images/MySQL/image-20220810204631876.png" alt="image-20220810204631876"></p><h2 id="数据冷热分离❤️" tabindex="-1"><a class="header-anchor" href="#数据冷热分离❤️" aria-hidden="true">#</a> 数据冷热分离❤️</h2><p>热门的数据才缓冲，如果冷门商品也放入缓存，会导致redis数据量过大，压力过大。</p><p>在用户访问时，将商品添加到缓存，并设置过期时间。再次访问时延长过期时间。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**-------------------------------------------------------------------------------\n     *    简单版redis+db 冷热分离\n     *-------------------------------------------------------------------------------*/</span>\n<span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductV2</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n    <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token comment">// 从redis中获取</span>\n    product <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>redisUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>product<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 冷热分离，延长过期时间⭐</span>\n        redisUtil<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从缓存中获取，并延长过期时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从DB获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    product <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 加入缓存 并且有过期时间</span>\n    redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">PRODUCT_CACHE_TIMEOUT</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 延长0-4小时</span>\n    <span class="token keyword">return</span> <span class="token constant">PRODUCT_CACHE_TIMEOUT</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="缓存击穿-失效" tabindex="-1"><a class="header-anchor" href="#缓存击穿-失效" aria-hidden="true">#</a> 缓存击穿（失效）</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如批量上架商品的时候，设置过期时间都是24小时。24小时过了，都失效了</p><p>请求的压力直接打到了数据库DB</p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**-------------------------------------------------------------------------------\n     *    简单版redis+db + 冷热分离 + 缓存击穿（失效）\n     *-------------------------------------------------------------------------------*/</span>\n    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductV3</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token comment">// 从redis中获取</span>\n        product <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>redisUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>product<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// 冷热分离，再次设置过期时间</span>\n            redisUtil<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从缓存中获取，并延长过期时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从DB获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        product <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 加入缓存 并且设置随机的过期时间⭐</span>\n        redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 在24小时基础上，延长0-4小时</span>\n        <span class="token keyword">return</span> <span class="token constant">PRODUCT_CACHE_TIMEOUT</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="缓存穿透❤️" tabindex="-1"><a class="header-anchor" href="#缓存穿透❤️" aria-hidden="true">#</a> 缓存穿透❤️</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>大量请求访问一个不存在的商品，缓存中没有，数据库中也没有。</p></div><p>解决方案，当从数据库查询出数据后，发现是空的，存一个空对象到redis中。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**-------------------------------------------------------------------------------\n     *    简单版redis+db + 冷热分离 + 缓存击穿（失效）+ 缓存穿透\n     *-------------------------------------------------------------------------------*/</span>\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EMPTY_CACHE</span> <span class="token operator">=</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductV4</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n    <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token comment">// 从redis中获取</span>\n    <span class="token class-name">String</span> cacheStr <span class="token operator">=</span> redisUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>cacheStr<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">EMPTY_CACHE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cacheStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Redis层处理缓存空对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 给它延长过期时间⭐</span>\n            redisUtil<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token function">genEmptyCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        product <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>cacheStr<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 冷热分离，缓存命中，再次设置过期时间，到达延长的效果</span>\n        redisUtil<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从缓存中获取，并延长过期时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从DB获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    product <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 处理缓存穿透放入一个空对象</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;处理缓存穿透&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>⭐\n        redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token constant">EMPTY_CACHE</span><span class="token punctuation">,</span><span class="token function">genEmptyCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token comment">// 加入缓存 并且设置随机的过期时间</span>\n        redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">genEmptyCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">60</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="突发性热点数据重建缓存❤️" tabindex="-1"><a class="header-anchor" href="#突发性热点数据重建缓存❤️" aria-hidden="true">#</a> 突发性热点数据重建缓存❤️</h2><p>让一个线程去重建缓存。Double Check双重检测锁，相比使用synchronized,使用分布式锁，粒度更加细。如果使用synchronized 查询id=101和102的都会产生竞争。但是使用分布式锁，分别锁101,和102那么就会粒度降低下来。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**-------------------------------------------------------------------------------\n     *    简单版redis+db + 冷热分离 + 缓存击穿（失效）+ 缓存穿透\n     *    + 热点数据重建\n     *-------------------------------------------------------------------------------*/</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOCK_PRODUCT_HOT_CACHE_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;lock:product:hot_cache:&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductV5</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n        <span class="token class-name">String</span> lockProductKey <span class="token operator">=</span> <span class="token constant">LOCK_PRODUCT_HOT_CACHE_PREFIX</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>\n        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        product <span class="token operator">=</span> <span class="token function">getFromRedisCache</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 热点数据重建,可能有多个线程去重建，但是只需要一个线程建立就好</span>\n        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockProductKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span><span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;热点数据重建，双重检查&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            product <span class="token operator">=</span> <span class="token function">getFromRedisCache</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token function">getFromDB</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;释放锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getFromRedisCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> productKey<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token comment">// 从redis中获取</span>\n        <span class="token class-name">String</span> cacheStr <span class="token operator">=</span> redisUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>cacheStr<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">EMPTY_CACHE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cacheStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Redis层处理缓存空对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// 给它延长过期时间</span>\n                redisUtil<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token function">genEmptyCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            product <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>cacheStr<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 冷热分离，延长过期时间</span>\n            redisUtil<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从缓存中获取，并延长过期时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getFromDB</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从DB获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        product <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 处理缓存穿透放入一个空对象</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;处理缓存穿透&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token constant">EMPTY_CACHE</span><span class="token punctuation">,</span><span class="token function">genEmptyCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token comment">// 加入缓存 并且设置随机的过期时间</span>\n            redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><p>测试结果</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.341  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-1<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 热点数据重建，双重检查\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.345  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-1<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 从DB获取\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.658  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-1<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 释放锁\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.663  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-7<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 热点数据重建，双重检查\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.673  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>io-8080-exec-17<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 从缓存中获取，并延长过期时间\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.673  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-7<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 从缓存中获取，并延长过期时间\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.673  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-7<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 释放锁\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.678  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-3<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 热点数据重建，双重检查\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.680  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-3<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 从缓存中获取，并延长过期时间\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:44:03.680  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-3<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 释放锁\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当重建好之后，下一批请求，则是直接从缓冲中获取</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">2022</span>-08-10 <span class="token number">22</span>:45:49.963  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>io-8080-exec-15<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 从缓存中获取，并延长过期时间\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:45:50.013  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>io-8080-exec-17<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 从缓存中获取，并延长过期时间\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:45:50.062  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>io-8080-exec-13<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 从缓存中获取，并延长过期时间\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:45:50.112  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>io-8080-exec-10<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 从缓存中获取，并延长过期时间\n<span class="token number">2022</span>-08-10 <span class="token number">22</span>:45:50.162  INFO <span class="token number">17236</span> --- <span class="token punctuation">[</span>nio-8080-exec-1<span class="token punctuation">]</span> org.hzz.service.ProductService           <span class="token builtin class-name">:</span> 从缓存中获取，并延长过期时间\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="优化❤️" tabindex="-1"><a class="header-anchor" href="#优化❤️" aria-hidden="true">#</a> 优化❤️</h3><p>tryLock的优化lock,串行转并发</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**-------------------------------------------------------------------------------\n     *    简单版redis+db + 冷热分离 + 缓存击穿（失效）+ 缓存穿透\n     *    + 热点数据重建 + 锁优化\n     *-------------------------------------------------------------------------------*/</span>\n    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductV6</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n        <span class="token class-name">String</span> lockProductKey <span class="token operator">=</span> <span class="token constant">LOCK_PRODUCT_HOT_CACHE_PREFIX</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>\n        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        product <span class="token operator">=</span> <span class="token function">getFromRedisCache</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 热点数据重建,可能有多个线程去重建，但是只需要一个线程建立就好</span>\n        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockProductKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// lock.lock();</span>\n        <span class="token keyword">try</span><span class="token punctuation">{</span>\n            lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用trylock ⭐</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;热点数据重建，双重检查&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            product <span class="token operator">=</span> <span class="token function">getFromRedisCache</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token function">getFromDB</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取锁超时，直接从db获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token function">getFromDB</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;释放锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="缓存与数据库双写不一致⭐" tabindex="-1"><a class="header-anchor" href="#缓存与数据库双写不一致⭐" aria-hidden="true">#</a> 缓存与数据库双写不一致⭐</h2><p><img src="/images/Redis/image-20220810170213476.png" alt="image-20220810170213476"></p><p><img src="/images/Redis/image-20220810170422683.png" alt="image-20220810170422683"></p><h3 id="解决方案-读写锁-❤️" tabindex="-1"><a class="header-anchor" href="#解决方案-读写锁-❤️" aria-hidden="true">#</a> 解决方案(读写锁)❤️</h3><p>可以考虑使用分布式锁在操作数据库和缓存中，确保原子性。</p><p>针对上面这种情况可以读写锁进行优化</p><p>读锁是可以并行执行的。读锁Redisson实现是+1，所以相当于不断重入。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> updateProductKey <span class="token operator">=</span> <span class="token constant">LOCK_PRODUCT_UPDATE_PREFIX</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 获取写锁</span>\n    <span class="token class-name">RReadWriteLock</span> readWriteLock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getReadWriteLock</span><span class="token punctuation">(</span>updateProductKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">RLock</span> wLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span><span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取到写锁，更新数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        productMapper<span class="token punctuation">.</span><span class="token function">updateProduct</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productKey<span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">genProductCahceTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;释放写锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        wLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**-------------------------------------------------------------------------------\n     *    简单版redis+db + 冷热分离 + 缓存击穿（失效）+ 缓存穿透\n     *    + 热点数据重建 + 锁优化 + 读写锁\n     *-------------------------------------------------------------------------------*/</span>\n<span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductV7</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> lockProductKey <span class="token operator">=</span> <span class="token constant">LOCK_PRODUCT_HOT_CACHE_PREFIX</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> updateProductKey <span class="token operator">=</span> <span class="token constant">LOCK_PRODUCT_UPDATE_PREFIX</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>\n    <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    product <span class="token operator">=</span> <span class="token function">getFromRedisCache</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 热点数据重建,可能有多个线程去重建，但是只需要一个线程建立就好</span>\n    <span class="token class-name">RLock</span> hotCacheLock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockProductKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// lock.lock();</span>\n    <span class="token keyword">try</span><span class="token punctuation">{</span>\n        hotCacheLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;热点数据重建，双重检查&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        product <span class="token operator">=</span> <span class="token function">getFromRedisCache</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 获取读锁</span>\n        <span class="token class-name">RReadWriteLock</span> readWriteLock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getReadWriteLock</span><span class="token punctuation">(</span>updateProductKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">RLock</span> rLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取到读锁执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token function">getFromDB</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;释放读锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取锁超时，直接从db获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">getFromDB</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;释放锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        hotCacheLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h2 id="缓存雪崩❤️" tabindex="-1"><a class="header-anchor" href="#缓存雪崩❤️" aria-hidden="true">#</a> 缓存雪崩❤️</h2><p>Redis压力太多，扛不住了。导致web应用系统一直hang住redis,而tomcat是有线程数量限制的，当请求还是不断的增加，会导致web应用系统宕机。</p><p>加一个JVM级别的缓存。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**-------------------------------------------------------------------------------\n     *    简单版redis+db + 冷热分离 + 缓存击穿（失效）+ 缓存穿透\n     *    + 热点数据重建 + 锁优化 + 读写锁 + JVM级别缓存\n     *-------------------------------------------------------------------------------*/</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> productCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JVM缓存</span>\n<span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductV8</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> productKey <span class="token operator">=</span> <span class="token class-name">RedisKeyPrefixConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> lockProductKey <span class="token operator">=</span> <span class="token constant">LOCK_PRODUCT_HOT_CACHE_PREFIX</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>\n    <span class="token class-name">String</span> updateProductKey <span class="token operator">=</span> <span class="token constant">LOCK_PRODUCT_UPDATE_PREFIX</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>\n    <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    product <span class="token operator">=</span> <span class="token function">getFromJVMCache</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;从JVM缓存中获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    product <span class="token operator">=</span> <span class="token function">getFromRedisCache</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 热点数据重建,可能有多个线程去重建，但是只需要一个线程建立就好</span>\n    <span class="token class-name">RLock</span> hotCacheLock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockProductKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// lock.lock();</span>\n    <span class="token keyword">try</span><span class="token punctuation">{</span>\n        hotCacheLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;热点数据重建，双重检查&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        product <span class="token operator">=</span> <span class="token function">getFromRedisCache</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 获取读锁</span>\n        <span class="token class-name">RReadWriteLock</span> readWriteLock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getReadWriteLock</span><span class="token punctuation">(</span>updateProductKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">RLock</span> rLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取到读锁执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token function">getFromDB</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;释放读锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取锁超时，直接从db获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">getFromDB</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;释放锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        hotCacheLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getFromJVMCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> productKey<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> productCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div>',40),u={},i=(0,a(66262).A)(u,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",t,[c,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("Source Code springboot_redis_cache"),(0,p.bF)(a)])]),o]),l],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);