"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[22410],{13591:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-955c97f2",path:"/springboot/20%20orm%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/springboot/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"@Entity与@Table",slug:"entity与-table",children:[]},{level:2,title:"@Column",slug:"column",children:[]},{level:2,title:"@Id 和 @GeneratedValue 注解",slug:"id-和-generatedvalue-注解",children:[]},{level:2,title:"参看",slug:"参看",children:[]}],filePathRelative:"springboot/20 orm常用注解.md"}},63310:(n,a,s)=>{s.r(a),s.d(a,{default:()=>c});var e=s(20641);const t=(0,e.Fv)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>ORM 是 Object Relational Mapping 的缩写，译为“对象关系映射”框架。ORM最流行的框架非Hibernate莫属</p></div><p><img src="/images/springboot/image-20230603110039308.png" alt="image-20230603110039308"></p><h2 id="entity与-table" tabindex="-1"><a class="header-anchor" href="#entity与-table" aria-hidden="true">#</a> @Entity与@Table</h2><p>@Entity 注解和 @Table 注解都是 Java Persistence API 中定义的一种注解</p><ul><li><p>@Entity 说明这个 class 是实体类，并且使用默认的 orm 规则，即 class 名即数据库表中表名，class 字段名即表中的字段名</p></li><li><p>@Table 注解是一个非必须的注解。@Table 注解指定了 Entity 所要映射带数据库表，其中 @Table.name() 用来指定映射表</p><p>的表名。声明此对象映射到数据库的数据表，通过它可以为实体指定表(talbe),目录 (Catalog) 和 schema 的名字。</p></li></ul><blockquote><p>如果没有使用<code>@Table</code>指定表名，那么默认的数据库表名为实体（Entity）的类名。数据库会首字母小写，如下面的例子表名（clazz）实体名是Clazz</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@Entity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clazz</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>可以给实体名改变名字，表名为class，实体名为Class</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span><span class="token string">&quot;Class&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clazz</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>不想改变实体的名称让它使用默认的类名，只想改变表名。表名为class，实体名为Clazz</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@Entity</span>\n<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clazz</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="column" tabindex="-1"><a class="header-anchor" href="#column" aria-hidden="true">#</a> @Column</h2><p>@Column 注解用于指定字段或属性将映射到的列的详细信息。 我们可以使用具有以下最常用属性的列注解</p><ul><li><strong>name</strong> 属性允许明确指定列的名称。</li><li><strong>length</strong> 属性允许用于映射值的列的大小，特别是对于 String 值。</li><li><strong>nullable</strong>可空属性允许在生成模式时将该列标记为 NOT NULL。</li><li><strong>unique</strong> 属性允许将列标记为仅包含唯一值。</li></ul><h2 id="id-和-generatedvalue-注解" tabindex="-1"><a class="header-anchor" href="#id-和-generatedvalue-注解" aria-hidden="true">#</a> @Id 和 @GeneratedValue 注解</h2><p>每个实体 bean 都有一个主键，我们可以使用 <code>@Id</code> 注解在类上对其进行注解。 主键可以是单个字段或多个字段的组合，具体取决于表结构。</p><p>默认情况下，<code>@Id</code> 注解将自动确定要使用的最合适的主键生成策略，但我们可以通过应用 <code>@GeneratedValue</code> 注解来覆盖它，它带有两个参数 strategy 和 generator</p><ul><li>TABLE：使用一个特定的数据库表格来保存主键。</li><li>SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。</li><li><strong>IDENTITY</strong>：主键由数据库自动生成（主要是自动增长型）</li><li><strong>AUTO</strong>：主键由程序控制。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    \n    <span class="token annotation punctuation">@Id</span>\n    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n    \n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;fullname&quot;</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n    \n    <span class="token comment">//constructors, getters, and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="参看" tabindex="-1"><a class="header-anchor" href="#参看" aria-hidden="true">#</a> 参看</h2>',20),p={href:"https://blog.csdn.net/u013517229/article/details/89307158",target:"_blank",rel:"noopener noreferrer"},l={href:"https://huongdanjava.com/learn-about-entity-and-table-annotation-in-jpa.html",target:"_blank",rel:"noopener noreferrer"},o={},c=(0,s(66262).A)(o,[["render",function(n,a){const s=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,(0,e.Lk)("p",null,[(0,e.Lk)("a",p,[(0,e.eW)("@Entity 和 @Table 注解的用法"),(0,e.bF)(s)])]),(0,e.Lk)("p",null,[(0,e.Lk)("a",l,[(0,e.eW)("Learn about @Entity and @Table annotation in JPA - Huong Dan Java"),(0,e.bF)(s)])])],64)}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);