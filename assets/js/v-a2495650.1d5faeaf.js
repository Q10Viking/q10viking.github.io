"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[49442],{3607:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-a2495650",path:"/seata/09%20DataSouce%E5%92%8CDataSourceProxy%E6%B3%A8%E5%85%A5%E5%88%B0%E5%AE%B9%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AAbean.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/seata/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"DataSouce和DataSourceProxy注入到容器为什么是同一个bean",slug:"datasouce和datasourceproxy注入到容器为什么是同一个bean",children:[]},{level:2,title:"Seata为什么这么处理",slug:"seata为什么这么处理",children:[]}],filePathRelative:"seata/09 DataSouce和DataSourceProxy注入到容器为什么是同一个bean.md"}},91943:(n,a,s)=>{s.r(a),s.d(a,{default:()=>l});var t=s(20641);const p=(0,t.Lk)("h2",{id:"datasouce和datasourceproxy注入到容器为什么是同一个bean",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#datasouce和datasourceproxy注入到容器为什么是同一个bean","aria-hidden":"true"},"#"),(0,t.eW)(" DataSouce和DataSourceProxy注入到容器为什么是同一个bean")],-1),e={href:"https://www.processon.com/view/link/62a1fbaa0e3e746b9e24d791",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span> springApplication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">)</span>springApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Object</span> bean1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;druidDataSource&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Object</span> bean2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;dataSourceProxy1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean1 <span class="token operator">==</span> bean2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  为什么会相等true</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;druidDataSource&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;spring.datasource.druid&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;create druidDataSource&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">DruidDataSource</span> druidDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> druidDataSource<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 构造datasource代理对象，替换原来的datasource\n     * <span class="token keyword">@param</span> <span class="token parameter">druidDataSource</span>\n     * <span class="token keyword">@return</span>\n     */</span>\n    <span class="token annotation punctuation">@Primary</span>\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;dataSourceProxy1&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">DataSourceProxy</span> <span class="token function">dataSourceProxy</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> druidDataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;create dataSourceProxy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">DataSourceProxy</span> dataSourceProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>druidDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> dataSourceProxy<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><img src="/images/seata/DataSouce和DataSourceProxy注入到容器为什么是同一个bean.png" alt="DataSouce和DataSourceProxy注入到容器为什么是同一个bean"></p><h2 id="seata为什么这么处理" tabindex="-1"><a class="header-anchor" href="#seata为什么这么处理" aria-hidden="true">#</a> Seata为什么这么处理</h2><p>因为此时经过<strong>SeataDataSourceBeanPostProcessor</strong>这个bean后置处理器的时候已经经过了另外一个bean后置处理器（<strong>SeataAutoDataSourceProxyCreator</strong>）（已经将dataSouce创建了动态代理）</p><p>当真正执行的时候在这个代理类中会获得DataSouceProxy来处理代理逻辑，在代理类中的MethodInterceptor生成ConnectionProxy。而不是我们自己定义的bean(DataSourceProxy)</p>',5),c={href:"https://www.processon.com/view/link/62a1fcfe0791293ad1a59975",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Lk)("p",null,[(0,t.Lk)("img",{src:"/images/seata/SpringBoot-Seata集成基础设施(DataSourceProxy)准备工作.png",alt:"SpringBoot-Seata集成基础设施(DataSourceProxy)准备工作"})],-1),r={},l=(0,s(66262).A)(r,[["render",function(n,a){const s=(0,t.g2)("OutboundLink");return(0,t.uX)(),(0,t.CE)(t.FK,null,[p,(0,t.Lk)("p",null,[(0,t.Lk)("a",e,[(0,t.eW)("DataSouce和DataSourceProxy注入到容器为什么是同一个bean "),(0,t.bF)(s)])]),o,(0,t.Lk)("p",null,[(0,t.Lk)("a",c,[(0,t.eW)("SpringBoot-Seata集成基础设施(DataSourceProxy)准备工作 "),(0,t.bF)(s)])]),u],64)}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);