"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[57034],{46826:(s,n,a)=>{a.r(n),a.d(n,{data:()=>p});const p={key:"v-43c12f0a",path:"/MySQL/32%20%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"SELECT 查询的基础语法",slug:"select-查询的基础语法",children:[{level:3,title:"查询列",slug:"查询列",children:[]},{level:3,title:"别名",slug:"别名",children:[]},{level:3,title:"查询常数",slug:"查询常数",children:[]},{level:3,title:"去除重复行👍",slug:"去除重复行👍",children:[]},{level:3,title:"排序检索数据😘",slug:"排序检索数据😘",children:[]},{level:3,title:"约束返回结果的数量❤️",slug:"约束返回结果的数量❤️",children:[]},{level:3,title:"SELECT 的执行顺序💕",slug:"select-的执行顺序💕",children:[]}]},{level:2,title:"数据过滤",slug:"数据过滤",children:[{level:3,title:"比较运算符",slug:"比较运算符",children:[]},{level:3,title:"逻辑运算符",slug:"逻辑运算符",children:[]},{level:3,title:"使用通配符进行过滤",slug:"使用通配符进行过滤",children:[]}]},{level:2,title:"聚集函数",slug:"聚集函数",children:[]},{level:2,title:"数据分组并聚集统计👍",slug:"数据分组并聚集统计👍",children:[{level:3,title:"使用 HAVING 过滤分组",slug:"使用-having-过滤分组",children:[]}]}],filePathRelative:"MySQL/32 检索数据.md"}},30336:(s,n,a)=>{a.r(n),a.d(n,{default:()=>c});var p=a(20641);const e={class:"custom-container tip"},o=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),t={href:"https://q10viking.github.io/MySQL/31%20SQL%E5%87%BD%E6%95%B0.html#%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Fv)('<h2 id="select-查询的基础语法" tabindex="-1"><a class="header-anchor" href="#select-查询的基础语法" aria-hidden="true">#</a> SELECT 查询的基础语法</h2><h3 id="查询列" tabindex="-1"><a class="header-anchor" href="#查询列" aria-hidden="true">#</a> 查询列</h3><blockquote><p>对数据表中的某一列进行检索，在 SELECT 后面加上这个列的字段名即可</p></blockquote><p>比如我们想要检索数据表中都有哪些英雄</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> 夏侯惇       <span class="token operator">|</span>\n<span class="token operator">|</span> 钟无艳       <span class="token operator">|</span>\n<span class="token operator">|</span> 张飞         <span class="token operator">|</span>\n<span class="token operator">|</span> 牛魔         <span class="token operator">|</span>\n<span class="token operator">|</span> 吕布         <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 哪吒         <span class="token operator">|</span>\n<span class="token operator">|</span> 阿轲         <span class="token operator">|</span>\n<span class="token operator">|</span> 娜可露露     <span class="token operator">|</span>\n<span class="token operator">|</span> 兰陵王       <span class="token operator">|</span>\n<span class="token operator">|</span> 铠           <span class="token operator">|</span>\n<span class="token operator">|</span> 百里守约     <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="查询多列" tabindex="-1"><a class="header-anchor" href="#查询多列" aria-hidden="true">#</a> 查询多列</h4><p>对多个列进行检索，在列名之间用逗号 (,) 分割即可</p><p>检索有哪些英雄，他们的最大生命、最大法力、最大物攻和最大物防分别是多少</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max<span class="token punctuation">,</span> mp_max<span class="token punctuation">,</span> attack_max<span class="token punctuation">,</span> defense_max <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+------------+-------------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span> hp_max <span class="token operator">|</span> mp_max <span class="token operator">|</span> attack_max <span class="token operator">|</span> defense_max <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+------------+-------------+</span>\n<span class="token operator">|</span> 夏侯惇       <span class="token operator">|</span>   <span class="token number">7350</span> <span class="token operator">|</span>   <span class="token number">1746</span> <span class="token operator">|</span>        <span class="token number">321</span> <span class="token operator">|</span>         <span class="token number">397</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 钟无艳       <span class="token operator">|</span>   <span class="token number">7000</span> <span class="token operator">|</span>   <span class="token number">1760</span> <span class="token operator">|</span>        <span class="token number">318</span> <span class="token operator">|</span>         <span class="token number">409</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 张飞         <span class="token operator">|</span>   <span class="token number">8341</span> <span class="token operator">|</span>    <span class="token number">100</span> <span class="token operator">|</span>        <span class="token number">301</span> <span class="token operator">|</span>         <span class="token number">504</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 牛魔         <span class="token operator">|</span>   <span class="token number">8476</span> <span class="token operator">|</span>   <span class="token number">1926</span> <span class="token operator">|</span>        <span class="token number">273</span> <span class="token operator">|</span>         <span class="token number">394</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 吕布         <span class="token operator">|</span>   <span class="token number">7344</span> <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span>        <span class="token number">343</span> <span class="token operator">|</span>         <span class="token number">390</span> <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 哪吒         <span class="token operator">|</span>   <span class="token number">7268</span> <span class="token operator">|</span>   <span class="token number">1808</span> <span class="token operator">|</span>        <span class="token number">320</span> <span class="token operator">|</span>         <span class="token number">408</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 阿轲         <span class="token operator">|</span>   <span class="token number">5968</span> <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span>        <span class="token number">427</span> <span class="token operator">|</span>         <span class="token number">349</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 娜可露露     <span class="token operator">|</span>   <span class="token number">6205</span> <span class="token operator">|</span>   <span class="token number">1808</span> <span class="token operator">|</span>        <span class="token number">385</span> <span class="token operator">|</span>         <span class="token number">359</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 兰陵王       <span class="token operator">|</span>   <span class="token number">6232</span> <span class="token operator">|</span>   <span class="token number">1822</span> <span class="token operator">|</span>        <span class="token number">388</span> <span class="token operator">|</span>         <span class="token number">342</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 铠           <span class="token operator">|</span>   <span class="token number">6700</span> <span class="token operator">|</span>   <span class="token number">1784</span> <span class="token operator">|</span>        <span class="token number">328</span> <span class="token operator">|</span>         <span class="token number">388</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 百里守约     <span class="token operator">|</span>   <span class="token number">5611</span> <span class="token operator">|</span>   <span class="token number">1784</span> <span class="token operator">|</span>        <span class="token number">410</span> <span class="token operator">|</span>         <span class="token number">329</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+------------+-------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name <span class="token keyword">AS</span> hero_name <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> hero_name    <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> 夏侯惇       <span class="token operator">|</span>\n<span class="token operator">|</span> 钟无艳       <span class="token operator">|</span>\n<span class="token operator">|</span> 张飞         <span class="token operator">|</span>\n<span class="token operator">|</span> 牛魔         <span class="token operator">|</span>\n<span class="token operator">|</span> 吕布         <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 哪吒         <span class="token operator">|</span>\n<span class="token operator">|</span> 阿轲         <span class="token operator">|</span>\n<span class="token operator">|</span> 娜可露露     <span class="token operator">|</span>\n<span class="token operator">|</span> 兰陵王       <span class="token operator">|</span>\n<span class="token operator">|</span> 铠           <span class="token operator">|</span>\n<span class="token operator">|</span> 百里守约     <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="查询常数" tabindex="-1"><a class="header-anchor" href="#查询常数" aria-hidden="true">#</a> 查询常数</h3><ul><li>在 SELECT 查询结果中增加一列固定的常数列。这列的取值是我们指定的，而不是从数据表中动态取出的</li><li>如果我们想整合不同的数据源，<strong>用常数列作为这个表的标记</strong>，就需要查询常数</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token string">&#39;王者荣耀&#39;</span> <span class="token keyword">as</span> platform<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>\n<span class="token operator">|</span> platform     <span class="token operator">|</span> name         <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 夏侯惇       <span class="token operator">|</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 钟无艳       <span class="token operator">|</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 张飞         <span class="token operator">|</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 牛魔         <span class="token operator">|</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 吕布         <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 哪吒         <span class="token operator">|</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 阿轲         <span class="token operator">|</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 娜可露露     <span class="token operator">|</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 兰陵王       <span class="token operator">|</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 铠           <span class="token operator">|</span>\n<span class="token operator">|</span> 王者荣耀     <span class="token operator">|</span> 百里守约     <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>需要说明的是，如果常数是个字符串，那么使用单引号<code>‘王者荣耀’</code>就非常重要了，比如‘王者荣耀’。单引号说明引号中的字符串是个常数，否则 SQL 会把王者荣耀当成列名进行查询，但实际上数据表里没有这个列名，就会引起错误。</p><p>如果常数是个数字，就可以直接写数字，不需要单引号</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token number">123</span> <span class="token keyword">AS</span> platform<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="去除重复行👍" tabindex="-1"><a class="header-anchor" href="#去除重复行👍" aria-hidden="true">#</a> 去除重复行👍</h3><p>关于单个表的 SELECT 查询，还有一个非常实用的操作，就是从结果中去掉重复的行。使用的关键字是 DISTINCT</p><p>比如我们想要看下 heros 表中关于攻击范围的取值都有哪些</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> attack_range <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> attack_range <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span>\n<span class="token operator">|</span> 远程         <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果我们带上英雄名称，会是怎样呢：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> attack_range<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>\n<span class="token operator">|</span> attack_range <span class="token operator">|</span> name         <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 夏侯惇       <span class="token operator">|</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 钟无艳       <span class="token operator">|</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 张飞         <span class="token operator">|</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 牛魔         <span class="token operator">|</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 吕布         <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 哪吒         <span class="token operator">|</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 阿轲         <span class="token operator">|</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 娜可露露     <span class="token operator">|</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 兰陵王       <span class="token operator">|</span>\n<span class="token operator">|</span> 近战         <span class="token operator">|</span> 铠           <span class="token operator">|</span>\n<span class="token operator">|</span> 远程         <span class="token operator">|</span> 百里守约     <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>这里有两点需要注意：</p><ol><li>DISTINCT 需要<strong>放到所有列名的前面</strong>，如果写成<code>SELECT name, DISTINCT attack_range FROM heros</code>会报错。</li><li>DISTINCT 其实是对后面所有列名的组合进行去重，你能看到最后的结果是 69 条，因为这 69 个英雄名称不同，都有攻击范围（attack_range）这个属性值。如果你想要看都有哪些不同的攻击范围（attack_range），只需要写<code>DISTINCT attack_range</code>即可，后面不需要再加其他的列名了。</li></ol><h3 id="排序检索数据😘" tabindex="-1"><a class="header-anchor" href="#排序检索数据😘" aria-hidden="true">#</a> 排序检索数据😘</h3><ol><li>排序的列名：ORDER BY 后面<strong>可以有一个或多个列名</strong>，如果是多个列名进行排序，会按照后面第一个列先进行排序，当第一列的值相同的时候，再按照第二列进行排序，以此类推。</li><li>排序的顺序：ORDER BY 后面可以注明排序规则，ASC 代表递增排序，DESC 代表递减排序。如果没有注明排序规则，默认情况下是按照 ASC 递增排序。我们很容易理解 ORDER BY 对数值类型字段的排序规则，但如果排序字段类型为文本数据，就需要参考数据库的设置方式了，这样才能判断 A 是在 B 之前，还是在 B 之后。比如使用 MySQL 在创建字段的时候设置为 BINARY 属性，就代表区分大小写。</li><li><strong>非选择列排序</strong>：ORDER BY 可以使用非选择列进行排序，所以即使在 SELECT 后面没有这个列名，你同样可以放到 ORDER BY 后面进行排序。</li><li>ORDER BY 的位置：ORDER BY 通常位于 SELECT 语句的最后一条子句，否则会报错。</li></ol><p>显示英雄名称及最大生命值，按照最大生命值从高到低的方式进行排序</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">FROM</span> heros <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> hp_max <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span> hp_max <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+</span>\n<span class="token operator">|</span> 廉颇         <span class="token operator">|</span>   <span class="token number">9328</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 白起         <span class="token operator">|</span>   <span class="token number">8638</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 程咬金       <span class="token operator">|</span>   <span class="token number">8611</span> <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 姜子牙       <span class="token operator">|</span>   <span class="token number">5399</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 花木兰       <span class="token operator">|</span>   <span class="token number">5397</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 武则天       <span class="token operator">|</span>   <span class="token number">5037</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>显示英雄名称及最大生命值，按照第一排序最大法力从低到高，当最大法力值相等的时候则按照第二排序进行，即最大生命值从高到低的方式进行排序</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">FROM</span> heros <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> mp_max <span class="token keyword">ASC</span><span class="token punctuation">,</span> hp_max <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n<span class="token comment"># 由于ASC是默认的，可以省略</span>\n<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">FROM</span> heros <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> mp_max<span class="token punctuation">,</span> hp_max <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="约束返回结果的数量❤️" tabindex="-1"><a class="header-anchor" href="#约束返回结果的数量❤️" aria-hidden="true">#</a> 约束返回结果的数量❤️</h3><p>可以约束返回结果的数量，使用 LIMIT 关键字。</p><p>返回英雄名称及最大生命值，按照最大生命值从高到低排序，返回 5 条记录即可</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 可以看到不必依赖order by</span>\nmysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">FROM</span> heros <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">-----------+--------+</span>\n<span class="token operator">|</span> name      <span class="token operator">|</span> hp_max <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----------+--------+</span>\n<span class="token operator">|</span> 夏侯惇    <span class="token operator">|</span>   <span class="token number">7350</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 钟无艳    <span class="token operator">|</span>   <span class="token number">7000</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 张飞      <span class="token operator">|</span>   <span class="token number">8341</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 牛魔      <span class="token operator">|</span>   <span class="token number">8476</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 吕布      <span class="token operator">|</span>   <span class="token number">7344</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----------+--------+</span>\n<span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>\n\nmysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">FROM</span> heros <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> hp_max <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">-----------+--------+</span>\n<span class="token operator">|</span> name      <span class="token operator">|</span> hp_max <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----------+--------+</span>\n<span class="token operator">|</span> 廉颇      <span class="token operator">|</span>   <span class="token number">9328</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 白起      <span class="token operator">|</span>   <span class="token number">8638</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 程咬金    <span class="token operator">|</span>   <span class="token number">8611</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 刘禅      <span class="token operator">|</span>   <span class="token number">8581</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 牛魔      <span class="token operator">|</span>   <span class="token number">8476</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----------+--------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="select-的执行顺序💕" tabindex="-1"><a class="header-anchor" href="#select-的执行顺序💕" aria-hidden="true">#</a> SELECT 的执行顺序💕</h3><ol><li>关键字的顺序是不能颠倒的：</li></ol><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">HAVING</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>SELECT 语句的执行顺序（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</li></ol><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">FROM</span> <span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> 的字段 <span class="token operator">&gt;</span> <span class="token keyword">DISTINCT</span> <span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&gt;</span> <span class="token keyword">LIMIT</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> player_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num <span class="token comment"># 顺序 5</span>\n<span class="token keyword">FROM</span> player <span class="token keyword">JOIN</span> team <span class="token keyword">ON</span> player<span class="token punctuation">.</span>team_id <span class="token operator">=</span> team<span class="token punctuation">.</span>team_id <span class="token comment"># 顺序 1</span>\n<span class="token keyword">WHERE</span> height <span class="token operator">&gt;</span> <span class="token number">1.80</span> <span class="token comment"># 顺序 2</span>\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> player<span class="token punctuation">.</span>team_id <span class="token comment"># 顺序 3</span>\n<span class="token keyword">HAVING</span> num <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token comment"># 顺序 4</span>\n<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span> <span class="token comment"># 顺序 6</span>\n<span class="token keyword">LIMIT</span> <span class="token number">2</span> <span class="token comment"># 顺序 7</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个虚拟表，然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的</p><h2 id="数据过滤" tabindex="-1"><a class="header-anchor" href="#数据过滤" aria-hidden="true">#</a> 数据过滤</h2><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><p><img src="/images/MySQL/image-20230511121342600.png" alt="image-20230511121342600"></p><blockquote><p>比如我们想要查询所有最大生命值大于 6000 的英雄：</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span>\n<span class="token comment"># where 中列明可以不在查询列表中</span>\n<span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>查询所有最大生命值在 5399 到 6811 之间的英雄：<code>BETWEEN ... AND</code>是闭区间 <code>[5399,6811]</code></p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> hp_max <span class="token operator">BETWEEN</span> <span class="token number">5399</span> <span class="token operator">AND</span> <span class="token number">6811</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span> hp_max <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+</span>\n<span class="token operator">|</span> 芈月         <span class="token operator">|</span>   <span class="token number">6164</span> <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 姜子牙       <span class="token operator">|</span>   <span class="token number">5399</span> <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 孙膑         <span class="token operator">|</span>   <span class="token number">6811</span> <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 百里守约     <span class="token operator">|</span>   <span class="token number">5611</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>也可以对 heros 表中的<code>hp_max</code>字段进行空值检查</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> hp_max <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p>存在多个 WHERE 条件子句，可以使用逻辑运算符：</p><p><img src="/images/MySQL/image-20230511122116647.png" alt="image-20230511122116647"></p><blockquote><p>筛选最大生命值大于 6000，最大法力大于 1700 的英雄，然后按照最大生命值和最大法力值之和从高到低进行排序</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max<span class="token punctuation">,</span> mp_max <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span> <span class="token operator">AND</span> mp_max <span class="token operator">&gt;</span> <span class="token number">1700</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>hp_max<span class="token operator">+</span>mp_max<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span> hp_max <span class="token operator">|</span> mp_max <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+</span>\n<span class="token operator">|</span> 廉颇         <span class="token operator">|</span>   <span class="token number">9328</span> <span class="token operator">|</span>   <span class="token number">1708</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 牛魔         <span class="token operator">|</span>   <span class="token number">8476</span> <span class="token operator">|</span>   <span class="token number">1926</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 刘邦         <span class="token operator">|</span>   <span class="token number">8073</span> <span class="token operator">|</span>   <span class="token number">1940</span> <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 娜可露露     <span class="token operator">|</span>   <span class="token number">6205</span> <span class="token operator">|</span>   <span class="token number">1808</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 雅典娜       <span class="token operator">|</span>   <span class="token number">6264</span> <span class="token operator">|</span>   <span class="token number">1732</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 孙尚香       <span class="token operator">|</span>   <span class="token number">6014</span> <span class="token operator">|</span>   <span class="token number">1756</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+</span>\n<span class="token number">23</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>如果 AND 和 OR 同时存在 WHERE 子句中会是怎样的呢？假设我们想要查询最大生命值加最大法力值大于 8000 的英雄，或者最大生命值大于 6000 并且最大法力值大于 1700 的英雄</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max<span class="token punctuation">,</span> mp_max <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>hp_max<span class="token operator">+</span>mp_max<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8000</span> <span class="token operator">OR</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span> <span class="token operator">AND</span> mp_max <span class="token operator">&gt;</span> <span class="token number">1700</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>hp_max<span class="token operator">+</span>mp_max<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span> hp_max <span class="token operator">|</span> mp_max <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 程咬金       <span class="token operator">|</span>   <span class="token number">8611</span> <span class="token operator">|</span>      <span class="token number">0</span> <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 钟馗         <span class="token operator">|</span>   <span class="token number">6280</span> <span class="token operator">|</span>   <span class="token number">1988</span> <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+</span>\n<span class="token number">33</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果我们对这条查询语句 OR 两边的条件增加一个括号，结果会是怎样的呢?</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max<span class="token punctuation">,</span> mp_max <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hp_max<span class="token operator">+</span>mp_max<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8000</span> <span class="token operator">OR</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span><span class="token punctuation">)</span> <span class="token operator">AND</span> mp_max <span class="token operator">&gt;</span> <span class="token number">1700</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>hp_max<span class="token operator">+</span>mp_max<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span> hp_max <span class="token operator">|</span> mp_max <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+</span>\n<span class="token operator">|</span> 廉颇         <span class="token operator">|</span>   <span class="token number">9328</span> <span class="token operator">|</span>   <span class="token number">1708</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 牛魔         <span class="token operator">|</span>   <span class="token number">8476</span> <span class="token operator">|</span>   <span class="token number">1926</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 高渐离       <span class="token operator">|</span>   <span class="token number">6165</span> <span class="token operator">|</span>   <span class="token number">1988</span> <span class="token operator">|</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">|</span> 娜可露露     <span class="token operator">|</span>   <span class="token number">6205</span> <span class="token operator">|</span>   <span class="token number">1808</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 雅典娜       <span class="token operator">|</span>   <span class="token number">6264</span> <span class="token operator">|</span>   <span class="token number">1732</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 孙尚香       <span class="token operator">|</span>   <span class="token number">6014</span> <span class="token operator">|</span>   <span class="token number">1756</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+--------+--------+</span>\n<span class="token number">23</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>❤️当 WHERE 子句中同时出现 AND 和 OR 操作符的时候，你需要考虑到执行的先后顺序，也就是两个操作符执行的优先级。一般来说 () 优先级最高，其次优先级是 AND，然后是 OR❤️</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max<span class="token punctuation">,</span> mp_max <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>hp_max<span class="token operator">+</span>mp_max<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8000</span> <span class="token operator">OR</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span> <span class="token operator">AND</span> mp_max <span class="token operator">&gt;</span> <span class="token number">1700</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>hp_max<span class="token operator">+</span>mp_max<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 为了更加清晰，建议加上括号,执行结果一样</span>\n<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> hp_max<span class="token punctuation">,</span> mp_max <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hp_max<span class="token operator">+</span>mp_max<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">8000</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span> <span class="token operator">AND</span> mp_max <span class="token operator">&gt;</span> <span class="token number">1700</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>hp_max<span class="token operator">+</span>mp_max<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>👍👍查询主要定位或者次要定位是法师或是射手的英雄，同时英雄的上线时间不在 2016-01-01 到 2017-01-01 之间</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> role_main<span class="token punctuation">,</span> role_assist<span class="token punctuation">,</span> hp_max<span class="token punctuation">,</span> mp_max<span class="token punctuation">,</span> birthdate\n<span class="token keyword">FROM</span> heros \n<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>role_main <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;法师&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;射手&#39;</span><span class="token punctuation">)</span> <span class="token operator">OR</span> role_assist <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;法师&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;射手&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token operator">BETWEEN</span> <span class="token string">&#39;2016-01-01&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;2017-01-01&#39;</span>\n<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>hp_max <span class="token operator">+</span> mp_max<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n\n<span class="token comment">#----------------------------------------------------------</span>\nmysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> role_main<span class="token punctuation">,</span> role_assist<span class="token punctuation">,</span> hp_max<span class="token punctuation">,</span> mp_max<span class="token punctuation">,</span> birthdate\n    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">FROM</span> heros\n    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>role_main <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;法师&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;射手&#39;</span><span class="token punctuation">)</span> <span class="token operator">OR</span> role_assist <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;法师&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;射手&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token keyword">DATE</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token operator">BETWEEN</span> <span class="token string">&#39;2016-01-01&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;2017-01-01&#39;</span>\n    <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>hp_max <span class="token operator">+</span> mp_max<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+-----------+-------------+--------+--------+------------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span> role_main <span class="token operator">|</span> role_assist <span class="token operator">|</span> hp_max <span class="token operator">|</span> mp_max <span class="token operator">|</span> birthdate  <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+-----------+-------------+--------+--------+------------+</span>\n<span class="token operator">|</span> 张良         <span class="token operator">|</span> 法师      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>   <span class="token number">5799</span> <span class="token operator">|</span>   <span class="token number">1988</span> <span class="token operator">|</span> <span class="token number">2015</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">26</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 貂蝉         <span class="token operator">|</span> 法师      <span class="token operator">|</span> 刺客        <span class="token operator">|</span>   <span class="token number">5611</span> <span class="token operator">|</span>   <span class="token number">1960</span> <span class="token operator">|</span> <span class="token number">2015</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">15</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 干将莫邪     <span class="token operator">|</span> 法师      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>   <span class="token number">5583</span> <span class="token operator">|</span>   <span class="token number">1946</span> <span class="token operator">|</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">22</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 周瑜         <span class="token operator">|</span> 法师      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>   <span class="token number">5513</span> <span class="token operator">|</span>   <span class="token number">1974</span> <span class="token operator">|</span> <span class="token number">2015</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 百里守约     <span class="token operator">|</span> 射手      <span class="token operator">|</span> 刺客        <span class="token operator">|</span>   <span class="token number">5611</span> <span class="token operator">|</span>   <span class="token number">1784</span> <span class="token operator">|</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">08</span> <span class="token operator">|</span>\n<span class="token operator">|</span> 芈月         <span class="token operator">|</span> 法师      <span class="token operator">|</span> 坦克        <span class="token operator">|</span>   <span class="token number">6164</span> <span class="token operator">|</span>    <span class="token number">100</span> <span class="token operator">|</span> <span class="token number">2015</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">08</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+-----------+-------------+--------+--------+------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="使用通配符进行过滤" tabindex="-1"><a class="header-anchor" href="#使用通配符进行过滤" aria-hidden="true">#</a> 使用通配符进行过滤</h3><p>要检索文本中包含某个词的所有数据，这里就需要使用通配符。通配符就是我们用来匹配值的一部分的特殊字符。这里我们需要使用到 <code>LIKE </code>操作符。</p><blockquote><p>想要匹配任意字符串出现的任意次数，需要使用<code>（%）</code>通配符。比如我们想要查找英雄名中包含“太”字的英雄都有哪些：</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%太%&#39;</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> 东皇太一     <span class="token operator">|</span>\n<span class="token operator">|</span> 太乙真人     <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>想要匹配单个字符，就需要使用下划线<code> (_)</code> 通配符。<code>（%）</code>和<code>（_）</code>的区别在于，<code>（%）</code>代表一个或多个字符，而<code>（_）</code>只代表一个字符。</p><p>比如我们想要查找英雄名除了第一个字以外，包含“太”字的英雄有哪些。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;_%太%&#39;</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> name         <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n<span class="token operator">|</span> 东皇太一     <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="聚集函数" tabindex="-1"><a class="header-anchor" href="#聚集函数" aria-hidden="true">#</a> 聚集函数</h2><p><img src="/images/MySQL/image-20230511131146824.png" alt="image-20230511131146824"></p><blockquote><p>想要查询最大生命值大于 6000 的英雄数量。</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">----------+</span>\n<span class="token operator">|</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">----------+</span>\n<span class="token operator">|</span>       <span class="token number">41</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">----------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>查询最大生命值大于 6000，且有次要定位的英雄数量，需要使用 COUNT 函数</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>role_assist<span class="token punctuation">)</span> <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>需要说明的是，有些英雄没有次要定位，即 role_assist 为 NULL，这时<code>COUNT(role_assist)</code>会忽略值为 NULL 的数据行，而 COUNT(*) 只是统计数据行数，不管某个字段是否为 NULL。</p><blockquote><p>查询射手（主要定位或者次要定位是射手）的最大生命值的最大值是多少，需要使用 MAX 函数。</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>hp_max<span class="token punctuation">)</span> <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> role_main <span class="token operator">=</span> <span class="token string">&#39;射手&#39;</span> <span class="token operator">or</span> role_assist <span class="token operator">=</span> <span class="token string">&#39;射手&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面的例子里，都是在一条 SELECT 语句中使用了一次聚集函数，实际上我们也可以在一条 SELECT 语句中进行多项聚集函数的查询，比如我们想知道射手（主要定位或者次要定位是射手）的英雄数、平均最大生命值、法力最大值的最大值、攻击最大值的最小值，以及这些英雄总的防御最大值等汇总数据。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>hp_max<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>mp_max<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>attack_max<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>defense_max<span class="token punctuation">)</span> <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> role_main <span class="token operator">=</span> <span class="token string">&#39;射手&#39;</span> <span class="token operator">or</span> role_assist <span class="token operator">=</span> <span class="token string">&#39;射手&#39;</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">----------+-------------+-------------+-----------------+------------------+</span>\n<span class="token operator">|</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">AVG</span><span class="token punctuation">(</span>hp_max<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">MAX</span><span class="token punctuation">(</span>mp_max<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">MIN</span><span class="token punctuation">(</span>attack_max<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">SUM</span><span class="token punctuation">(</span>defense_max<span class="token punctuation">)</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">----------+-------------+-------------+-----------------+------------------+</span>\n<span class="token operator">|</span>       <span class="token number">10</span> <span class="token operator">|</span>      <span class="token number">5798.5</span> <span class="token operator">|</span>        <span class="token number">1784</span> <span class="token operator">|</span>             <span class="token number">362</span> <span class="token operator">|</span>             <span class="token number">3333</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">----------+-------------+-------------+-----------------+------------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>需要说明的是 AVG、MAX、MIN 等聚集函数会自动忽略值为 NULL 的数据行，MAX 和 MIN 函数也可以用于字符串类型数据的统计，如果是英文字母，则按照 A—Z 的顺序排列，越往后，数值越大。如果是汉字则按照全拼拼音进行排列。比如：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span>name <span class="token keyword">USING</span> gbk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span>name <span class="token keyword">USING</span> gbk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">------------------------------+------------------------------+</span>\n<span class="token operator">|</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span>name <span class="token keyword">USING</span> gbk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span>name <span class="token keyword">USING</span> gbk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------------------------------+------------------------------+</span>\n<span class="token operator">|</span> 阿轲                         <span class="token operator">|</span> 庄周                         <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------------------------------+------------------------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>需要说明的是，我们需要先把 name 字段统一转化为 gbk 类型，使用<code>CONVERT(name USING gbk)</code>，然后再使用 MIN 和 MAX 取最小值和最大值</p><blockquote><p>可以对数据行中不同的取值进行聚集，先用 DISTINCT 函数取不同的数据，然后再使用聚集函数。比如我们想要查询不同的生命最大值的英雄数量是多少</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> hp_max<span class="token punctuation">)</span> <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">------------------------+</span>\n<span class="token operator">|</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> hp_max<span class="token punctuation">)</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------------------------+</span>\n<span class="token operator">|</span>                     <span class="token number">61</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">------------------------+</span>\n<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>实际上在 heros 这个数据表中，一共有 69 个英雄数量，生命最大值不一样的英雄数量是 61 个。</p><p>假如我们想要统计不同生命最大值英雄的平均生命最大值，保留小数点后两位。首先需要取不同生命最大值，即<code>DISTINCT hp_max</code>，然后针对它们取平均值，即<code>AVG(DISTINCT hp_max)</code>，最后再针对这个值保留小数点两位，也就是<code>ROUND(AVG(DISTINCT hp_max), 2)</code>。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> hp_max<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> heros<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">--------------------------------+</span>\n<span class="token operator">|</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> hp_max<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------------------------+</span>\n<span class="token operator">|</span>                        <span class="token number">6653.84</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">--------------------------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>你能看到，如果我们不使用 DISTINCT 函数，就是对全部数据进行聚集统计。如果使用了 DISTINCT 函数，就可以对数值不同的数据进行聚集。一般我们使用 MAX 和 MIN 函数统计数据行的时候，不需要再额外使用 DISTINCT，因为使用 DISTINCT 和全部数据行进行最大值、最小值的统计结果是相等的。</p><h2 id="数据分组并聚集统计👍" tabindex="-1"><a class="header-anchor" href="#数据分组并聚集统计👍" aria-hidden="true">#</a> 数据分组并聚集统计👍</h2><p>你能看到，如果我们不使用 DISTINCT 函数，就是对全部数据进行聚集统计。如果使用了 DISTINCT 函数，就可以对数值不同的数据进行聚集。一般我们使用 MAX 和 MIN 函数统计数据行的时候，不需要再额外使用 DISTINCT，因为使用 DISTINCT 和全部数据行进行最大值、最小值的统计结果是相等的。</p><blockquote><p>想按照英雄的主要定位进行分组，并统计每组的英雄数量</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total<span class="token punctuation">,</span> role_main <span class="token keyword">FROM</span> heros <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> role_main<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">-------+-----------+</span>\n<span class="token operator">|</span> total <span class="token operator">|</span> role_main <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-------+-----------+</span>\n<span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span> 坦克      <span class="token operator">|</span>\n<span class="token operator">|</span>    <span class="token number">18</span> <span class="token operator">|</span> 战士      <span class="token operator">|</span>\n<span class="token operator">|</span>    <span class="token number">19</span> <span class="token operator">|</span> 法师      <span class="token operator">|</span>\n<span class="token operator">|</span>     <span class="token number">6</span> <span class="token operator">|</span> 辅助      <span class="token operator">|</span>\n<span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span> 射手      <span class="token operator">|</span>\n<span class="token operator">|</span>     <span class="token number">6</span> <span class="token operator">|</span> 刺客      <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-------+-----------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>如果我们想要对英雄按照次要定位进行分组，并统计每组英雄的数量。</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total<span class="token punctuation">,</span> role_assist <span class="token keyword">FROM</span> heros <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> role_assist<span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">-------+-------------+</span>\n<span class="token operator">|</span> total <span class="token operator">|</span> role_assist <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-------+-------------+</span>\n<span class="token operator">|</span>     <span class="token number">6</span> <span class="token operator">|</span> 战士        <span class="token operator">|</span>\n<span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span> 坦克        <span class="token operator">|</span>\n<span class="token operator">|</span>     <span class="token number">5</span> <span class="token operator">|</span> 辅助        <span class="token operator">|</span>\n<span class="token operator">|</span>    <span class="token number">40</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span> 法师        <span class="token operator">|</span>\n<span class="token operator">|</span>     <span class="token number">6</span> <span class="token operator">|</span> 刺客        <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-------+-------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果字段为 NULL，也会被列为一个分组。在这个查询统计中，次要定位为 NULL，即只有一个主要定位的英雄是 40 个</p><blockquote><p>也可以使用多个字段进行分组，这就相当于把这些字段可能出现的所有的取值情况都进行分组。比如，我们想要按照英雄的主要定位、次要定位进行分组，查看这些英雄的数量，并按照这些分组的英雄数量从高到低进行排序</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num<span class="token punctuation">,</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">FROM</span> heros <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">-----+-----------+-------------+</span>\n<span class="token operator">|</span> num <span class="token operator">|</span> role_main <span class="token operator">|</span> role_assist <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----+-----------+-------------+</span>\n<span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 法师      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">9</span> <span class="token operator">|</span> 射手      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">8</span> <span class="token operator">|</span> 战士      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">6</span> <span class="token operator">|</span> 战士      <span class="token operator">|</span> 坦克        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">5</span> <span class="token operator">|</span> 坦克      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 坦克      <span class="token operator">|</span> 辅助        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 刺客      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 刺客      <span class="token operator">|</span> 战士        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 战士      <span class="token operator">|</span> 刺客        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">3</span> <span class="token operator">|</span> 辅助      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span> 法师      <span class="token operator">|</span> 辅助        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span> 法师      <span class="token operator">|</span> 刺客        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span> 坦克      <span class="token operator">|</span> 战士        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span> 辅助      <span class="token operator">|</span> 坦克        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">2</span> <span class="token operator">|</span> 法师      <span class="token operator">|</span> 坦克        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> 辅助      <span class="token operator">|</span> 法师        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> 法师      <span class="token operator">|</span> 战士        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> 战士      <span class="token operator">|</span> 法师        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">1</span> <span class="token operator">|</span> 射手      <span class="token operator">|</span> 刺客        <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----+-----------+-------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="使用-having-过滤分组" tabindex="-1"><a class="header-anchor" href="#使用-having-过滤分组" aria-hidden="true">#</a> 使用 HAVING 过滤分组</h3><p>当我们创建出很多分组的时候，有时候就需要对分组进行过滤。你可能首先会想到 WHERE 子句，实际上过滤分组我们使用的是 HAVING。HAVING 的作用和 WHERE 一样，都是起到过滤的作用，只不过 WHERE 是用于数据行，而 HAVING 则作用于分组</p><blockquote><p>比如我们想要按照英雄的主要定位、次要定位进行分组，并且筛选分组中英雄数量大于 5 的组，最后按照分组中的英雄数量从高到低进行排序</p></blockquote><p>首先我们需要获取的是英雄的数量、主要定位和次要定位，即<code>SELECT COUNT(*) as num, role_main, role_assist</code>。然后按照英雄的主要定位和次要定位进行分组，即<code>GROUP BY role_main, role_assist</code>，同时我们要对分组中的英雄数量进行筛选，选择大于 5 的分组，即<code>HAVING num &gt; 5</code>，然后按照英雄数量从高到低进行排序，即<code>ORDER BY num DESC</code>。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num<span class="token punctuation">,</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">FROM</span> heros <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">HAVING</span> num <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">-----+-----------+-------------+</span>\n<span class="token operator">|</span> num <span class="token operator">|</span> role_main <span class="token operator">|</span> role_assist <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----+-----------+-------------+</span>\n<span class="token operator">|</span>  <span class="token number">12</span> <span class="token operator">|</span> 法师      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">9</span> <span class="token operator">|</span> 射手      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">8</span> <span class="token operator">|</span> 战士      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">6</span> <span class="token operator">|</span> 战士      <span class="token operator">|</span> 坦克        <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----+-----------+-------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>再来看个例子，通过这个例子查看一下 WHERE 和 HAVING 进行条件过滤的区别。筛选最大生命值大于 6000 的英雄，按照主要定位、次要定位进行分组，并且显示分组中英雄数量大于 5 的分组，按照数量从高到低进行排序</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num<span class="token punctuation">,</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">FROM</span> heros <span class="token keyword">WHERE</span> hp_max <span class="token operator">&gt;</span> <span class="token number">6000</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> role_main<span class="token punctuation">,</span> role_assist <span class="token keyword">HAVING</span> num <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n<span class="token operator">+</span><span class="token comment">-----+-----------+-------------+</span>\n<span class="token operator">|</span> num <span class="token operator">|</span> role_main <span class="token operator">|</span> role_assist <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----+-----------+-------------+</span>\n<span class="token operator">|</span>   <span class="token number">8</span> <span class="token operator">|</span> 战士      <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>\n<span class="token operator">|</span>   <span class="token number">6</span> <span class="token operator">|</span> 战士      <span class="token operator">|</span> 坦克        <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token comment">-----+-----------+-------------+</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>前面说过select的执行顺序,所以where会先过滤数据，在到分组。先增加了一个过滤条件，即筛选最大生命值大于 6000 的英雄。这里我们就需要先使用 WHERE 子句对最大生命值大于 6000 的英雄进行条件过滤，然后再使用 GROUP BY 进行分组，使用 HAVING 进行分组的条件判断，然后使用 ORDER BY 进行排序。</p>',109),l={},c=(0,a(66262).A)(l,[["render",function(s,n){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",e,[o,(0,p.Lk)("p",null,[(0,p.eW)("本章实战数据来源，参考："),(0,p.Lk)("a",t,[(0,p.eW)("王者荣耀数据"),(0,p.bF)(a)])])]),r],64)}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,p]of n)a[s]=p;return a}}}]);