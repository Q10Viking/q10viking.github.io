"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[81670],{55136:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-f5a7b436",path:"/javascript/14%20DOM%E4%BA%8B%E4%BB%B6.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/javascript/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"1 注册事件（绑定事件）",slug:"_1-注册事件-绑定事件",children:[{level:3,title:"1.1  dom零级事件",slug:"_1-1-dom零级事件",children:[]},{level:3,title:"1.2 dom二级事件",slug:"_1-2-dom二级事件",children:[]}]},{level:2,title:"2 删除事件",slug:"_2-删除事件",children:[{level:3,title:"2.1 DOM零级事件解绑",slug:"_2-1-dom零级事件解绑",children:[]},{level:3,title:"2.2 DOM二级事件解绑",slug:"_2-2-dom二级事件解绑",children:[]}]},{level:2,title:"3 DOM事件流",slug:"_3-dom事件流",children:[{level:3,title:"3.1 事件流三个阶段",slug:"_3-1-事件流三个阶段",children:[]},{level:3,title:"3.1.4 通过addEvenListener的第三个参数设定",slug:"_3-1-4-通过addevenlistener的第三个参数设定",children:[]}]},{level:2,title:"4 event事件对象",slug:"_4-event事件对象",children:[{level:3,title:"4.1 事件对象获取",slug:"_4-1-事件对象获取",children:[]},{level:3,title:"4.2 事件对象的属性",slug:"_4-2-事件对象的属性",children:[]},{level:3,title:"4.3 事件对象的方法",slug:"_4-3-事件对象的方法",children:[]}]},{level:2,title:"5 事件委托delegation",slug:"_5-事件委托delegation",children:[]},{level:2,title:"6 this值",slug:"_6-this值",children:[{level:3,title:"6.1 this.value获取值",slug:"_6-1-this-value获取值",children:[]}]}],filePathRelative:"javascript/14 DOM事件.md"}},73305:(a,n,s)=>{s.r(n),s.d(n,{default:()=>i});const e=(0,s(20641).Fv)('<h2 id="_1-注册事件-绑定事件" tabindex="-1"><a class="header-anchor" href="#_1-注册事件-绑定事件" aria-hidden="true">#</a> 1 注册事件（绑定事件）</h2><h3 id="_1-1-dom零级事件" tabindex="-1"><a class="header-anchor" href="#_1-1-dom零级事件" aria-hidden="true">#</a> 1.1 dom零级事件</h3><h4 id="_1-1-1-缺点后面事件会覆盖前面的事件" tabindex="-1"><a class="header-anchor" href="#_1-1-1-缺点后面事件会覆盖前面的事件" aria-hidden="true">#</a> 1.1.1 缺点后面事件会覆盖前面的事件</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_1-2-dom二级事件" tabindex="-1"><a class="header-anchor" href="#_1-2-dom二级事件" aria-hidden="true">#</a> 1.2 dom二级事件</h3><h4 id="_1-2-1-addeventlistener" tabindex="-1"><a class="header-anchor" href="#_1-2-1-addeventlistener" aria-hidden="true">#</a> 1.2.1 addEventListener</h4><ol><li>同一个元素可以绑定多个事件</li></ol><h4 id="_1-2-2-兼容处理" tabindex="-1"><a class="header-anchor" href="#_1-2-2-兼容处理" aria-hidden="true">#</a> 1.2.2 兼容处理</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 兼容处理</span>\n<span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span>eventName<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \tele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \tele<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ele.onclick = function() {}</span>\n        ele<span class="token punctuation">[</span><span class="token string">&#39;on&#39;</span><span class="token operator">+</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_2-删除事件" tabindex="-1"><a class="header-anchor" href="#_2-删除事件" aria-hidden="true">#</a> 2 删除事件</h2><h3 id="_2-1-dom零级事件解绑" tabindex="-1"><a class="header-anchor" href="#_2-1-dom零级事件解绑" aria-hidden="true">#</a> 2.1 DOM零级事件解绑</h3><h4 id="_2-1-1-事件源-事件-null" tabindex="-1"><a class="header-anchor" href="#_2-1-1-事件源-事件-null" aria-hidden="true">#</a> 2.1.1 事件源.事件 = null</h4><h3 id="_2-2-dom二级事件解绑" tabindex="-1"><a class="header-anchor" href="#_2-2-dom二级事件解绑" aria-hidden="true">#</a> 2.2 DOM二级事件解绑</h3><h4 id="_2-2-1-removeeventlistener-事件类型-事件处理程序" tabindex="-1"><a class="header-anchor" href="#_2-2-1-removeeventlistener-事件类型-事件处理程序" aria-hidden="true">#</a> 2.2.1 removeEventListener(事件类型，事件处理程序)</h4><h2 id="_3-dom事件流" tabindex="-1"><a class="header-anchor" href="#_3-dom事件流" aria-hidden="true">#</a> 3 DOM事件流</h2><ol><li>页面接受事件的顺序</li><li>事件发生后会在元素节点之间按照某种顺序传播</li></ol><h3 id="_3-1-事件流三个阶段" tabindex="-1"><a class="header-anchor" href="#_3-1-事件流三个阶段" aria-hidden="true">#</a> 3.1 事件流三个阶段</h3><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code>document-&gt;html-&gt;body-&gt;div-&gt;body-&gt;html-&gt;document\n         捕获阶段        当前目标阶段    冒泡阶段\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-1-1-捕获阶段" tabindex="-1"><a class="header-anchor" href="#_3-1-1-捕获阶段" aria-hidden="true">#</a> 3.1.1 捕获阶段</h4><h4 id="_3-1-2-当前目标阶段" tabindex="-1"><a class="header-anchor" href="#_3-1-2-当前目标阶段" aria-hidden="true">#</a> 3.1.2 当前目标阶段</h4><h5 id="_1-目标阶段同时绑定了捕获和冒泡-则取决于书写顺序" tabindex="-1"><a class="header-anchor" href="#_1-目标阶段同时绑定了捕获和冒泡-则取决于书写顺序" aria-hidden="true">#</a> 1. 目标阶段同时绑定了捕获和冒泡，则取决于书写顺序</h5><h4 id="_3-1-3-冒泡阶段" tabindex="-1"><a class="header-anchor" href="#_3-1-3-冒泡阶段" aria-hidden="true">#</a> 3.1.3 冒泡阶段</h4><h3 id="_3-1-4-通过addevenlistener的第三个参数设定" tabindex="-1"><a class="header-anchor" href="#_3-1-4-通过addevenlistener的第三个参数设定" aria-hidden="true">#</a> 3.1.4 通过addEvenListener的第三个参数设定</h3><h4 id="_1-true-事件捕获" tabindex="-1"><a class="header-anchor" href="#_1-true-事件捕获" aria-hidden="true">#</a> 1. true 事件捕获</h4><h4 id="_2-false-默认值-为事件冒泡" tabindex="-1"><a class="header-anchor" href="#_2-false-默认值-为事件冒泡" aria-hidden="true">#</a> 2 false (默认值)为事件冒泡</h4><h2 id="_4-event事件对象" tabindex="-1"><a class="header-anchor" href="#_4-event事件对象" aria-hidden="true">#</a> 4 event事件对象</h2><h3 id="_4-1-事件对象获取" tabindex="-1"><a class="header-anchor" href="#_4-1-事件对象获取" aria-hidden="true">#</a> 4.1 事件对象获取</h3><h4 id="_4-1-1-通过事件处理函数形参" tabindex="-1"><a class="header-anchor" href="#_4-1-1-通过事件处理函数形参" aria-hidden="true">#</a> 4.1.1 通过事件处理函数形参</h4><h4 id="_4-1-2-通过window对象window-event" tabindex="-1"><a class="header-anchor" href="#_4-1-2-通过window对象window-event" aria-hidden="true">#</a> 4.1.2 通过window对象window.event</h4><h4 id="_4-1-3-处理兼容" tabindex="-1"><a class="header-anchor" href="#_4-1-3-处理兼容" aria-hidden="true">#</a> 4.1.3 处理兼容</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\te <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4-2-事件对象的属性" tabindex="-1"><a class="header-anchor" href="#_4-2-事件对象的属性" aria-hidden="true">#</a> 4.2 事件对象的属性</h3><h4 id="_4-2-1-target触发事件的元素" tabindex="-1"><a class="header-anchor" href="#_4-2-1-target触发事件的元素" aria-hidden="true">#</a> 4.2.1 target触发事件的元素</h4><h5 id="_1-this则是绑定事件的元素" tabindex="-1"><a class="header-anchor" href="#_1-this则是绑定事件的元素" aria-hidden="true">#</a> 1. this则是绑定事件的元素</h5><h5 id="_2-在事件代理中会不同" tabindex="-1"><a class="header-anchor" href="#_2-在事件代理中会不同" aria-hidden="true">#</a> 2. 在事件代理中会不同</h5><h4 id="_4-2-2-type事件类型" tabindex="-1"><a class="header-anchor" href="#_4-2-2-type事件类型" aria-hidden="true">#</a> 4.2.2 type事件类型</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 如 click ,mouseover</span>\ne<span class="token punctuation">.</span>type\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_4-2-3-鼠标坐标" tabindex="-1"><a class="header-anchor" href="#_4-2-3-鼠标坐标" aria-hidden="true">#</a> 4.2.3 鼠标坐标</h4><p>鼠标对于浏览器窗口可视化</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>e.clientX\ne.clientY\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>相当于电脑屏幕的坐标</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>e<span class="token punctuation">.</span>screenX\ne<span class="token punctuation">.</span>screenY\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>相当于元素本身</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>e.offsetX\ne.offsetY\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>相当于文档页面</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>e<span class="token punctuation">.</span>pageX\ne<span class="token punctuation">.</span>pageY\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_4-2-4-键盘对象" tabindex="-1"><a class="header-anchor" href="#_4-2-4-键盘对象" aria-hidden="true">#</a> 4.2.4 键盘对象</h4><h5 id="_1-key" tabindex="-1"><a class="header-anchor" href="#_1-key" aria-hidden="true">#</a> 1. key</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>event<span class="token punctuation">.</span>key\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_4-3-事件对象的方法" tabindex="-1"><a class="header-anchor" href="#_4-3-事件对象的方法" aria-hidden="true">#</a> 4.3 事件对象的方法</h3><h4 id="_4-3-1-preventdefault阻止默认行为" tabindex="-1"><a class="header-anchor" href="#_4-3-1-preventdefault阻止默认行为" aria-hidden="true">#</a> 4.3.1 preventDefault阻止默认行为</h4><h5 id="_1-如表单提交-超链接跳转" tabindex="-1"><a class="header-anchor" href="#_1-如表单提交-超链接跳转" aria-hidden="true">#</a> 1. 如表单提交,超链接跳转</h5><h5 id="_2-也可以return-false阻止默认行为" tabindex="-1"><a class="header-anchor" href="#_2-也可以return-false阻止默认行为" aria-hidden="true">#</a> 2. 也可以return false阻止默认行为</h5><h4 id="_4-3-2-stoppropagation阻止冒泡" tabindex="-1"><a class="header-anchor" href="#_4-3-2-stoppropagation阻止冒泡" aria-hidden="true">#</a> 4.3.2 stopPropagation阻止冒泡</h4><h2 id="_5-事件委托delegation" tabindex="-1"><a class="header-anchor" href="#_5-事件委托delegation" aria-hidden="true">#</a> 5 事件委托delegation</h2><blockquote><p>基于事件冒泡bubbling的机制</p></blockquote><ol><li>给父元素绑定事件</li><li>统一管理子元素的事件</li><li>通过过滤，如比较指定的class name，来对事件源进行相应的操作</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> deleteItem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">deleteItem</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n  <span class="token comment">//\t过滤</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;delete-item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;delete item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><hr><h2 id="_6-this值" tabindex="-1"><a class="header-anchor" href="#_6-this值" aria-hidden="true">#</a> 6 this值</h2><h3 id="_6-1-this-value获取值" tabindex="-1"><a class="header-anchor" href="#_6-1-this-value获取值" aria-hidden="true">#</a> 6.1 this.value获取值</h3><h4 id="_6-1-1-select的value-input的value" tabindex="-1"><a class="header-anchor" href="#_6-1-1-select的value-input的value" aria-hidden="true">#</a> 6.1.1 select的value,input的value</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 添加事件</span>\nselectEl<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onchange事件&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',63),t={},i=(0,s(66262).A)(t,[["render",function(a,n){return e}]])},66262:(a,n)=>{n.A=(a,n)=>{const s=a.__vccOpts||a;for(const[a,e]of n)s[a]=e;return s}}}]);