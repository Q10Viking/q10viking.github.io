"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[36728],{22537:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-b5338478",path:"/netty/08%20client-server-protocol.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/networkDevelopByJava/"}},excerpt:"",headers:[{level:2,title:"Protocol",slug:"protocol",children:[]},{level:2,title:"KnockKnockProtocol",slug:"knockknockprotocol",children:[]},{level:2,title:"Server",slug:"server",children:[]},{level:2,title:"KnockKnockClient",slug:"knockknockclient",children:[]},{level:2,title:"结束通话的方式",slug:"结束通话的方式",children:[]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"netty/08 client-server-protocol.md"}},23484:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var t=a(20641);const e=(0,t.Lk)("h2",{id:"protocol",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#protocol","aria-hidden":"true"},"#"),(0,t.eW)(" Protocol")],-1),p={class:"custom-container tip"},o=(0,t.Lk)("p",{class:"custom-container-title"},"TIP",-1),c=(0,t.Lk)("p",null,[(0,t.eW)("the protocol—the language that "),(0,t.Lk)("strong",null,"the client and server have agreed to use to communicate.")],-1),l={href:"https://docs.oracle.com/javase/tutorial/networking/sockets/clientServer.html",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Fv)('<p>客户端与服务端基于knockknock协议<strong>有效沟通</strong>的场景</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>server: Knock! Knock!\nclient: Who&#39;s there?\nserver: Turnip\nclient: Turnip who?\nserver: Turnip the heat, it&#39;s cold in here! Want another? (y/n)\nclient: y\nserver: Knock! Knock!\nclient: Who&#39;s there?\nserver: Little Old Lady\nclient: input some meanless msg\nserver: You&#39;re supposed to say &quot;Little Old Lady who?&quot;! Try again. Knock! Knock!\nclient: Who&#39;s there?\nserver: Little Old Lady\nclient: Little Old Lady who?\nserver: I didn&#39;t know you could yodel! Want another? (y/n)\nclient: n\nserver: Bye.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="knockknockprotocol" tabindex="-1"><a class="header-anchor" href="#knockknockprotocol" aria-hidden="true">#</a> KnockKnockProtocol</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>该协议根据客户端的状态流转，来处理信息</p></div><details class="custom-container details"><summary>点击查看代码</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>knockknock<span class="token punctuation">.</span>protocol</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KnockKnockProtocol</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WAITING</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SENTKNOCKKNOCK</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SENTCLUE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ANOTHER</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUMJOKES</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token constant">WAITING</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> currentJoke <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> clues <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;Turnip&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Little Old Lady&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Atch&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Who&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Who&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> answers <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token string">&quot;Turnip the heat, it&#39;s cold in here!&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;I didn&#39;t know you could yodel!&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;Bless you!&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;Is there an owl in here?&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;Is there an echo in here?&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">processInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> theInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> theOutput <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">WAITING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            theOutput <span class="token operator">=</span> <span class="token string">&quot;Knock! Knock!&quot;</span><span class="token punctuation">;</span>\n            state <span class="token operator">=</span> <span class="token constant">SENTKNOCKKNOCK</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">SENTKNOCKKNOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>theInput<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;Who&#39;s there?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                theOutput <span class="token operator">=</span> clues<span class="token punctuation">[</span>currentJoke<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                state <span class="token operator">=</span> <span class="token constant">SENTCLUE</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                theOutput <span class="token operator">=</span> <span class="token string">&quot;You&#39;re supposed to say \\&quot;Who&#39;s there?\\&quot;! &quot;</span> <span class="token operator">+</span>\n                        <span class="token string">&quot;Try again. Knock! Knock!&quot;</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">SENTCLUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>theInput<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>clues<span class="token punctuation">[</span>currentJoke<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; who?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                theOutput <span class="token operator">=</span> answers<span class="token punctuation">[</span>currentJoke<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; Want another? (y/n)&quot;</span><span class="token punctuation">;</span>\n                state <span class="token operator">=</span> <span class="token constant">ANOTHER</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                theOutput <span class="token operator">=</span> <span class="token string">&quot;You&#39;re supposed to say \\&quot;&quot;</span> <span class="token operator">+</span>\n                        clues<span class="token punctuation">[</span>currentJoke<span class="token punctuation">]</span> <span class="token operator">+</span>\n                        <span class="token string">&quot; who?\\&quot;&quot;</span> <span class="token operator">+</span>\n                        <span class="token string">&quot;! Try again. Knock! Knock!&quot;</span><span class="token punctuation">;</span>\n                state <span class="token operator">=</span> <span class="token constant">SENTKNOCKKNOCK</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">ANOTHER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>theInput<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                theOutput <span class="token operator">=</span> <span class="token string">&quot;Knock! Knock!&quot;</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentJoke <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token constant">NUMJOKES</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    currentJoke <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n                <span class="token keyword">else</span>\n                    currentJoke<span class="token operator">++</span><span class="token punctuation">;</span>\n                state <span class="token operator">=</span> <span class="token constant">SENTKNOCKKNOCK</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                theOutput <span class="token operator">=</span> <span class="token string">&quot;Bye.&quot;</span><span class="token punctuation">;</span>\n                state <span class="token operator">=</span> <span class="token constant">WAITING</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> theOutput<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div></details><h2 id="server" tabindex="-1"><a class="header-anchor" href="#server" aria-hidden="true">#</a> Server</h2><div class="custom-container tip"><p class="custom-container-title">注意</p><p>1️⃣ 服务端与客户端结束会话的方式</p><p>2️⃣ 结束会话后释放资源的方式</p></div>',7),u=(0,t.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-java"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"KKMultiServerThread"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"extends"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"Thread"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"private"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"final"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"Socket"),(0,t.eW)(" socket"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"private"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"final"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"KnockKnockProtocol"),(0,t.eW)(" protocol"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n\n    "),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"KKMultiServerThread"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"Socket"),(0,t.eW)(" socket"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("socket "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" socket"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("protocol "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"KnockKnockProtocol"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n\n    "),(0,t.Lk)("span",{class:"token annotation punctuation"},"@Override"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"void"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"run"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"try"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token class-name"},"PrintWriter"),(0,t.eW)(" out "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"PrintWriter"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("socket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getOutputStream"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(),(0,t.Lk)("span",{class:"token boolean"},"true"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token class-name"},"BufferedReader"),(0,t.eW)(" in "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"BufferedReader"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("\n                        "),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"InputStreamReader"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("socket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getInputStream"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token class-name"},"String"),(0,t.eW)(" inMsg"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(" outMsg"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            outMsg "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" protocol"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"processInput"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token keyword"},"null"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            out"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("outMsg"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n\n            "),(0,t.Lk)("span",{class:"token keyword"},"while"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("inMsg "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" in"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"readLine"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"!="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"null"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n                outMsg "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" protocol"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"processInput"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("inMsg"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n                out"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("outMsg"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token keyword"},"if"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("outMsg"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"equals"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"Byte."'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n                    "),(0,t.Lk)("span",{class:"token keyword"},"break"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n            socket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"close"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"catch"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"IOException"),(0,t.eW)(" e"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            e"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"printStackTrace"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"7"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"8"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"9"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"10"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"11"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"12"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"13"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"14"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"15"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"16"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"17"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"18"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"19"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"20"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"21"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"22"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"23"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"24"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"25"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"26"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"27"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"28"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"29"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"30"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"31"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"32"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"33"),(0,t.Lk)("br")])],-1),r=(0,t.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-java"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"KKMultiServer"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"static"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"void"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"main"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"String"),(0,t.Lk)("span",{class:"token punctuation"},"["),(0,t.Lk)("span",{class:"token punctuation"},"]"),(0,t.eW)(" args"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"boolean"),(0,t.eW)(" listening "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token boolean"},"true"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"int"),(0,t.eW)(" portNumber "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token number"},"8381"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token keyword"},"try"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"ServerSocket"),(0,t.eW)(" serverSocket "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"ServerSocket"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("portNumber"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token keyword"},"while"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("listening"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n                "),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"KKMultiServerThread"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("serverSocket"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"accept"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"start"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"catch"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token class-name"},"IOException"),(0,t.eW)(" e"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token class-name"},"System"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("err"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"println"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"Could not listen on port "'),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)(" portNumber"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n            "),(0,t.Lk)("span",{class:"token class-name"},"System"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"exit"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token operator"},"-"),(0,t.Lk)("span",{class:"token number"},"1"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n        "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"7"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"8"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"9"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"10"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"11"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"12"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"13"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"14"),(0,t.Lk)("br")])],-1),i=(0,t.Fv)('<h2 id="knockknockclient" tabindex="-1"><a class="header-anchor" href="#knockknockclient" aria-hidden="true">#</a> KnockKnockClient</h2><details class="custom-container details"><summary>点击查看代码</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KnockKnockClient</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span>\n                <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">Inet4Address</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8381</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>\n                        <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">BufferedReader</span> stdIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>\n                        <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> fromServer<span class="token punctuation">,</span> fromUser<span class="token punctuation">;</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fromServer <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;server: &quot;</span> <span class="token operator">+</span> fromServer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>fromServer<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;Bye.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;client: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                fromUser <span class="token operator">=</span> stdIn<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>fromUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fromUser<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></details><h2 id="结束通话的方式" tabindex="-1"><a class="header-anchor" href="#结束通话的方式" aria-hidden="true">#</a> 结束通话的方式</h2><ol><li>客户端根据该协议，执行到ANOTHER流转时，不输入y，代表不继续会话，服务器发送<strong>Bye</strong>给客户端， <ol><li>客户端结束循环，释放资源。</li><li>服务端处理客户端的线程跳出循环，关闭socket,释放inStream,outStream资源</li></ol></li><li>客户端强制关闭。服务端通过<strong>readLine() == null</strong> 的显示来监听到客户端断开了连接</li></ol><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',5),b={href:"https://docs.oracle.com/javase/tutorial/networking/sockets/clientServer.html",target:"_blank",rel:"noopener noreferrer"},L={},d=(0,a(66262).A)(L,[["render",function(n,s){const a=(0,t.g2)("OutboundLink"),L=(0,t.g2)("CodeGroupItem"),d=(0,t.g2)("CodeGroup");return(0,t.uX)(),(0,t.CE)(t.FK,null,[e,(0,t.Lk)("div",p,[o,c,(0,t.Lk)("p",null,[(0,t.eW)("本demo模仿官网的"),(0,t.Lk)("a",l,[(0,t.eW)("KnockKnockProtocol) (oracle.com)"),(0,t.bF)(a)])])]),k,(0,t.bF)(d,null,{default:(0,t.k6)((()=>[(0,t.bF)(L,{title:"KKMultiServerThread"},{default:(0,t.k6)((()=>[u])),_:1}),(0,t.bF)(L,{title:"KKMultiServer"},{default:(0,t.k6)((()=>[r])),_:1})])),_:1}),i,(0,t.Lk)("p",null,[(0,t.Lk)("a",b,[(0,t.eW)("Writing the Server Side of a Socket (The Java™ Tutorials > Custom Networking > All About Sockets) (oracle.com)"),(0,t.bF)(a)])])],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);