"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[25876],{64043:(e,t,r)=>{r.r(t),r.d(t,{data:()=>n});const n={key:"v-b48d68ec",path:"/Algorithm/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Algorithm/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"案例",slug:"案例",children:[]}],filePathRelative:"Algorithm/贪心算法.md"}},30907:(e,t,r)=>{r.r(t),r.d(t,{default:()=>u});var n=r(20641);const p=(0,n.Fv)('<blockquote><p>贪心算法更多的是一种思想</p></blockquote><p>贪心算法顾名思义在一个贪字上面，它在解决某个问题的时候，总是先从眼前利益出发。也就是说只顾眼前，不顾大局，所以它是局部最优解。它的核心的就是局部最优推出全局最优。</p><p>例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿?指定每次拿最大的，最终结果就是拿走最大数额的钱。</p><p>每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优</p><p>贪心算法和我们前面的曾经学习过的动态规划非常的相似，但是两者还是有不同的，比如动态规划里常见的背包问题有一堆盒子，你有一个背包体积为n，如何把背包尽可能装满，如果还每次选最大的盒子，就不一定行了。</p><p>动态规划和贪心算法都是一种递推算法，均有局部最优解来推导全局最优解，也都有最优子结构的说法，但是贪心策略是由上一步的最优解推导下一步的最优解，而上一部之前的最优解则不作保留，每一步的最优解一定包含上一步的最优解。动态规划里的全局最优解中一定包含某个局部最优解，但不一定包含前一个局部最优解，因此需要记录之前的所有最优解。有时候我们也会把贪心算法视为动态规划算法的一种特例。</p><p>总的来说贪心算法不能对所有问题都得到整体最优解，但对许多问题它能产生整体最优解。如单源最短路经问题，最小生成树问题等。在一些情况下，即使贪心算法不能得到整体最优解，其最终结果却是最优解的很好近似。</p><p>贪心算法一般分为如下四步︰</p><p>将问题分解为若干个子问题；</p><p>找出适合的贪心策略</p><p>求解每一个子问题的最优解；</p><p>将局部最优解堆叠成全局最优解</p><p>但是真正做题的时候很难分出这么详细的解题步骤，而且贪心算法的问题简单题的甚至感觉不到贪心，但贪心的难题其实可以非常难。而且贪心算法不像回溯算法，贪心算法没有套路，也没有框架之类的，需要同学们多看多练培养感觉才能想到贪心的思路。</p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2>',14),l={href:"https://q10viking.github.io/Algorithm/55%20%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html",target:"_blank",rel:"noopener noreferrer"},i={href:"https://q10viking.github.io/Algorithm/53%20%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C.html",target:"_blank",rel:"noopener noreferrer"},o={href:"https://q10viking.github.io/Algorithm/406%20%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://q10viking.github.io/Algorithm/621%20%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8.html",target:"_blank",rel:"noopener noreferrer"},a={},u=(0,r(66262).A)(a,[["render",function(e,t){const r=(0,n.g2)("OutboundLink");return(0,n.uX)(),(0,n.CE)(n.FK,null,[p,(0,n.Lk)("p",null,[(0,n.Lk)("a",l,[(0,n.eW)("跳跃游戏"),(0,n.bF)(r)])]),(0,n.Lk)("p",null,[(0,n.Lk)("a",i,[(0,n.eW)("最大子数组和"),(0,n.bF)(r)])]),(0,n.Lk)("p",null,[(0,n.Lk)("a",o,[(0,n.eW)("根据身高重建队列"),(0,n.bF)(r)])]),(0,n.Lk)("p",null,[(0,n.Lk)("a",h,[(0,n.eW)("任务调度器"),(0,n.bF)(r)])])],64)}]])},66262:(e,t)=>{t.A=(e,t)=>{const r=e.__vccOpts||e;for(const[e,n]of t)r[e]=n;return r}}}]);