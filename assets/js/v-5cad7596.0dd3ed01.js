"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[9390],{73981:(e,r,n)=>{n.r(r),n.d(r,{data:()=>i});const i={key:"v-5cad7596",path:"/designpattern/",title:"",lang:"zh-CN",frontmatter:{prev:{text:"Back To 目录",link:"/topicNav/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"依赖倒置原则（Dependency Inversion Principle ）",slug:"依赖倒置原则-dependency-inversion-principle",children:[{level:3,title:"1.1 IOC核心思想",slug:"_1-1-ioc核心思想",children:[]}]},{level:2,title:"资源",slug:"资源",children:[{level:3,title:"设计模式的艺术",slug:"设计模式的艺术",children:[]},{level:3,title:"设计模式之禅",slug:"设计模式之禅",children:[]},{level:3,title:"springboot结合设计模式",slug:"springboot结合设计模式",children:[]}]}],filePathRelative:"designpattern/README.md"}},97828:(e,r,n)=>{n.r(r),n.d(r,{default:()=>b});var i=n(20641);const t=(0,i.Fv)('<p><img src="/images/designpattern/epub_41787798_7.png" alt="img"></p><h2 id="依赖倒置原则-dependency-inversion-principle" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则-dependency-inversion-principle" aria-hidden="true">#</a> 依赖倒置原则（Dependency Inversion Principle ）</h2><p>假设我们设计一辆汽车：先设计轮子，然后根据轮子大小设计底盘，接着根据底盘设计车身，最后根据车身设计好整个汽车。这里就出现了一个“依赖”关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子</p><img src="/images/designpattern/image-20210328145143029.png" alt="image-20210328145143029"><p>上图看上去没有什么毛病?但是 万一轮胎尺寸改了,那么地盘需要改，地盘改了，车身也改了，让后整个汽车构造都改了. 然后汽车公司倒闭了......................</p><p>董事长依赖总经理争取，总经理依赖部门经理挣钱，部门经理依赖员工争取，那么员工离职了怎么 办？？？？？？？？？？？？？？？？？？？？？</p><p>反过来.............................假如汽车公司决定修改轮胎的 我们就只需要改动轮子的设计，而不需要动底盘，车身，汽车 的设计了。</p><img src="/images/designpattern/image-20210328145225638.png" alt="image-20210328145225638"><h3 id="_1-1-ioc核心思想" tabindex="-1"><a class="header-anchor" href="#_1-1-ioc核心思想" aria-hidden="true">#</a> 1.1 IOC核心思想</h3><p>资源不由使用资源的双方管理，而**由不使用资源的第三方管理****，这可以带来很多好处</p><ol><li>资源集中管理，实现资源的可配置和易管理。</li><li>降低了使用资源双方的依赖程度，也就是我们说的耦合度</li></ol><img src="/images/designpattern/image-20210328145415502.png" alt="image-20210328145415502"><h2 id="资源" tabindex="-1"><a class="header-anchor" href="#资源" aria-hidden="true">#</a> 资源</h2><h3 id="设计模式的艺术" tabindex="-1"><a class="header-anchor" href="#设计模式的艺术" aria-hidden="true">#</a> 设计模式的艺术</h3>',14),a={href:"https://github.com/zzk123/design_patterns",target:"_blank",rel:"noopener noreferrer"},l={href:"https://weread.qq.com/web/reader/c4032270727da196c40104ak16732dc0161679091c5aeb1",target:"_blank",rel:"noopener noreferrer"},o={href:"https://zzk123.github.io/design/001_Preface.html#%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"},p=(0,i.Lk)("hr",null,null,-1),h=(0,i.Lk)("h3",{id:"设计模式之禅",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#设计模式之禅","aria-hidden":"true"},"#"),(0,i.eW)(" 设计模式之禅")],-1),s={href:"https://github.com/nivance/DPModel",target:"_blank",rel:"noopener noreferrer"},d=(0,i.Lk)("h3",{id:"springboot结合设计模式",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#springboot结合设计模式","aria-hidden":"true"},"#"),(0,i.eW)(" springboot结合设计模式")],-1),g={href:"https://github.com/kobeyk/SpringBoot-DesignMode/tree/v0.1.2",target:"_blank",rel:"noopener noreferrer"},c={href:"https://gitee.com/appleyk/SpringBoot-DesignMode/tree/v0.1.2/",target:"_blank",rel:"noopener noreferrer"},u={},b=(0,n(66262).A)(u,[["render",function(e,r){const n=(0,i.g2)("OutboundLink");return(0,i.uX)(),(0,i.CE)(i.FK,null,[t,(0,i.Lk)("p",null,[(0,i.Lk)("a",a,[(0,i.eW)("配书籍代码"),(0,i.bF)(n)])]),(0,i.Lk)("p",null,[(0,i.Lk)("a",l,[(0,i.eW)("设计模式的艺术"),(0,i.bF)(n)])]),(0,i.Lk)("p",null,[(0,i.Lk)("a",o,[(0,i.eW)("相关博客"),(0,i.bF)(n)])]),p,h,(0,i.Lk)("p",null,[(0,i.Lk)("a",s,[(0,i.eW)("github 代码"),(0,i.bF)(n)])]),d,(0,i.Lk)("p",null,[(0,i.Lk)("a",g,[(0,i.eW)("springboot结合设计模式github"),(0,i.bF)(n)])]),(0,i.Lk)("p",null,[(0,i.Lk)("a",c,[(0,i.eW)("springboot结合设计模式gitee"),(0,i.bF)(n)])])],64)}]])},66262:(e,r)=>{r.A=(e,r)=>{const n=e.__vccOpts||e;for(const[e,i]of r)n[e]=i;return n}}}]);