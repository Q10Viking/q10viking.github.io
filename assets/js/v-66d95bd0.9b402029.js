"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[91624],{99943:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-66d95bd0",path:"/Redis/45%20BitMap%E4%BA%BF%E7%BA%A7%E7%94%A8%E6%88%B7%E6%97%A5%E6%B4%BB%E7%BB%9F%E8%AE%A1.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"setbit",slug:"setbit",children:[]},{level:2,title:"bitcount",slug:"bitcount",children:[]},{level:2,title:"bitop",slug:"bitop",children:[]},{level:2,title:"亿级用户统计",slug:"亿级用户统计",children:[]},{level:2,title:"统计用户上线次数",slug:"统计用户上线次数",children:[{level:3,title:"性能",slug:"性能",children:[]}]}],filePathRelative:"Redis/45 BitMap亿级用户日活统计.md"}},60739:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(20641).Fv)('<h2 id="setbit" tabindex="-1"><a class="header-anchor" href="#setbit" aria-hidden="true">#</a> setbit</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>setbit key offset value \n    <span class="token number">1</span>. 对 key 所储存的字符串值，设置或清除指定偏移量上的位<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>。\n    <span class="token number">2</span>. 位的设置或清除取决于 value 参数，可以是 <span class="token number">0</span> 也可以是 <span class="token number">1</span> 。\n    <span class="token number">3</span>. 当 key 不存在时，自动生成一个新的字符串值。\n    <span class="token number">4</span>. ⭐字符串会进行伸展<span class="token punctuation">(</span>grown<span class="token punctuation">)</span>以确保它可以将 value 保存在指定的偏移量上。当字符串值\n    进行伸展时，空白位置以 <span class="token number">0</span> 填充。⭐\n    <span class="token number">5</span>. offset 参数必须大于或等于 <span class="token number">0</span> ，小于 <span class="token number">2</span>^32 <span class="token punctuation">(</span>bit 映射被限制在 <span class="token number">512</span> MB 之内<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="bitcount" tabindex="-1"><a class="header-anchor" href="#bitcount" aria-hidden="true">#</a> bitcount</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bitcount key <span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token punctuation">[</span>end<span class="token punctuation">]</span> \n\t<span class="token number">1</span>. 计算给定字符串中，被设置为 <span class="token number">1</span> 的比特位的数量。\n\t<span class="token number">2</span>. 一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="bitop" tabindex="-1"><a class="header-anchor" href="#bitop" aria-hidden="true">#</a> bitop</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bitop operation destkey key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span> \n\t<span class="token number">1</span>. 对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。\n\t<span class="token number">2</span>. operation 可以是 AND 、 OR 、 NOT 、 XOR 这四种操作中的任意一种：\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="亿级用户统计" tabindex="-1"><a class="header-anchor" href="#亿级用户统计" aria-hidden="true">#</a> 亿级用户统计</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\t\t0 1 0 1 0 1 0 1         1byte  就可以存储8个用户\noffset   1 2 3 4 5 6 7 8\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="/images/Redis/image-20220811023410916.png" alt="image-20220811023410916"></p><p>如果用户userId，是一个整型值，那么就可以使用userId来当成offset</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 如用户（userId=100）在11-06号登录，</span>\nsetbit login_11_06 <span class="token number">100</span> <span class="token number">1</span>    <span class="token comment"># 找到对应的bit位设置为1</span>\n\n<span class="token comment"># 统计bitmap中所有bit为1的个数</span>\nBITCOUNT login_11_06\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>但需要注意的是用户是数量比较多的情况，如果只有两个用户userId 1,userId = 2^32-1,那么就会浪费内存资源</p><hr><p>统计用户连续登录的情况</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\tlogin_11_05: <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>\n\tlogin_11_06: <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">&amp;</span>\n\t--------------------------------------------------\n\tBITOP and login_11_5-6 login_11_05 login_11_06\n通过按位<span class="token operator">&amp;</span>来得到    <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>\n然后再做统计BITCOUNT login_11_5-6\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="统计用户上线次数" tabindex="-1"><a class="header-anchor" href="#统计用户上线次数" aria-hidden="true">#</a> 统计用户上线次数</h2><p>假设现在我们希望记录自己网站上的用户的上线频率，比如说，计算用户 A 上线了多 少天，用户 B 上线了多少天，诸如此类，以此作为数据，从而决定让哪些用户参加 beta 测 试等活动 —— 这个模式可以使用 SETBIT 和 BITCOUNT 来实现。</p><p>比如说，每当用户在某一天上线的时候，我们就使用 SETBIT ，以用户名作为 key ， 将那天所代表的网站的上线日作为 offset 参数，并将这个 offset 上的为设置为 1 。</p><p>举个例子，如果今天是网站上线的第 100 天，而用户 peter 在今天阅览过网站，那么 执行命令 SETBIT peter 100 1 ；如果明天 peter 也继续阅览网站，那么执行命令 SETBIT peter 101 1 ，以此类推。 当要计算 peter 总共以来的上线次数时，就使用 BITCOUNT 命令：执行 BITCOUNT peter ，得出的结果就是 peter 上线的总天数。</p><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h3><p>前面的上线次数统计例子，即使运行 10 年，占用的空间也只是每个用户 10*365 比特 位(bit)，也即是每个用户 456 字节。对于这种大小的数据来说， BITCOUNT 的处理速度就 像 GET 和 INCR 这种 O(1) 复杂度的操作一样快。</p>',21),p={},t=(0,a(66262).A)(p,[["render",function(n,s){return e}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);