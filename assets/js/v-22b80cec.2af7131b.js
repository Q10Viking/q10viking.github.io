"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[57493],{84186:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-22b80cec",path:"/concurrency/54%20%E7%BA%BF%E7%A8%8B%E4%BC%91%E7%9C%A0%E5%92%8C%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4%E5%AE%9E%E7%8E%B0.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/concurrency/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"休眠等待",slug:"休眠等待",children:[]},{level:2,title:"等待",slug:"等待",children:[]}],filePathRelative:"concurrency/54 线程休眠和等待时间实现.md"}},87449:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(20641).Fv)('<h2 id="休眠等待" tabindex="-1"><a class="header-anchor" href="#休眠等待" aria-hidden="true">#</a> 休眠等待</h2><blockquote><p>不会释放锁</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n *类说明：线程休眠辅助工具类\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SleepTools</span> <span class="token punctuation">{</span>\n\t\n\t<span class="token doc-comment comment">/**\n\t * 按秒休眠\n\t * <span class="token keyword">@param</span> <span class="token parameter">seconds</span> 秒数\n\t */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token doc-comment comment">/**\n     * 按毫秒数休眠\n     * <span class="token keyword">@param</span> <span class="token parameter">seconds</span> 毫秒数\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">ms</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="等待" tabindex="-1"><a class="header-anchor" href="#等待" aria-hidden="true">#</a> 等待</h2><blockquote><p>会释放锁，进入Moniter的await容器中，线程会保存程序计数器，唤醒获取锁之后，继续从原来的地方执行。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token keyword">long</span> mills<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">long</span> future <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> mills<span class="token punctuation">;</span>\n        <span class="token keyword">long</span> remaining <span class="token operator">=</span> mills<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>remaining <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> another condition<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>mills<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 唤醒 lock.notifyAll</span>\n            <span class="token comment">// 被唤醒重新计算以下剩余时间</span>\n            remaining <span class="token operator">=</span> future <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// do something else</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',6),e={},t=(0,a(66262).A)(e,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);