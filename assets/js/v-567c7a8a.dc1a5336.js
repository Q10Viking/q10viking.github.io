"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[83434],{12514:(s,a,e)=>{e.r(a),e.d(a,{data:()=>n});const n={key:"v-567c7a8a",path:"/MySQL/50%20%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"遵循最左前缀原则的好处包括：",slug:"遵循最左前缀原则的好处包括",children:[]}],filePathRelative:"MySQL/50 什么是最左前缀匹配原则.md"}},40949:(s,a,e)=>{e.r(a),e.d(a,{default:()=>l});const n=(0,e(20641).Fv)('<p>最左前缀原则（Leftmost Prefix Rule）是索引在数据库查询中的一种使用规则。它指的是在使用复合索引时，索引的最左边的连续几个列会被用于查询过滤条件的匹配。</p><p>具体来说，如果在表中创建了一个复合索引，包含多个列 A、B、C，那么最左前缀原则要求查询中的过滤条件必须从索引的最左边开始，并且不能跳过中间的列。只有当查询中的过滤条件与索引的最左前缀完全匹配时，索引才能被充分利用。</p><p>考虑以下复合索引 (A, B, C) 和查询语句</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> my_table <span class="token keyword">WHERE</span> A <span class="token operator">=</span> <span class="token string">&#39;value1&#39;</span> <span class="token operator">AND</span> C <span class="token operator">=</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在这种情况下，最左前缀原则要求查询条件中必须包含列 A，而不能直接使用列 C 进行过滤。因为只有满足最左前缀条件，索引 (A, B, C) 才能被有效地使用。</p><h2 id="遵循最左前缀原则的好处包括" tabindex="-1"><a class="header-anchor" href="#遵循最左前缀原则的好处包括" aria-hidden="true">#</a> 遵循最左前缀原则的好处包括：</h2><ol><li>**提高查询性能：**通过使用索引的最左前缀，可以最大限度地减少索引扫描的数据量，提高查询的效率和响应时间。</li><li>**减少索引占用空间：**在某些情况下，使用最左前缀原则可以减少创建多个索引的需求，节省磁盘空间和索引维护的开销。</li></ol>',7),t={},l=(0,e(66262).A)(t,[["render",function(s,a){return n}]])},66262:(s,a)=>{a.A=(s,a)=>{const e=s.__vccOpts||s;for(const[s,n]of a)e[s]=n;return e}}}]);