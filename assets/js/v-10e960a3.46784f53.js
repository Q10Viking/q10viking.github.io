"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[67255],{31957:(e,i,t)=>{t.r(i),t.d(i,{data:()=>r});const r={key:"v-10e960a3",path:"/spring/10%20spring%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/spring/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"流程图",slug:"流程图",children:[]},{level:2,title:"AnnotationConfigApplicationContext构造方法",slug:"annotationconfigapplicationcontext构造方法",children:[]},{level:2,title:"refresh",slug:"refresh",children:[{level:3,title:"prepareRefresh",slug:"preparerefresh",children:[]},{level:3,title:"obtainFreshBeanFactory",slug:"obtainfreshbeanfactory",children:[]},{level:3,title:"prepareBeanFactory",slug:"preparebeanfactory",children:[]},{level:3,title:"postProcessBeanFactory",slug:"postprocessbeanfactory",children:[]},{level:3,title:"invokeBeanFactoryPostProcessors❤️",slug:"invokebeanfactorypostprocessors❤️",children:[]},{level:3,title:"registerBeanPostProcessors❤️",slug:"registerbeanpostprocessors❤️",children:[]},{level:3,title:"initMessageSource",slug:"initmessagesource",children:[]},{level:3,title:"initApplicationEventMulticaster",slug:"initapplicationeventmulticaster",children:[]},{level:3,title:"onRefresh",slug:"onrefresh",children:[]},{level:3,title:"registerListeners",slug:"registerlisteners",children:[]},{level:3,title:"finishBeanFactoryInitialization",slug:"finishbeanfactoryinitialization",children:[]},{level:3,title:"finishRefresh❤️",slug:"finishrefresh❤️",children:[]}]}],filePathRelative:"spring/10 spring启动流程.md"}},51681:(e,i,t)=>{t.r(i),t.d(i,{default:()=>l});var r=t(20641);const n=(0,r.Lk)("h2",{id:"流程图",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#流程图","aria-hidden":"true"},"#"),(0,r.eW)(" 流程图")],-1),o={href:"https://www.processon.com/view/link/5f60a7d71e08531edf26a919",target:"_blank",rel:"noopener noreferrer"},a=(0,r.Fv)('<h2 id="annotationconfigapplicationcontext构造方法" tabindex="-1"><a class="header-anchor" href="#annotationconfigapplicationcontext构造方法" aria-hidden="true">#</a> AnnotationConfigApplicationContext构造方法</h2><p>AnnotationConfigApplicationContext为例子，来介绍refresh的底层原理。</p><ol><li>在调用AnnotationConfigApplicationContext的构造方法之前，会调用父类GenericApplicationContext的无参构造方法，会构造一个BeanFactory，为<strong>DefaultListableBeanFactory</strong></li><li>构造AnnotatedBeanDefinitionReader（<strong>主要作用添加一些基础的PostProcessor，同时可以通过reader进行BeanDefinition的注册</strong>），同时对BeanFactory进行设置和添加<strong>PostProcessor</strong>（后置处理器） <ol><li>设置dependencyComparator：AnnotationAwareOrderComparator，它是一个Comparator，是用来进行排序的，会获取某个对象上的<strong>Order注解</strong>或者通过实现<strong>Ordered接口</strong>所定义的值进行排序，在日常开发中可以利用这个类来进行排序。</li><li>设置autowireCandidateResolver：ContextAnnotationAutowireCandidateResolver，用来解析某个Bean能不能进行自动注入，比如某个Bean的autowireCandidate属性是否等于true</li><li>向BeanFactory中添加<strong>ConfigurationClassPostProcessor</strong>对应的BeanDefinition，它是一个BeanDefinitionRegistryPostProcessor，并且实现了PriorityOrdered接口</li><li>向BeanFactory中添加<strong>ConfigurationClassPostProcessor</strong>对应的BeanDefinition，它是一个BeanDefinitionRegistryPostProcessor，并且实现了PriorityOrdered接口</li><li>向BeanFactory中添加CommonAnnotationBeanPostProcessor对应的BeanDefinition，它是一个InstantiationAwareBeanPostProcessor，InitDestroyAnnotationBeanPostProcessor</li><li>向BeanFactory中添加EventListenerMethodProcessor对应的BeanDefinition，它是一个BeanFactoryPostProcessor，SmartInitializingSingleton</li><li>向BeanFactory中添加DefaultEventListenerFactory对应的BeanDefinition，它是一个EventListenerFactory</li></ol></li><li>构造ClassPathBeanDefinitionScanner（<strong>主要作用可以用来扫描得到并注册BeanDefinition</strong>），同时进行设置 <ol><li>设置<strong>this.includeFilters = AnnotationTypeFilter(Component.class)</strong></li><li>设置environment</li><li>设置resourceLoader</li></ol></li><li>利用reader注册AppConfig为BeanDefinition，类型为AnnotatedGenericBeanDefinition</li><li><strong>接下来就是调用refresh方法</strong></li></ol><h2 id="refresh" tabindex="-1"><a class="header-anchor" href="#refresh" aria-hidden="true">#</a> refresh</h2><h3 id="preparerefresh" tabindex="-1"><a class="header-anchor" href="#preparerefresh" aria-hidden="true">#</a> prepareRefresh</h3><ol><li>记录启动时间</li><li>可以允许子容器设置一些内容到Environment中</li><li>验证Environment中是否包括了必须要有的属性</li></ol><h3 id="obtainfreshbeanfactory" tabindex="-1"><a class="header-anchor" href="#obtainfreshbeanfactory" aria-hidden="true">#</a> obtainFreshBeanFactory</h3><ol><li>进行BeanFactory的refresh，在这里会去调用子类的refreshBeanFactory方法，具体子类是怎么刷新的得看子类，然后再调用子类的getBeanFactory方法，重新得到一个BeanFactory</li></ol><h3 id="preparebeanfactory" tabindex="-1"><a class="header-anchor" href="#preparebeanfactory" aria-hidden="true">#</a> prepareBeanFactory</h3><ol><li>设置beanFactory的类加载器</li><li>设置表达式解析器：StandardBeanExpressionResolver，用来解析Spring中的表达式</li><li>添加PropertyEditorRegistrar：ResourceEditorRegistrar，PropertyEditor类型转化器注册器，用来注册一些默认的PropertyEditor</li><li>添加一个Bean的后置处理器：ApplicationContextAwareProcessor，是一个BeanPostProcessor，用来执行EnvironmentAware、ApplicationEventPublisherAware等回调方法</li><li>添加ignoredDependencyInterface：可以向这个属性中添加一些接口，如果某个类实现了这个接口，并且这个类中的某些set方法在接口中也存在，那么这个set方法在自动注入的时候是不会执行的，比如EnvironmentAware这个接口，如果某个类实现了这个接口，那么就必须实现它的setEnvironment方法，而这是一个set方法，和Spring中的autowire是冲突的，那么Spring在自动注入时是不会调用setEnvironment方法的，而是等到回调Aware接口时再来调用（注意，这个功能仅限于xml的autowire，@Autowired注解是忽略这个属性的） <ol><li>EnvironmentAware</li><li>EmbeddedValueResolverAware</li><li>ResourceLoaderAware</li><li>ApplicationEventPublisherAware</li><li>MessageSourceAware</li><li>ApplicationContextAware</li><li>另外其实在构造BeanFactory的时候就已经提前添加了另外三个：</li><li>BeanNameAware</li><li>BeanClassLoaderAware</li><li>BeanFactoryAware</li></ol></li><li>添加resolvableDependencies，在byType进行依赖注入时，会先从这个属性中根据类型找bean <ol><li>BeanFactory.class：当前BeanFactory对象</li><li>ResourceLoader.class：当前ApplicationContext对象</li><li>ApplicationEventPublisher.class：当前ApplicationContext对象</li><li>ApplicationContext.class：当前ApplicationContext对象</li></ol></li><li>添加一个Bean的后置处理器：ApplicationListenerDetector，是一个BeanPostProcessor，用来判断某个Bean是不是ApplicationListener，如果是则把这个Bean添加到ApplicationContext中去，注意一个ApplicationListener只能是单例的</li><li>添加一个Bean的后置处理器：LoadTimeWeaverAwareProcessor，是一个BeanPostProcessor，用来判断某个Bean是不是实现了LoadTimeWeaverAware接口，如果实现了则把ApplicationContext中的loadTimeWeaver回调setLoadTimeWeaver方法设置给该Bean。</li><li>添加一些单例bean到单例池： <ol><li>&quot;environment&quot;：Environment对象</li><li>&quot;systemProperties&quot;：System.getProperties()返回的Map对象</li><li>&quot;systemEnvironment&quot;：System.getenv()返回的Map对象</li></ol></li></ol><h3 id="postprocessbeanfactory" tabindex="-1"><a class="header-anchor" href="#postprocessbeanfactory" aria-hidden="true">#</a> postProcessBeanFactory</h3><p>提供给AbstractApplicationContext的子类进行扩展，具体的子类，可以继续向BeanFactory中再添加一些东西</p><h3 id="invokebeanfactorypostprocessors❤️" tabindex="-1"><a class="header-anchor" href="#invokebeanfactorypostprocessors❤️" aria-hidden="true">#</a> invokeBeanFactoryPostProcessors❤️</h3><blockquote><p><strong>执行BeanFactoryPostProcessor</strong></p></blockquote><ol><li>此时在BeanFactory中会存在一个BeanFactoryPostProcessor：<strong>ConfigurationClassPostProcessor</strong>，它也是一个<strong>BeanDefinitionRegistryPostProcessor</strong></li><li><strong>第一阶段</strong></li><li>从BeanFactory中找到类型为BeanDefinitionRegistryPostProcessor的beanName，也就是<strong>ConfigurationClassPostProcessor</strong>， 然后调用BeanFactory的getBean方法得到实例对象 <ol><li>解析AppConfig类</li><li>扫描得到BeanDefinition并注册</li><li>解析@Import，@Bean等注解得到BeanDefinition并注册</li><li>在这里，我们只需要知道在这一步会去得到BeanDefinition，而这些BeanDefinition中可能存在BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessor，所以执行完ConfigurationClassPostProcessor的postProcessBeanDefinitionRegistry()方法后，还需要继续执行其他BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry()方法</li></ol></li><li>执行其他BeanDefinitionRegistryPostProcessor的**postProcessBeanDefinitionRegistry()**方法</li><li>执行所有BeanDefinitionRegistryPostProcessor的**postProcessBeanFactory()**方法</li><li><strong>第二阶段</strong></li><li>从BeanFactory中找到类型为BeanFactoryPostProcessor的beanName，而这些BeanFactoryPostProcessor包括了上面的BeanDefinitionRegistryPostProcessor</li><li>执行还没有执行过的BeanFactoryPostProcessor的**postProcessBeanFactory()**方法</li><li>到此，所有的BeanFactoryPostProcessor的逻辑都执行完了，主要做的事情就是得到BeanDefinition并注册到BeanFactory中</li></ol><h3 id="registerbeanpostprocessors❤️" tabindex="-1"><a class="header-anchor" href="#registerbeanpostprocessors❤️" aria-hidden="true">#</a> registerBeanPostProcessors❤️</h3><p>因为上面的步骤完成了扫描，这个过程中程序员可能自己定义了一些BeanPostProcessor，在这一步就会把BeanFactory中所有的BeanPostProcessor找出来并实例化得到一个对象，并添加到BeanFactory中去（属性<strong>beanPostProcessors</strong>），最后再重新添加一个ApplicationListenerDetector对象（之前其实就添加了过，这里是为了把ApplicationListenerDetector移动到最后）</p><h3 id="initmessagesource" tabindex="-1"><a class="header-anchor" href="#initmessagesource" aria-hidden="true">#</a> initMessageSource</h3><p>如果BeanFactory中存在一个叫做&quot;<strong>messageSource</strong>&quot;的BeanDefinition，那么就会把这个Bean对象创建出来并赋值给ApplicationContext的messageSource属性，让ApplicationContext拥有<strong>国际化</strong>的功能</p><h3 id="initapplicationeventmulticaster" tabindex="-1"><a class="header-anchor" href="#initapplicationeventmulticaster" aria-hidden="true">#</a> initApplicationEventMulticaster</h3><p>如果BeanFactory中存在一个叫做&quot;<strong>applicationEventMulticaster</strong>&quot;的BeanDefinition，那么就会把这个Bean对象创建出来并赋值给ApplicationContext的applicationEventMulticaster属性，让ApplicationContext拥有<strong>事件发布</strong>的功能</p><h3 id="onrefresh" tabindex="-1"><a class="header-anchor" href="#onrefresh" aria-hidden="true">#</a> onRefresh</h3><p>提供给AbstractApplicationContext的子类进行扩展，没用</p><h3 id="registerlisteners" tabindex="-1"><a class="header-anchor" href="#registerlisteners" aria-hidden="true">#</a> registerListeners</h3><p>从BeanFactory中获取ApplicationListener类型的beanName，然后添加到ApplicationContext中的事件广播器<strong>applicationEventMulticaster</strong>中去，到这一步因为FactoryBean还没有调用getObject()方法生成Bean对象，所以这里要在根据类型找一下ApplicationListener，记录一下对应的beanName</p><h3 id="finishbeanfactoryinitialization" tabindex="-1"><a class="header-anchor" href="#finishbeanfactoryinitialization" aria-hidden="true">#</a> finishBeanFactoryInitialization</h3><p>完成BeanFactory的初始化，主要就是<strong>实例化非懒加载的单例Bean</strong></p><h3 id="finishrefresh❤️" tabindex="-1"><a class="header-anchor" href="#finishrefresh❤️" aria-hidden="true">#</a> finishRefresh❤️</h3><p>BeanFactory的初始化完后，就到了Spring启动的最后一步了</p><ol><li>设置ApplicationContext的lifecycleProcessor，默认情况下设置的是DefaultLifecycleProcessor</li><li>调用lifecycleProcessor的onRefresh()方法，如果是DefaultLifecycleProcessor，那么会获取所有类型为Lifecycle的Bean对象，然后调用它的start()方法，这就是ApplicationContext的生命周期扩展机制</li><li>发布<strong>ContextRefreshedEvent</strong>事件</li></ol>',30),s={},l=(0,t(66262).A)(s,[["render",function(e,i){const t=(0,r.g2)("OutboundLink"),s=(0,r.g2)("common-progresson-snippet");return(0,r.uX)(),(0,r.CE)(r.FK,null,[n,(0,r.Lk)("p",null,[(0,r.Lk)("a",o,[(0,r.eW)("Link"),(0,r.bF)(t)])]),(0,r.bF)(s,{src:"https://www.processon.com/view/link/5f60a7d71e08531edf26a919"}),a],64)}]])},66262:(e,i)=>{i.A=(e,i)=>{const t=e.__vccOpts||e;for(const[e,r]of i)t[e]=r;return t}}}]);