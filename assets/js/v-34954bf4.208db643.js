"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[59575],{13080:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-34954bf4",path:"/golang/10%20%E5%88%87%E7%89%87.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/golang/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"创建切片",slug:"创建切片",children:[{level:3,title:"字面量方式",slug:"字面量方式",children:[]},{level:3,title:"make方式",slug:"make方式",children:[]}]},{level:2,title:"切片方式创建",slug:"切片方式创建",children:[{level:3,title:"注意",slug:"注意",children:[]}]},{level:2,title:"切片拷贝",slug:"切片拷贝",children:[]}],filePathRelative:"golang/10 切片.md"}},61665:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(20641).Fv)('<blockquote><p>A &quot;window&quot; on an underlying array</p></blockquote><p>Go中的slice依赖于数组，它的底层就是数组，所以数组具有的优点, slice都有。 且slice支持可以通过append向slice中追加元素，长度不够时会动态扩展，通过再次slice切片，可以得到得到更小的slice结构，可以迭代、遍历等</p><p><img src="/images/golang/image-20230326154538507.png" alt="image-20230326154538507"></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// runtime/slice.go</span>\n<span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    array unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 数组指针</span>\n    <span class="token builtin">len</span>   <span class="token builtin">int</span> <span class="token comment">// 长度 </span>\n    <span class="token builtin">cap</span>   <span class="token builtin">int</span> <span class="token comment">// 容量</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="创建切片" tabindex="-1"><a class="header-anchor" href="#创建切片" aria-hidden="true">#</a> 创建切片</h2><h3 id="字面量方式" tabindex="-1"><a class="header-anchor" href="#字面量方式" aria-hidden="true">#</a> 字面量方式</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 这种方法和创建数组类似，只是不需要指定[]运算符里的值。初始的长度和容量会基于初始化时提供的元素的个数确定</span>\nslice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 和数组一样也可以通过指定索引初始化, 比如index 4 值为100</span>\nslice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span> <span class="token comment">// [0 0 0 100]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="make方式" tabindex="-1"><a class="header-anchor" href="#make方式" aria-hidden="true">#</a> make方式</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 创建一个整型切片, 其长度为 3 个元素，容量为 5 个元素</span>\nslice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 我们也可以省略容量, 默认长度==容量</span>\nslice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">//创建一个长度为3，容量为4，int类型的切片</span>\ns <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [0 0 0] 3 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="/images/golang/slice_struct.png" alt="slice_struct"></p><h2 id="切片方式创建" tabindex="-1"><a class="header-anchor" href="#切片方式创建" aria-hidden="true">#</a> 切片方式创建</h2><ul><li>low : 表示从 slice 的第几个元素开始切</li><li>high : 控制切片的长度(high-low)</li><li>max : 控制切片的容量(max-low)</li><li>high == max 你也可以省略 max</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>slice<span class="token punctuation">[</span>low <span class="token punctuation">:</span> high<span class="token punctuation">]</span>\nslice<span class="token punctuation">[</span>low <span class="token punctuation">:</span> high <span class="token punctuation">:</span> max<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>slice<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment">// 从 i 切到最尾部</span>\nslice<span class="token punctuation">[</span><span class="token punctuation">:</span>j<span class="token punctuation">]</span>  <span class="token comment">// 从最开头切到 j(不包含 j)</span>\nslice<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>   <span class="token comment">// 从头切到尾，等价于复制整个 slice</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>通过切片创建出来的切片是共享底层数据结构的(数组)</p><blockquote><p>共享底层数组 会导致相互影响， 比如 修改原切片 会影响多所有复制出来的切片，这就是 为啥叫切片，而不是复制</p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">}</span>\ns2 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// [10 20 30 40] [20 30]</span>\ns2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// [10 100 30 40] [100 30]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>有扩容的原理 我们也可以知道, 当扩容后，就不共享底层数组了，比如</p><blockquote><p>整体建议: 不要修改切片, 如果要修改请使用后面的深拷贝复制一个全新的切片</p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">expanSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ts1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">}</span>\n\ts2 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2 2</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>           <span class="token comment">// [10 20 30 40] [20 30]</span>\n\n\ts2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment">// s2 扩容</span>\n\ts1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>          <span class="token comment">// 修改s1</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>  <span class="token comment">// s1修改并不会影响s2 [10 200 30 40] [20 30 300]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="切片拷贝" tabindex="-1"><a class="header-anchor" href="#切片拷贝" aria-hidden="true">#</a> 切片拷贝</h2><p>我们不能像数组一样 直接使用赋值语句 来拷贝一个切片, 因为数组是值，而切片是指针， 真正的数据 维护在底层数组里面</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>a1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>\na2 <span class="token operator">:=</span> a1    <span class="token comment">// 值拷贝, a1, a2 互不影响</span>\n\ns1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>\ns2 <span class="token operator">:=</span> s1   <span class="token comment">// 指针拷贝 s1, s2 指向同一*slice结构体, 就是一个东西，等于没拷贝</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用内置的copy函数</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">copySlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ts1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>\n\ts2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token function">copy</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>\n\ts2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// [1 2 3] [100 2 3]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',27),t={},e=(0,a(66262).A)(t,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);