"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[85121],{83338:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-1d97a5c1",path:"/golang/12%20%E6%8C%87%E9%92%88.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/golang/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Pointer",slug:"pointer",children:[]},{level:2,title:"变量与地址",slug:"变量与地址",children:[]},{level:2,title:"声明初始化与赋值",slug:"声明初始化与赋值",children:[]},{level:2,title:"多维指针",slug:"多维指针",children:[]},{level:2,title:"指针数组",slug:"指针数组",children:[]},{level:2,title:"&与*",slug:"与",children:[]}],filePathRelative:"golang/12 指针.md"}},12090:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(20641).Fv)('<h2 id="pointer" tabindex="-1"><a class="header-anchor" href="#pointer" aria-hidden="true">#</a> Pointer</h2><blockquote><p>A Pointer is an address to data in memory</p></blockquote><h2 id="变量与地址" tabindex="-1"><a class="header-anchor" href="#变量与地址" aria-hidden="true">#</a> 变量与地址</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">pointerVsVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ta <span class="token operator">:=</span> <span class="token string">&quot;Hello, world!&quot;</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token comment">// 0xc000054250</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="声明初始化与赋值" tabindex="-1"><a class="header-anchor" href="#声明初始化与赋值" aria-hidden="true">#</a> 声明初始化与赋值</h2><ul><li>指针声明需要指定存储地址中对应数据的类型，并使用*作为类型前缀</li><li>指针变量声明后会被初始化为 nil，表示空指针</li><li>使用 new 函数初始化：new 函数根据数据类型<strong>申请内存空间</strong>并使用零值填充，并返回申请空间地址</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 声明指针</span>\n<span class="token keyword">func</span> <span class="token function">declarePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// panic: runtime error: invalid memory address or nil pointer dereference</span>\n\t<span class="token comment">// var a *int</span>\n\t<span class="token comment">// *a = 10</span>\n\t<span class="token comment">// fmt.Println(a)</span>\n\n    <span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// a:=new(int)</span>\n\t<span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">10</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token comment">// 0xc0000180a8 10</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">var</span> ip <span class="token operator">*</span><span class="token builtin">int</span>        <span class="token comment">/* 指向整型*/</span>\n<span class="token keyword">var</span> fp <span class="token operator">*</span><span class="token builtin">float32</span>    <span class="token comment">/* 指向浮点型 */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="/images/golang/pointer_del.png" alt="img"></p><h2 id="多维指针" tabindex="-1"><a class="header-anchor" href="#多维指针" aria-hidden="true">#</a> 多维指针</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 多维指针</span>\n<span class="token keyword">func</span> <span class="token function">multiPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> a <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token builtin">int</span>\n\tv <span class="token operator">:=</span> <span class="token number">3</span>\n\tp1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>v  <span class="token comment">// *int</span>\n\tp2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>p1 <span class="token comment">// **int</span>\n\tp3 <span class="token operator">:=</span> <span class="token operator">&amp;</span>p2 <span class="token comment">// ***int</span>\n\ta <span class="token operator">=</span> p3\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>a<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="指针数组" tabindex="-1"><a class="header-anchor" href="#指针数组" aria-hidden="true">#</a> 指针数组</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 指针数组</span>\n<span class="token keyword">func</span> <span class="token function">arrayPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ta <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// [0xc0000180a8 &lt;nil&gt; 0xc0000180c0]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="与" tabindex="-1"><a class="header-anchor" href="#与" aria-hidden="true">#</a> &amp;与*</h2><ul><li>&amp;: 获取变量或者方法的地址</li><li>*: 获取地址指向的data</li></ul><p><img src="/images/golang/image-20230323233034642.png" alt="image-20230323233034642"></p>',16),p={},t=(0,a(66262).A)(p,[["render",function(n,s){return e}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);