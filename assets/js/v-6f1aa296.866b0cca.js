"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[12362],{68622:(t,e,r)=>{r.r(e),r.d(e,{data:()=>i});const i={key:"v-6f1aa296",path:"/MySQL/20%20%E4%BA%8B%E5%8A%A1%E4%BB%A5%E5%8F%8AACID%E5%B1%9E%E6%80%A7.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"概述",slug:"概述",children:[]},{level:2,title:"事务及其ACID属性",slug:"事务及其acid属性",children:[]}],filePathRelative:"MySQL/20 事务以及ACID属性.md"}},87762:(t,e,r)=>{r.r(e),r.d(e,{default:()=>a});const i=(0,r(20641).Fv)('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>我们的数据库一般都会并发执行多个事务，多个事务可能会并发的对相同的一批数据进行增删改查操作，可能就会导致我们说的脏写、脏读、不可重复读、幻读这些问题。</p><p>这些问题的本质都是数据库的多事务并发问题，为了解决多事务并发问题，数据库设计了<strong>事务隔离机制、锁机制、MVCC多版本并发控制隔离机制</strong>，用一整套机制来<strong>解决多事务并发问题</strong>。接下来，我们会深入讲解这些机制，让大家彻底理解数据库内部的执行原理。</p><p>spring帮助管理的事务，其底层也是调用了mysql的事务</p><h2 id="事务及其acid属性" tabindex="-1"><a class="header-anchor" href="#事务及其acid属性" aria-hidden="true">#</a> 事务及其ACID属性</h2><p><strong>innodb存储引擎才有事务</strong></p><p>事务是<strong>由一组SQL语句组成的逻辑处理单元</strong>,事务具有以下4个属性,通常简称为事务的ACID属性。</p><ul><li>原子性(Atomicity) ：事务是一个原子操作单元,其对数据的修改,要么全都执行,要么全都不执行。（操作层面）</li><li>一致性(Consistent) ：在事务开始和完成时,数据都必须保持一致状态。这意味着<strong>所有相关的数据规则都必须应用于事务的修改</strong>,以保持数据的完整性。（数据层面）</li><li>隔离性(Isolation) ：数据库系统提供一定的隔离机制,保证事务在不受外部并发操作影响的**“独立”环境执行**。这意味着<strong>事务处理过程中的中间状态对外部是不可见的</strong>,反之亦然。</li><li>持久性(Durable) ：事务完成之后,它对于数据的修改是永久性的,即使出现系统故障也能够保持。</li></ul><hr>',9),n={},a=(0,r(66262).A)(n,[["render",function(t,e){return i}]])},66262:(t,e)=>{e.A=(t,e)=>{const r=t.__vccOpts||t;for(const[t,i]of e)r[t]=i;return r}}}]);