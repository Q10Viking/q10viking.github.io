"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[23877],{16528:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-a29f7b06",path:"/RocketMQ/25%20%E6%B6%88%E6%81%AF%E6%8C%81%E4%B9%85%E5%8C%96%E8%AE%BE%E8%AE%A1.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/RocketMQ/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"RocketMQ的持久化文件结构",slug:"rocketmq的持久化文件结构",children:[{level:3,title:"整体消息结构",slug:"整体消息结构",children:[]},{level:3,title:"消费者端对offset的处理",slug:"消费者端对offset的处理",children:[]}]}],filePathRelative:"RocketMQ/25 消息持久化设计.md"}},41442:(s,n,a)=>{a.r(n),a.d(n,{default:()=>c});var e=a(20641);const t=(0,e.Fv)('<blockquote><p>消息持久化也就是将内存中的消息写入到本地磁盘的过程。而磁盘IO操作通常是一个很耗性能，很慢的操作，所以，对消息持久化机制的设计，是一个MQ产品提升性能的关键</p></blockquote><h2 id="rocketmq的持久化文件结构" tabindex="-1"><a class="header-anchor" href="#rocketmq的持久化文件结构" aria-hidden="true">#</a> RocketMQ的持久化文件结构</h2><p>RocketMQ消息直接采用磁盘文件保存消息，默认路径在${user_home}/store目录。这些存储目录可以在broker.conf中自行指定。</p><p><img src="/images/RocketMQ/image-20240326181803054.png" alt="image-20240326181803054"></p><ul><li><p>CommitLog：存储消息的元数据。所有消息都会顺序存入到CommitLog文件当中。CommitLog由多个文件组成，每个文件固定大小1G。以第一条消息的偏移量为文件名。<img src="/images/RocketMQ/image-20240326181909345.png" alt="image-20240326181909345"></p></li><li><p>ConsumerQueue：存储消息在CommitLog的索引。一个MessageQueue一个文件，记录当前MessageQueue被哪些消费者组消费到了哪一条CommitLog。</p><p><img src="/images/RocketMQ/image-20240326182216615.png" alt="image-20240326182216615"></p></li><li><p>Index: 为了消息查询提供了一种通过key或时间区间来查询消息的方法</p><p><img src="/images/RocketMQ/image-20240326182310599.png" alt="image-20240326182310599"></p></li><li><p>checkpoint：数据存盘检查点。里面主要记录commitlog文件、ConsumeQueue文件以及IndexFile文件最后一次刷盘的时间戳。是一个二进制文件</p></li><li><p>config/*.json：这些文件是将RocketMQ的一些关键配置信息进行存盘保存。例如Topic配置、消费者组配置、消费者组消息偏移量Offset 等等一些信息。</p><p><img src="/images/RocketMQ/image-20240326182802228.png" alt="image-20240326182802228"></p></li></ul><h3 id="整体消息结构" tabindex="-1"><a class="header-anchor" href="#整体消息结构" aria-hidden="true">#</a> 整体消息结构</h3><blockquote><p>官网提供的图</p></blockquote><p><img src="/images/RocketMQ/image-20240326183727454.png" alt="image-20240326183727454"></p><p>CommitLog文件的大小是固定的。文件名就是当前CommitLog文件当中存储的第一条消息的Offset。</p><p>ConsumeQueue文件主要是加速消费者进行消息索引。每个文件夹对应RocketMQ中的一个MessageQueue，文件夹下的文件记录了每个MessageQueue中的消息在CommitLog文件当中的偏移量。这样，消费者通过ConsumeQueue文件，就可以快速找到CommitLog文件中感兴趣的消息记录。而消费者在ConsumeQueue文件中的消费进度，会保存在config/consumerOffset.json文件当中。</p><h4 id="consumerqueue" tabindex="-1"><a class="header-anchor" href="#consumerqueue" aria-hidden="true">#</a> consumerQueue</h4><p>为了提高效率，会为每个Topic在consumerqueue中创建一个目录，目录名为Topic名称。如上面的TopicTest。在该Topic目录下，会再为每个该Topic的Queue建立一个目录，目录名为queueId。每个目录中存放着若干个文件，这些文件是commitlog的索引文件，可以定位到具体的消息。</p><h4 id="消费组的offset进度管理" tabindex="-1"><a class="header-anchor" href="#消费组的offset进度管理" aria-hidden="true">#</a> 消费组的offset进度管理</h4><h5 id="广播消息-本地管理" tabindex="-1"><a class="header-anchor" href="#广播消息-本地管理" aria-hidden="true">#</a> 广播消息（本地管理）</h5><p>广播消费模式下，相同的consumer group的每个consumer实例都接受同一个topic的全量消息，即每条消息都会被发送到consumer group里的每个consumer。</p><p>offset使用本地模式存储。因为每条消息会被所有的消费者消费。consumer在广播模式下offset相关数据以JSON的形式持久化到consumer 本地磁盘文件中，默认文件路径为当前用户主目录下的<code>.rocketmq_offsets/${当前消费者ID}/${消费者组名}/offsets.json</code></p><h5 id="集群消息-远程管理" tabindex="-1"><a class="header-anchor" href="#集群消息-远程管理" aria-hidden="true">#</a> 集群消息（远程管理）</h5><p>集群消费模式下，相同consumer group的每个consumer实例平均分摊同一个topic的消息（是一个竞争关系），即每条消息都会被发送到consumer group里的某一个consumer。</p><ul><li><p>Consumer在集群消费模式下offset相关数据以json的形式持久化到Broker磁盘文件中，文件路径为当前用户主目录下的store/config/consumerOffset.json。</p><p><img src="/images/RocketMQ/image-20240326185937635.png" alt="image-20240326185937635"></p></li><li><p>Broker启动时会加载这个文件，并写入到一个双层Map（ConsumerOffsetManager）。外层map的key为topic@group，value为内层map。内层map的key为queueId，value为offset。当发生Rebalance时，新的Consumer会从该Map中获取到相应的数据来继续消费。</p><p><img src="/images/RocketMQ/image-20240326190012548.png" alt="image-20240326190012548"></p><p>当rocketMQ对消息的消费出现异常时，会将发生异常的消息的offset提交到Broker中的重试队列。系统在发生消息消费异常时会为当前的<code>topic@group</code>创建一个重试队列，该队列以%RETRY%开头，到达重试时间后进行消费重试</p></li><li><p>集群模式下offset采用远程管理模式，<strong>主要是为了保证Rebalance机制</strong>。</p></li></ul><h3 id="消费者端对offset的处理" tabindex="-1"><a class="header-anchor" href="#消费者端对offset的处理" aria-hidden="true">#</a> 消费者端对offset的处理</h3><p>在DefaultMQPushConsumerImpl的start方法中，启动了非常多的核心服务。 比如，对于广播模式与集群模式的Offset处理</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getOffsetStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">this</span><span class="token punctuation">.</span>offsetStore <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getOffsetStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getMessageModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">case</span> <span class="token constant">BROADCASTING</span><span class="token operator">:</span>\n                            <span class="token keyword">this</span><span class="token punctuation">.</span>offsetStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalFileOffsetStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token keyword">break</span><span class="token punctuation">;</span>\n                        <span class="token keyword">case</span> <span class="token constant">CLUSTERING</span><span class="token operator">:</span>\n                            <span class="token keyword">this</span><span class="token punctuation">.</span>offsetStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteBrokerOffsetStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">getConsumerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token keyword">break</span><span class="token punctuation">;</span>\n                        <span class="token keyword">default</span><span class="token operator">:</span>\n                            <span class="token keyword">break</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQPushConsumer<span class="token punctuation">.</span><span class="token function">setOffsetStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>offsetStore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>offsetStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>可以看到，广播模式是使用LocalFileOffsetStore，在Consumer本地保存Offset，而集群模式是使用RemoteBrokerOffsetStore，在Broker端远程保存offset。而这两种Offset的存储方式，<strong>最终都是通过维护本地的offsetTable缓存来管理Offset</strong>。</p>',23),o={href:"https://note.youdao.com/ynoteshare/index.html?id=4cda837bfb79db5ddb5e26e46ee5a12c&type=note&_time=1711435331785",target:"_blank",rel:"noopener noreferrer"},p={},c=(0,a(66262).A)(p,[["render",function(s,n){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,(0,e.Lk)("p",null,[(0,e.Lk)("a",o,[(0,e.eW)("有道云笔记 (youdao.com)"),(0,e.bF)(a)])])],64)}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);