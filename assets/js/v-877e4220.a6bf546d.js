"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[70603],{33203:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-877e4220",path:"/javascript/03%20%E5%AF%B9%E8%B1%A1.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/javascript/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"1 对象的特点",slug:"_1-对象的特点",children:[{level:3,title:"1.1 动态添加属性",slug:"_1-1-动态添加属性",children:[]},{level:3,title:"1.2 访问属性方法",slug:"_1-2-访问属性方法",children:[]},{level:3,title:"1.3 数字属性",slug:"_1-3-数字属性",children:[]}]},{level:2,title:"2 深度拷贝对象",slug:"_2-深度拷贝对象",children:[]},{level:2,title:"3 es6对象属性和方法简写",slug:"_3-es6对象属性和方法简写",children:[{level:3,title:"3.1 属性简写",slug:"_3-1-属性简写",children:[]},{level:3,title:"3.2 方法简写",slug:"_3-2-方法简写",children:[]}]}],filePathRelative:"javascript/03 对象.md"}},80669:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(20641).Fv)('<h2 id="_1-对象的特点" tabindex="-1"><a class="header-anchor" href="#_1-对象的特点" aria-hidden="true">#</a> 1 对象的特点</h2><h3 id="_1-1-动态添加属性" tabindex="-1"><a class="header-anchor" href="#_1-1-动态添加属性" aria-hidden="true">#</a> 1.1 动态添加属性</h3><h4 id="_1-1-2-在访问dom元素列表时" tabindex="-1"><a class="header-anchor" href="#_1-1-2-在访问dom元素列表时" aria-hidden="true">#</a> 1.1.2 在访问DOM元素列表时</h4><p>DOM的元素节点对象，可以动态添加属性，来标记或存储数据</p><h3 id="_1-2-访问属性方法" tabindex="-1"><a class="header-anchor" href="#_1-2-访问属性方法" aria-hidden="true">#</a> 1.2 访问属性方法</h3><h4 id="_1-2-1-object-key" tabindex="-1"><a class="header-anchor" href="#_1-2-1-object-key" aria-hidden="true">#</a> 1.2.1 Object[key]</h4><p>key为变量的访问形式</p><h4 id="_1-2-2-object-key" tabindex="-1"><a class="header-anchor" href="#_1-2-2-object-key" aria-hidden="true">#</a> 1.2.2 Object.key</h4><h3 id="_1-3-数字属性" tabindex="-1"><a class="header-anchor" href="#_1-3-数字属性" aria-hidden="true">#</a> 1.3 数字属性</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">menuIcon</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token number">125</span><span class="token operator">:</span> <span class="token string">&quot;el-icon-s-custom&quot;</span><span class="token punctuation">,</span>\n  <span class="token number">103</span><span class="token operator">:</span> <span class="token string">&quot;el-icon-star-on&quot;</span><span class="token punctuation">,</span>\n  <span class="token number">145</span><span class="token operator">:</span> <span class="token string">&quot;el-icon-s-data&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2-深度拷贝对象" tabindex="-1"><a class="header-anchor" href="#_2-深度拷贝对象" aria-hidden="true">#</a> 2 深度拷贝对象</h2><ol><li>数组也可以用key in遍历</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> target<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> item <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 普通值</span>\n            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> target<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="_3-es6对象属性和方法简写" tabindex="-1"><a class="header-anchor" href="#_3-es6对象属性和方法简写" aria-hidden="true">#</a> 3 es6对象属性和方法简写</h2><h3 id="_3-1-属性简写" tabindex="-1"><a class="header-anchor" href="#_3-1-属性简写" aria-hidden="true">#</a> 3.1 属性简写</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span> school <span class="token operator">=</span> <span class="token string">&quot;CAU&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 传统方式</span>\n<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>\n    <span class="token literal-property property">school</span><span class="token operator">:</span> school\n<span class="token punctuation">}</span>\n<span class="token comment">// 简写</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> school <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-2-方法简写" tabindex="-1"><a class="header-anchor" href="#_3-2-方法简写" aria-hidden="true">#</a> 3.2 方法简写</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 传统方式</span>\n<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 简写</span>\n<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',18),p={},t=(0,a(66262).A)(p,[["render",function(n,s){return e}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);