"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[79786],{93486:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-eb49627c",path:"/MySQL/23%20sql%E8%AF%AD%E5%8F%A5.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"DDL",slug:"ddl",children:[{level:3,title:"删除表所有数据",slug:"删除表所有数据",children:[]},{level:3,title:"获取表信息",slug:"获取表信息",children:[]},{level:3,title:"添加表字段",slug:"添加表字段",children:[]}]},{level:2,title:"on duplicate key update",slug:"on-duplicate-key-update",children:[{level:3,title:"演示",slug:"演示",children:[]},{level:3,title:"小结",slug:"小结",children:[]},{level:3,title:"参考",slug:"参考",children:[]}]},{level:2,title:"replace语句",slug:"replace语句",children:[]},{level:2,title:"参考",slug:"参考-1",children:[]}],filePathRelative:"MySQL/23 sql语句.md"}},69618:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var e=a(20641);const p=(0,e.Fv)('<h2 id="ddl" tabindex="-1"><a class="header-anchor" href="#ddl" aria-hidden="true">#</a> DDL</h2><p>DDL 的英文全称是 Data Definition Language，中文是数据定义语言。它定义了数据库的结构和数据表的结构。</p><p>在 DDL 中，我们常用的功能是增删改，分别对应的命令是 CREATE、DROP 和 ALTER。需要注意的是，在执行 DDL 的时候，不需要 COMMIT，就可以完成执行任务</p><h3 id="删除表所有数据" tabindex="-1"><a class="header-anchor" href="#删除表所有数据" aria-hidden="true">#</a> 删除表所有数据</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">table</span> course_1<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="获取表信息" tabindex="-1"><a class="header-anchor" href="#获取表信息" aria-hidden="true">#</a> 获取表信息</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># course是表名称</span>\n<span class="token keyword">DESCRIBE</span> course<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="添加表字段" tabindex="-1"><a class="header-anchor" href="#添加表字段" aria-hidden="true">#</a> 添加表字段</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table-name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token identifier"><span class="token punctuation">`</span>column-name<span class="token punctuation">`</span></span> datatype<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="on-duplicate-key-update" tabindex="-1"><a class="header-anchor" href="#on-duplicate-key-update" aria-hidden="true">#</a> on duplicate key update</h2><blockquote><p>业务上有这样的需求，A、B 两个用户，如果互相关注，则成为好友。设计上是有两张表，一个是 like 表，一个是 friend 表，like 表有 user_id、liker_id 两个字段，我设置为复合唯一索引即 uk_user_id_liker_id。语句执行逻辑是这样的：</p><p>以 A 关注 B 为例：</p><p>第一步，先查询对方有没有关注自己（B 有没有关注 A）</p><p><code>select * from like where user_id = B and liker_id = A;</code></p><p>如果有，则成为好友</p><p><code>insert into friend;</code></p><p>没有，则只是单向关注关系</p><p><code>insert into like;</code></p><p>但是如果 A、B 同时关注对方，会出现不会成为好友的情况。因为上面第 1 步，双方都没关注对方。第 1 步即使使用了排他锁也不行，因为记录不存在，行锁无法生效。请问这种情况，在 MySQL 锁层面有没有办法处理？</p></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>like<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>liker_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_user_id_liker_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>liker_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>\n \n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>friend<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>friend_1_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>friend_2_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_friend<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>friend_1_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>friend_2_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><img src="/images/MySQL/image-20230510142025596.png" alt="image-20230510142025596"></p><p>由于一开始 A 和 B 之间没有关注关系，所以两个事务里面的 select 语句查出来的结果都是空。</p><p>因此，session 1 的逻辑就是“既然 B 没有关注 A，那就只插入一个单向关注关系”。session 2 也同样是这个逻辑。</p><p>这个结果对业务来说就是 bug 了。因为在业务设定里面，这两个逻辑都执行完成以后，是应该在 friend 表里面插入一行记录的。</p><blockquote><p>改进</p></blockquote><p>要给“like”表增加一个字段，比如叫作 relation_ship，并设为整型，取值 1、2、3。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>like<span class="token punctuation">`</span></span> <span class="token keyword">add</span> <span class="token keyword">column</span> relation_ship <span class="token keyword">int</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>值是 1 的时候，表示 user_id 关注 liker_id; 值是 2 的时候，表示 liker_id 关注 user_id; 值是 3 的时候，表示互相关注。</p></blockquote><p>然后，当 A 关注 B 的时候，逻辑改成如下所示的样子：</p><p>应用代码里面，比较 A 和 B 的大小，如果 A&lt;B，就执行下面的逻辑</p><div class="language-sqlite ext-sqlite line-numbers-mode"><pre class="language-sqlite"><code> begin; /* 启动事务 */\ninsert into `like`(user_id, liker_id, relation_ship) values(A, B, 1) on duplicate key update relation_ship=relation_ship | 1;\nselect relation_ship from `like` where user_id=A and liker_id=B;\n/* 代码中判断返回的 relation_ship，\n  如果是 1，事务结束，执行 commit\n  如果是 3，则执行下面这两个语句：\n  */\ninsert ignore into friend(friend_1_id, friend_2_id) values(A,B);\ncommit;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果 A&gt;B，则执行下面的逻辑</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">begin</span><span class="token punctuation">;</span> <span class="token comment">/* 启动事务 */</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>like<span class="token punctuation">`</span></span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> liker_id<span class="token punctuation">,</span> relation_ship<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">duplicate</span> <span class="token keyword">key</span> <span class="token keyword">update</span> relation_ship<span class="token operator">=</span>relation_ship <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">select</span> relation_ship <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>like<span class="token punctuation">`</span></span> <span class="token keyword">where</span> user_id<span class="token operator">=</span>B <span class="token operator">and</span> liker_id<span class="token operator">=</span>A<span class="token punctuation">;</span>\n<span class="token comment">/* 代码中判断返回的 relation_ship，\n  如果是 2，事务结束，执行 commit\n  如果是 3，则执行下面这两个语句：\n*/</span>\n<span class="token keyword">insert</span> <span class="token keyword">ignore</span> <span class="token keyword">into</span> friend<span class="token punctuation">(</span>friend_1_id<span class="token punctuation">,</span> friend_2_id<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">commit</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>什么时候变成3的，就在后面的语句。relation_ship = relation_ship | 1 。relation_ship = relation_ship | 2</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>0001\n或\n0010\n等于\n0011  == 3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><h3 id="演示" tabindex="-1"><a class="header-anchor" href="#演示" aria-hidden="true">#</a> 演示</h3><p>演示假设A(3),B(10)</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">#A(3)关注B(10)</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>like<span class="token punctuation">`</span></span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> liker_id<span class="token punctuation">,</span> relation_ship<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">duplicate</span> <span class="token keyword">key</span> <span class="token keyword">update</span> relation_ship<span class="token operator">=</span>relation_ship <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">#B(10)关注A(3)</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>like<span class="token punctuation">`</span></span><span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> liker_id<span class="token punctuation">,</span> relation_ship<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">duplicate</span> <span class="token keyword">key</span> <span class="token keyword">update</span> relation_ship<span class="token operator">=</span>relation_ship <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>like<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="/images/MySQL/image-20230510145242895.png" alt="image-20230510145242895"></p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ul><li><code>UNIQUE KEY </code>uk_user_id_liker_id<code> (</code>user_id<code>,</code>liker_id<code>)</code>建立了联合索引，方便使用行锁</li><li>从设计上引入<code>relation_ship</code>表示关系</li><li>使用或进行更新。</li></ul><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>',33),t={href:"https://blog.csdn.net/qq_22771739/article/details/84668620",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Lk)("h2",{id:"replace语句",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#replace语句","aria-hidden":"true"},"#"),(0,e.eW)(" replace语句")],-1),o={href:"http://www.yiibai.com/mysql/insert-statement.html",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.Lk)("code",null,"REPLACE"),(0,e.eW)("语句的第一种形式类似于"),(0,e.Lk)("code",null,"INSERT"),(0,e.eW)("语句")])],-1),i=(0,e.Lk)("code",null,"REPLACE",-1),r={href:"http://www.yiibai.com/mysql/delete-statement.html",target:"_blank",rel:"noopener noreferrer"},u={href:"http://www.yiibai.com/mysql/insert-statement.html",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Lk)("code",null,"REPLACE",-1),d={href:"https://www.yiibai.com/mysql/replace.html",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Lk)("h2",{id:"参考-1",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#参考-1","aria-hidden":"true"},"#"),(0,e.eW)(" 参考")],-1),m={href:"https://www.yiibai.com/mysql/replace.html",target:"_blank",rel:"noopener noreferrer"},h={},y=(0,a(66262).A)(h,[["render",function(n,s){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[p,(0,e.Lk)("p",null,[(0,e.Lk)("a",t,[(0,e.eW)("ON DUPLICATE KEY UPDATE 用法与说明"),(0,e.bF)(a)])]),l,(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.Lk)("p",null,[(0,e.eW)("如果给定行数据不存在，那么MySQL REPLACE语句会"),(0,e.Lk)("a",o,[(0,e.eW)("插入一个新行"),(0,e.bF)(a)]),(0,e.eW)("。")]),c]),(0,e.Lk)("li",null,[(0,e.Lk)("p",null,[(0,e.eW)("如果给定行数据存在，则"),i,(0,e.eW)("语句首先"),(0,e.Lk)("a",r,[(0,e.eW)("删除"),(0,e.bF)(a)]),(0,e.eW)("旧行，然后"),(0,e.Lk)("a",u,[(0,e.eW)("插入"),(0,e.bF)(a)]),(0,e.eW)("一个新行。 在某些情况下，"),k,(0,e.eW)("语句仅更新现有行。")])])]),(0,e.Lk)("p",null,[(0,e.Lk)("a",d,[(0,e.eW)("MySQL replace语句 - MySQL教程 (yiibai.com)"),(0,e.bF)(a)])]),b,(0,e.Lk)("p",null,[(0,e.Lk)("a",m,[(0,e.eW)("MySQL replace语句 - MySQL教程 (yiibai.com)"),(0,e.bF)(a)])])],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);