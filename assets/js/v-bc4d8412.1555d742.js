"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[27072],{95592:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-bc4d8412",path:"/tomcat/06%20Servlet%E8%A7%84%E8%8C%83ServletConfig%E8%A7%A3%E8%AF%BB.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/tomcat/"}},excerpt:"",headers:[{level:2,title:"ServletConfig",slug:"servletconfig",children:[]},{level:2,title:"InitParameters",slug:"initparameters",children:[]},{level:2,title:"ServletConfig vs ContextConfig",slug:"servletconfig-vs-contextconfig",children:[]}],filePathRelative:"tomcat/06 Servlet规范ServletConfig解读.md"}},58129:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(20641).Fv)('<h2 id="servletconfig" tabindex="-1"><a class="header-anchor" href="#servletconfig" aria-hidden="true">#</a> ServletConfig</h2><p><strong>The servlet init parameters are read only ONCE—when the Container initializes the servlet</strong></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>When the Container makes a servlet, it reads the DD and creates the name/value pairs for the ServletConfig. The Container never reads the init parameters again! Once the parameters are in the ServletConfig, they won’t be read again until/unless you redeploy the servlet.</p></div><p><img src="https://gitee.com/q10viking/PictureRepos/raw/master/images//202112061344703.jpg" alt="image (10)"></p><h2 id="initparameters" tabindex="-1"><a class="header-anchor" href="#initparameters" aria-hidden="true">#</a> InitParameters</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 注解方式的配置</span>\n<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>\n        value <span class="token operator">=</span> <span class="token string">&quot;/servletConfig/test1&quot;</span><span class="token punctuation">,</span>\n        initParams <span class="token operator">=</span> <span class="token punctuation">{</span>\n                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;静默&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&quot;1193094618@qq.com&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitParamTest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ServletConfig</span> servletConfig <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> initParameterNames <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>initParameterNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">String</span> name <span class="token operator">=</span> initParameterNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span>servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="servletconfig-vs-contextconfig" tabindex="-1"><a class="header-anchor" href="#servletconfig-vs-contextconfig" aria-hidden="true">#</a> ServletConfig vs ContextConfig</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>There’s only one ServletContext for an entire web app, and all the parts of the web app share it</li><li>But each servlet in the app has its own ServletConfig.</li></ul></div><p><img src="https://gitee.com/q10viking/PictureRepos/raw/master/images//202112061357081.jpg" alt="image (11)"></p>',9),e={},p=(0,a(66262).A)(e,[["render",function(n,s){return t}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);