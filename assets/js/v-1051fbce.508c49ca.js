"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[14465],{92850:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-1051fbce",path:"/mybatis/05%20mapper%20xml%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/mybatis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"mapper根节点",slug:"mapper根节点",children:[]},{level:2,title:"insert",slug:"insert",children:[{level:3,title:"获取这条新的数据列",slug:"获取这条新的数据列",children:[]},{level:3,title:"selectkey",slug:"selectkey",children:[]}]},{level:2,title:"参数的取值方式⭐",slug:"参数的取值方式⭐",children:[]},{level:2,title:"参数传递的处理",slug:"参数传递的处理",children:[{level:3,title:"单个参数❤️",slug:"单个参数❤️",children:[]},{level:3,title:"多个参数❤️",slug:"多个参数❤️",children:[]},{level:3,title:"JavaBean❤️",slug:"javabean❤️",children:[]},{level:3,title:"集合或者数组参数❤️",slug:"集合或者数组参数❤️",children:[]},{level:3,title:"map❤️",slug:"map❤️",children:[]}]},{level:2,title:"处理结果",slug:"处理结果",children:[{level:3,title:"自定义结果集",slug:"自定义结果集",children:[]}]}],filePathRelative:"mybatis/05 mapper xml映射文件.md"}},80406:(n,a,s)=>{s.r(a),s.d(a,{default:()=>i});var t=s(20641);const e={class:"custom-container tip"},p=(0,t.Lk)("p",{class:"custom-container-title"},"TIP",-1),l={href:"https://github.com/Q10Viking/learncode/tree/main/mybatis/03_mybatis_mapper",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Lk)("h2",{id:"mapper根节点",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#mapper根节点","aria-hidden":"true"},"#"),(0,t.eW)(" mapper根节点")],-1),u={href:"https://mybatis.org/mybatis-3/zh/sqlmap-xml.html",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Fv)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--\n&lt;mapper 根节点\n    namespace 命名空间，一般 情况下一个mapper映射文件对应一个不同的命名空间，利于管理和维护\n        书写：默认情况下可以随意输入，但是如果使用接口绑定的方式就必须要输入对应的接口的完整限定名\n--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.hzz.mapper.EmpMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> insert</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--插入\n    id  同一个命名空间只能有一个唯一的id，除非有不同的databaseId，可以被用来引用这条语句。如果是接口绑定的是否一定要保证接口和方法名相同\n    parameterType  用来设置该SQL的参数类型， 可以当它不存在，因为mybatis会根据接口方法的参数能够自动读取参数的类型\n    statementType 设置当前的statement,\n        STATEMENT  代表jdbc的statement     不支持参数解析，不会设置\n        PREPARED   代表jdbc的PreparedStatement  支持参数解析， 默认的。\n        CALLABLE   代表jdbc的CallableStatement   执行存储过程\n    useGeneratedKeys 获取插入后的自动增长的主键（mysql 和 SQL Server ）\n    keyProperty  将自动增长的主键赋值到哪个属性中\n    要获取自动增长的注解（数据库支持自动增长的功能）：  useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;\n    keyColumn 因为有可能存在组合主键的情况，指定获取其中哪一个字段\n    databaseId 用于配合databaseIdProvider 数据库厂商id 指定不同数据库下调用不同SQL，\n    --&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="获取这条新的数据列" tabindex="-1"><a class="header-anchor" href="#获取这条新的数据列" aria-hidden="true">#</a> 获取这条新的数据列</h3><p>插入一条数据之后，如何获取这条新的数据列(获取到插入数据后的自增主键)</p><p><img src="/images/mybatis/image-20210804104509230.png" alt="image-20210804104704226"></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--\n     useGeneratedKeys 获取插入后的自动增长的主键（mysql 和 SQL Server ）\n     keyProperty  将自动增长的主键赋值到哪个属性中\n    --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertEmp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    insert\n    into emp(username) values( #{username} )\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>对应的Java代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            emp<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;静默&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            mapper<span class="token punctuation">.</span><span class="token function">insertEmp</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认时手动提交</span>\n            <span class="token comment">// 会赋值到emp.id中</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Emp{id=4, username=&#39;静默&#39;}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="selectkey" tabindex="-1"><a class="header-anchor" href="#selectkey" aria-hidden="true">#</a> selectkey</h3><p>如果数据库不支持主键递增，可以使用selectKey标签</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertEmpHasSelectKey<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--\n            如果数据库不支持自动增长列可以使用下面方法：\n            selectKey 可以在增删改之前或之后运行\n            order BEFORE|AFTER 设置在增删改之前或之后运行\n            keyProperty 将当前查询结果放到哪个pojo属性中\n            resultType 返回的数据类型\n        --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BEFORE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            SELECT MAX(id)+2  FROM emp\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">&gt;</span></span>\n        insert\n        into emp(id,username) values(\n                                     #{id},\n                                     #{username}\n                                 )\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><hr><h2 id="参数的取值方式⭐" tabindex="-1"><a class="header-anchor" href="#参数的取值方式⭐" aria-hidden="true">#</a> 参数的取值方式⭐</h2><p>在xml文件中编写sql语句的时候有两种取值方式**${}和#{}**</p><ol><li>**${}**注重拼接，替换，如动态的内容时，不需要转义。但是有SQL注入的风险</li></ol><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>    <span class="token comment">&lt;!--获取参数的方式：\n        1.#{} ==&gt; jdbc String sql=&quot; SELECT id,user_name FROM EMP WHERE id=?&quot;\n            1.会经过JDBC当中PreparedStatement的预编译，会根据不同的数据类型来编译成对应数据库所对应的数据。\n            2.能够有效的防止SQL注入。 推荐使用！！\n            特殊用法：\n            自带很多内置参数的属性：通常不会使用。了解\n            javaType、jdbcType、mode、numericScale、resultMap、typeHandler.\n            比如 需要改变默认的NULL===&gt;OTHER:#{id,javaType=NULL}\n                 想保留小数点后两位：#{id,numericScale=2}\n\n        2.${} ==&gt; jdbc String sql=&quot; SELECT id,user_name FROM EMP WHERE id=&quot;+id\n            1.不会进行预编译，会直接将输入进来的数据拼接在SQL中。\n            2.存在SQL注入的风险。不推荐使用。\n            特殊用法：\n                1.调试情况下,可以临时使用。\n                2.实现一些特殊功能:前提一定要保证数据的安全性。\n                 比如：动态表、动态列. 动态SQL.\n    --&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="参数传递的处理" tabindex="-1"><a class="header-anchor" href="#参数传递的处理" aria-hidden="true">#</a> 参数传递的处理</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>养成习惯在参数面前添加@Param</p></div><h3 id="单个参数❤️" tabindex="-1"><a class="header-anchor" href="#单个参数❤️" aria-hidden="true">#</a> 单个参数❤️</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>1.单个参数:SelectEmp(Integer id);\n        mybatis 不会做任何特殊要求\n        获取方式：\n            #{输入任何字符获取参数}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="多个参数❤️" tabindex="-1"><a class="header-anchor" href="#多个参数❤️" aria-hidden="true">#</a> 多个参数❤️</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>    2.多个参数:Emp SelectEmp(Integer id,String username);\n        mybatis 会进行封装\n        会将传进来的参数封装成map:\n        1个值就会对应2个map项 ：  id ===&gt;  {key:arg0 ,value:id的值},{key:param1 ,value:id的值}\n                                username ===&gt;  {key:arg1 ,value:id的值},{key:param2 ,value:id的值}\n        获取方式：\n             没使用了@Param：\n                       id=====&gt;  #{arg0} 或者 #{param1}\n                 username=====&gt;  #{arg1} 或者 #{param2}\n             除了使用这种方式还有别的方式，因为这种方式参数名没有意义:\n             设置参数的别名：@Param(&quot;&quot;)：SelectEmp(@Param(&quot;id&quot;) Integer id,@Param(&quot;username&quot;) String username);\n             当使用了@Param: \n                       id=====&gt;  #{id} 或者 #{param1}\n                 username=====&gt;  #{username} 或者 #{param2}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectEmp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.hzz.pojo.Emp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select *\n    from emp\n    where id = #{id} and username=#{username}\n    <span class="token comment">&lt;!--        where id = #{param1} and username=#{param2} --&gt;</span>\n    <span class="token comment">&lt;!--        where id = #{arg0} and username=#{arg1} --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="javabean❤️" tabindex="-1"><a class="header-anchor" href="#javabean❤️" aria-hidden="true">#</a> JavaBean❤️</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>3. javaBean的参数:\n        单个参数：Emp SelectEmp(Emp emp);\n        获取方式：可以直接使用属性名\n            emp.id=====&gt;#{id}\n            emp.username=====&gt;#{username}\n        多个参数：Emp SelectEmp(Integer num,Emp emp);\n            num===&gt;    #{param1} 或者 @Param\n            emp===&gt; 必须加上对象别名： emp.id===&gt; #{param2.id} 或者  @Param(&quot;emp&quot;)Emp emp    ====&gt;#{emp.id}\n                                    emp.username===&gt; #{param2.username} 或者  @Param(&quot;emp&quot;)Emp emp    ====&gt;#{emp.username}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectEmpByJavaBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.hzz.pojo.Emp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select *\n    from emp\n    where id = #{id} and username=#{emp.username}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token class-name">Emp</span> <span class="token function">selectEmpByJavaBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;emp&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Emp</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="集合或者数组参数❤️" tabindex="-1"><a class="header-anchor" href="#集合或者数组参数❤️" aria-hidden="true">#</a> 集合或者数组参数❤️</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>集合或者数组参数：\n            Emp SelectEmp(List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">&gt;</span></span> usernames);\n        如果是list,MyBatis会自动封装为map:\n            {key:&quot;list&quot;:value:usernames}\n              没用@Param(&quot;&quot;)要获得:usernames.get(0)  =====&gt;  #{list[0]}\n                                  :usernames.get(0)  =====&gt;  #{agr0[0]}\n              有@Param(&quot;usernames&quot;)要获得:usernames.get(0)  =====&gt;  #{usernames[0]}\n                                         :usernames.get(0)  =====&gt;  #{param1[0]}\n        如果是数组,MyBatis会自动封装为map:\n            {key:&quot;array&quot;:value:usernames}\n              没用@Param(&quot;&quot;)要获得:usernames.get(0)  =====&gt;  #{array[0]}\n                                :usernames.get(0)  =====&gt;  #{agr0[0]}\n              有@Param(&quot;usernames&quot;)要获得:usernames.get(0)  =====&gt;  #{usernames[0]}\n                                         :usernames.get(0)  =====&gt;  #{param1[0]}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="map❤️" tabindex="-1"><a class="header-anchor" href="#map❤️" aria-hidden="true">#</a> map❤️</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>5.map参数\n        和javaBean的参数传递是一样。\n        一般情况下：\n            请求进来的参数 和pojo对应，就用pojo\n            请求进来的参数 没有和pojo对应，就用map\n            请求进来的参数 没有和pojo对应上，但是使用频率很高，就用TO、DTO（就是单独为这些参数创建一个对应的javaBean出来,使参数传递更规范、更重用）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectEmpByMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.hzz.pojo.Emp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select *\n    from emp\n    where id = #{id} and username=#{username}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Emp</span> <span class="token function">selectEmpByMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><h2 id="处理结果" tabindex="-1"><a class="header-anchor" href="#处理结果" aria-hidden="true">#</a> 处理结果</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>返回类型设置：\n    如果返回一行数据， 就可以使用pojo接收,或者map\n    如果返回多行数据，就可以使用List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pojo</span><span class="token punctuation">&gt;</span></span>,List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span> ,resultType指定List中泛型的类型就可以了\n    基础类型或者包装类型就直接指定别名就行了\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SelectEmp<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Emp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n            SELECT id,user_name FROM EMP\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>--&gt;\n        <span class="token comment">&lt;!-- map接收 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectEmpReturnMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            select *\n            from emp\n            where id = #{id}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Map</span> <span class="token function">selectEmpReturnMap</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果是<code>List&lt;Map&gt;</code></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectEmpReturnListMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select *\n    from emp\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectEmpReturnListMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="自定义结果集" tabindex="-1"><a class="header-anchor" href="#自定义结果集" aria-hidden="true">#</a> 自定义结果集</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--1.声明resultMap自定义结果集   resultType 和 resultMap 只能使用一个。\n    id 唯一标识， 需要和&lt;select 上的resultMap 进行对应\n    type 需要映射的pojo对象， 可以设置别名\n    autoMapping 自动映射，（默认=true） 只要字段名和属性名遵循映射规则就可以自动映射，但是不建议，哪怕属性名和字段名一一对应上了也要显示的配置映射\n    extends  如果多个resultMap有重复映射，可以声明父resultMap,将公共的映射提取出来， 可以减少子resultMap的映射冗余\n--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emp_map<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>common_map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>create_date<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cjsj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>common_map<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- &lt;id&gt; 主键必须使用  对底层存储有性能作用\n                 column  需要映射的数据库字段名\n                 property 需要映射的pojo属性名\n     --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!--2.使用resultMap 关联 自定义结果集的id--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SelectEmp<span class="token punctuation">&quot;</span></span>   <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emp_map<span class="token punctuation">&quot;</span></span>  <span class="token punctuation">&gt;</span></span>\n    SELECT id,user_name,create_date FROM EMP where id=#{id}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>普通类型的</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emp_map<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectEmpById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emp_map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select *\n    from emp\n    where id = #{id}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',45),r={},i=(0,s(66262).A)(r,[["render",function(n,a){const s=(0,t.g2)("OutboundLink");return(0,t.uX)(),(0,t.CE)(t.FK,null,[(0,t.Lk)("div",e,[p,(0,t.Lk)("p",null,[(0,t.Lk)("a",l,[(0,t.eW)("Source Code 03 mybatis mapper"),(0,t.bF)(s)])])]),c,(0,t.Lk)("p",null,[(0,t.Lk)("a",u,[(0,t.eW)("XML映射器官网"),(0,t.bF)(s)])]),o],64)}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);