"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[56580],{95414:(e,a,t)=>{t.r(a),t.d(a,{data:()=>n});const n={key:"v-20370d1c",path:"/netty/24%20%E5%AE%9E%E7%8E%B0%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/netty/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"通信模型",slug:"通信模型",children:[]},{level:2,title:"消息定义",slug:"消息定义",children:[{level:3,title:"Netty消息定义表",slug:"netty消息定义表",children:[]}]},{level:2,title:"消息头定义",slug:"消息头定义",children:[]},{level:2,title:"链路建立",slug:"链路建立",children:[]},{level:2,title:"可靠性设计",slug:"可靠性设计",children:[{level:3,title:"空闲的连接和超时",slug:"空闲的连接和超时",children:[]},{level:3,title:"重连机制",slug:"重连机制",children:[]},{level:3,title:"重复登录保护",slug:"重复登录保护",children:[]}]},{level:2,title:"实现",slug:"实现",children:[]}],filePathRelative:"netty/24 实现通信框架.md"}},82296:(e,a,t)=>{t.r(a),t.d(a,{default:()=>l});const n=(0,t(20641).Fv)('<h2 id="通信模型" tabindex="-1"><a class="header-anchor" href="#通信模型" aria-hidden="true">#</a> 通信模型</h2><ol><li>客户端发送应用握手请求消息，携带节点ID等有效身份认证信息</li><li>服务端对应用握手请求消息进行合法性校验，包括节点ID有效性校验、节点重复登录校验和IP地址合法性校验，校验通过后，返回登录成功的应用握手应答消息</li><li>链路建立成功之后，客户端发送业务消息</li><li>链路建立成功之后，服务端发送业务消息</li><li>链路成功之后，服务端发送心跳消息</li><li>链路建立成功之后，客户端发送心跳消息</li><li>服务端退出时，服务端关闭连接，客户端感知对方关闭连接后，被动关闭客户端连接</li></ol><blockquote><p>需要指出的是，协议通信双方链路建立成功之后，双方可以进行全双工通信，无论客户端还是服务端，都可以主动发送请求消息给对方，通信方式可以是TWO WAY或者ONE WAY。双方之间的心跳采用Ping-Pong机制，当链路处于空闲状态时，客户端主动发送Ping消息给服务端，服务端接收到Ping消息后发送应答消息Pong给客户端，如果客户端连续发送N条Ping消息都没有接收到服务端返回的Pong消息，说明链路已经挂死或者对方处于异常状态，客户端主动关闭连接，间隔周期T后发起重连操作，直到重连成功。</p></blockquote><p><img src="/images/netty/10140.png" alt="https://note.youdao.com/yws/public/resource/1fa6e0baabeb5ea0db8621984d3ccd5d/xmlnote/OFFICE2C7BF6BBC1A440328DB9C6EAE03613D6/10140"></p><h2 id="消息定义" tabindex="-1"><a class="header-anchor" href="#消息定义" aria-hidden="true">#</a> 消息定义</h2><p>消息定义包含两部分：</p><ul><li>消息头</li><li>消息体</li></ul><h3 id="netty消息定义表" tabindex="-1"><a class="header-anchor" href="#netty消息定义表" aria-hidden="true">#</a> <strong>Netty消息定义表</strong></h3><table><thead><tr><th><strong>名称</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>header</td><td>Header</td><td>变长</td><td>消息头定义</td></tr><tr><td>body</td><td>Object</td><td>变长</td><td>消息的内容</td></tr></tbody></table><h2 id="消息头定义" tabindex="-1"><a class="header-anchor" href="#消息头定义" aria-hidden="true">#</a> <strong>消息头定义</strong></h2><table><thead><tr><th><strong>名称</strong></th><th><strong>类型</strong></th><th><strong>长度</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>md5</td><td>String</td><td>变长</td><td>消息体摘要，缺省MD5摘要</td></tr><tr><td>msgID</td><td>Long</td><td>64</td><td>消息的ID</td></tr><tr><td>Type</td><td>Byte</td><td>8</td><td>0:业务请求消息 1：业务响应消息 2：业务one way消息 3：握手请求消息 4：握手应答消息 5：心跳请求消息 6：心跳应答消息</td></tr><tr><td>Priority</td><td>Byte</td><td>8</td><td>消息优先级：0~255</td></tr><tr><td>Attachment</td><td>Map</td><td>变长</td><td>可选字段，用于扩展消息头</td></tr></tbody></table><h2 id="链路建立" tabindex="-1"><a class="header-anchor" href="#链路建立" aria-hidden="true">#</a> 链路建立</h2><ul><li>客户端的说明如下：如果A节点需要调用B节点的服务，但是A和B之间还没有建立物理链路，则有调用方主动发起连接，此时，调用方为客户端，被调用方为服务端</li><li>考虑到安全，链路建立需要通过基于Ip地址或者号段的黑白名单安全认证机制，作为样例，本协议使用基于IP地址的安全认证，如果有多个Ip，通过逗号进行分割。在实际的商用项目中，安全认证机制会更加严格，例如通过密钥对用户名和密码进行安全认证</li><li>客户端与服务端链路建立成功之后，由客户端发送业务</li><li>握手请求的认证消息，服务端接收到客户端的握手请求消息之后，如果IP校验通过，返回握手成功应答消息给客户端，应用层链路建立成功。握手应答消息中消息体为byte类型的结果，0：认证成功；-1认证失败；服务端关闭连接</li><li>链路建立成功之后，客户端和服务端就可以互相发送业务消息了，在客户端和服务端的消息通信过程中，业务消息体的内容需要通过MD5进行摘要防篡改。</li></ul><h2 id="可靠性设计" tabindex="-1"><a class="header-anchor" href="#可靠性设计" aria-hidden="true">#</a> 可靠性设计</h2><p>在凌晨等业务低谷时段，如果发生网络闪断、连接被Hang住等问题时，由于没有业务消息，应用程序很难发现。到了白天业务高峰期时，会发生大量的网络通信失败，严重的会导致一段时间进程内无法处理业务消息。为了解决这个问题，在网络空闲时采用心跳机制来检测链路的互通性，一旦发现网络故障，立即关闭链路，主动重连。</p><p>当读或者写心跳消息发生I/O异常的时候，说明已经中断，此时需要立即关闭连接，如果是客户端，需要重新发起连接。如果是服务端，需要清空缓存的半包信息，等到客户端重连。</p><h3 id="空闲的连接和超时" tabindex="-1"><a class="header-anchor" href="#空闲的连接和超时" aria-hidden="true">#</a> <strong>空闲的连接和超时</strong></h3><p>检测空闲连接以及超时对于及时释放资源来说是至关重要的。由于这是一项常见的任务，Netty 特地为它提供了几个ChannelHandler 实现。</p><ul><li><p>IdleStateHandler 当连接空闲时间太长时，将会触发一个IdleStateEvent 事件。然后，可以通过在ChannelInboundHandler 中重写userEventTriggered()方法来处理该IdleStateEvent 事件。</p></li><li><p>ReadTimeoutHandler 如果在指定的时间间隔内没有收到任何的入站数据，则抛出一个ReadTimeoutException 并关闭对应的Channel。可以通过重写你的ChannelHandler 中的exceptionCaught()方法来检测该Read-TimeoutException。</p></li></ul><h3 id="重连机制" tabindex="-1"><a class="header-anchor" href="#重连机制" aria-hidden="true">#</a> 重连机制</h3><p>如果链路中断，等到INTEVAL时间后，由客户端发起重连操作，如果重连失败，间隔周期INTERVAL后再次发起重连，直到重连成功。</p><p>为了保持服务端能够有充足的时间释放句柄资源，在首次断连时客户端需要等待INTERVAL时间之后再发起重连，而不是失败后立即重连。</p><p>为了保证句柄资源能够及时释放，无论什么场景下重连失败，客户端必须保证自身的资源被及时释放，包括但不现居SocketChannel、Socket等。</p><p>重连失败后，可以打印异常堆栈信息，方便后续的问题定位。</p><h3 id="重复登录保护" tabindex="-1"><a class="header-anchor" href="#重复登录保护" aria-hidden="true">#</a> 重复登录保护</h3><p>当客户端握手成功之后，在链路处于正常状态下，不允许客户端重复登录，以防止客户端在异常状态下反复重连导致句柄资源被耗尽。</p><p>服务端接收到客户端的握手请求消息之后，对IP地址进行合法性校验，如果校验成功，在缓存的地址表中查看客户端是否已经登录，如果登录，则拒绝重复登录，同时关闭TCP链路，并在服务端的日志中打印握手失败的原因。</p><p>客户端接收到握手失败的应答消息之后，关闭客户端的TCP连接，等待INTERVAL时间之后，再次发起TCP连接，直到认证成功</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p><img src="/images/netty/10141.png" alt="https://note.youdao.com/yws/public/resource/1fa6e0baabeb5ea0db8621984d3ccd5d/xmlnote/OFFICEDE9157D852C6438E86E612D33B549FCE/10141"></p><blockquote><p>客户端</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>入站：<span class="token class-name">LengthFieldBasedFrameDecoder</span><span class="token operator">-&gt;</span><span class="token class-name">KryoDecoder</span><span class="token operator">-&gt;</span><span class="token class-name">LoginAuthReqHandler</span><span class="token operator">-&gt;</span><span class="token class-name">HearBeatReqHandler</span><span class="token operator">-&gt;</span><span class="token class-name">ClientBusiHandler</span>\n出站：<span class="token class-name">LengthFieldPrepender</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token class-name">KryoEncoder</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token class-name">ReadTimeoutHandler</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>服务器</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>入站：<span class="token class-name">LengthFieldBasedFrameDecoder</span><span class="token operator">-&gt;</span><span class="token class-name">KryoDecoder</span><span class="token operator">-&gt;</span><span class="token class-name">ReadTimeoutHandler</span><span class="token operator">-&gt;</span><span class="token class-name">LoginAuthRespHandler</span><span class="token operator">-&gt;</span><span class="token class-name">HeartBeatRespHandler</span><span class="token operator">-&gt;</span><span class="token class-name">ServerBusiHandler</span>\n    \n出站：<span class="token class-name">LengthFieldPrepender</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token class-name">KryoEncoder</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token class-name">ReadTimeoutHandler</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',34),s={},l=(0,t(66262).A)(s,[["render",function(e,a){return n}]])},66262:(e,a)=>{a.A=(e,a)=>{const t=e.__vccOpts||e;for(const[e,n]of a)t[e]=n;return t}}}]);