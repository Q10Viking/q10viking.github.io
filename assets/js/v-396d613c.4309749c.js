"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[95139],{47968:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-396d613c",path:"/typescript/01%20TypeScript%E6%A6%82%E8%A7%88.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/typescript/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"TypeScript",slug:"typescript",children:[]},{level:2,title:"TypeScript与JavaScript",slug:"typescript与javascript",children:[{level:3,title:"类型推断",slug:"类型推断",children:[]},{level:3,title:"类型定义",slug:"类型定义",children:[]},{level:3,title:"类型构成",slug:"类型构成",children:[]},{level:3,title:"Generics",slug:"generics",children:[]},{level:3,title:"Structural Type System",slug:"structural-type-system",children:[]}]},{level:2,title:"TypeScript对比Java",slug:"typescript对比java",children:[{level:3,title:"Types as Sets",slug:"types-as-sets",children:[]}]}],filePathRelative:"typescript/01 TypeScript概览.md"}},51476:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var e=a(20641);const t=(0,e.Fv)('<h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2><p><img src="/images/typescript/202111300357843.jpg" alt="202111300357843"></p><h2 id="typescript与javascript" tabindex="-1"><a class="header-anchor" href="#typescript与javascript" aria-hidden="true">#</a> TypeScript与JavaScript</h2><ul><li>TypeScript兼容JavaScript的所有特性，并且在这基础上提供了强大的<strong>TypeScript‘s type system</strong></li><li>另外TypeScript能够在程序执行前能够识别错误的代码行为，降低bugs的产生</li></ul><p><img src="/images/typescript/2021113003185921" alt="202111300318592"></p><h3 id="类型推断" tabindex="-1"><a class="header-anchor" href="#类型推断" aria-hidden="true">#</a> 类型推断</h3><p>能够自动进行类型推断</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> helloWorld <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> helloWorld<span class="token operator">:</span> <span class="token builtin">string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="类型定义" tabindex="-1"><a class="header-anchor" href="#类型定义" aria-hidden="true">#</a> 类型定义</h3>',9),p=(0,e.Lk)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e.Lk)("pre",{class:"language-javascript"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token keyword"},"const"),(0,e.eW)(" user "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n  "),(0,e.Lk)("span",{class:"token literal-property property"},"name"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"Hayes"'),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)("\n  "),(0,e.Lk)("span",{class:"token literal-property property"},"id"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"0"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers"},[(0,e.Lk)("span",{class:"line-number"},"1"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"2"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"3"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"4"),(0,e.Lk)("br")])],-1),o=(0,e.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,e.Lk)("pre",{class:"language-typescript"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token keyword"},"interface"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"User"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n  name"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token builtin"},"string"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n  id"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token builtin"},"number"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token keyword"},"const"),(0,e.eW)(" user"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(" User "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n  name"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"Hayes"'),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)("\n  id"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"0"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers"},[(0,e.Lk)("span",{class:"line-number"},"1"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"2"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"3"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"4"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"5"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"6"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"7"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"8"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"9"),(0,e.Lk)("br")])],-1),c=(0,e.Fv)('<h3 id="类型构成" tabindex="-1"><a class="header-anchor" href="#类型构成" aria-hidden="true">#</a> 类型构成</h3><h4 id="unions" tabindex="-1"><a class="header-anchor" href="#unions" aria-hidden="true">#</a> Unions</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyBool</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">WindowStates</span> <span class="token operator">=</span> <span class="token string">&quot;open&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;closed&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;minimized&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">LockStates</span> <span class="token operator">=</span> <span class="token string">&quot;locked&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;unlocked&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">PositiveOddNumbersUnderTen</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">9</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 既能返回string.length也能返回Array.length</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="generics" tabindex="-1"><a class="header-anchor" href="#generics" aria-hidden="true">#</a> Generics</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Backpack<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> Type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">const</span> backpack<span class="token operator">:</span> Backpack<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="structural-type-system" tabindex="-1"><a class="header-anchor" href="#structural-type-system" aria-hidden="true">#</a> Structural Type System</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>One of TypeScript’s core principles is that <strong>type checking focuses on the <em>shape</em></strong> that values have</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n \n<span class="token keyword">function</span> <span class="token function">logPoint</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',8),l=(0,e.Lk)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e.Lk)("pre",{class:"language-javascript"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token keyword"},"const"),(0,e.eW)(" point "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.Lk)("span",{class:"token literal-property property"},"x"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"23"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.Lk)("span",{class:"token literal-property property"},"y"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"32"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token function"},"logPoint"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("point"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token comment"},"// focus on shape"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token keyword"},"const"),(0,e.eW)(" rect "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)(),(0,e.Lk)("span",{class:"token literal-property property"},"x"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"33"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token literal-property property"},"y"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"3"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token literal-property property"},"width"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"30"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token literal-property property"},"height"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"80"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token function"},"logPoint"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("rect"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers"},[(0,e.Lk)("span",{class:"line-number"},"1"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"2"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"3"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"4"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"5"),(0,e.Lk)("br")])],-1),r=(0,e.Lk)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e.Lk)("pre",{class:"language-javascript"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"VirtualPoint"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n  "),(0,e.Lk)("span",{class:"token literal-property property"},"x"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(" number"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n  "),(0,e.Lk)("span",{class:"token literal-property property"},"y"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(" number"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n \n  "),(0,e.Lk)("span",{class:"token function"},"constructor"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token parameter"},[(0,e.Lk)("span",{class:"token literal-property property"},"x"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(" number"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token literal-property property"},"y"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(" number")]),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)(),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token keyword"},"this"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("x "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(" x"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token keyword"},"this"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.eW)("y "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(" y"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n  "),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n \n"),(0,e.Lk)("span",{class:"token keyword"},"const"),(0,e.eW)(" newVPoint "),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"new"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"VirtualPoint"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token number"},"13"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token number"},"56"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token comment"},"// function logPoint(p: Point)"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token function"},"logPoint"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.eW)("newVPoint"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers"},[(0,e.Lk)("span",{class:"line-number"},"1"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"2"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"3"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"4"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"5"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"6"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"7"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"8"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"9"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"10"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"11"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"12"),(0,e.Lk)("br"),(0,e.Lk)("span",{class:"line-number"},"13"),(0,e.Lk)("br")])],-1),i=(0,e.Fv)('<hr><h2 id="typescript对比java" tabindex="-1"><a class="header-anchor" href="#typescript对比java" aria-hidden="true">#</a> TypeScript对比Java</h2><p>在Typescript中处理的类型与Java之中强一致性的类型有很大的不同</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n  <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// hit the gas</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Golfer</span> <span class="token punctuation">{</span>\n  <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// hit the ball far</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// No error</span>\n<span class="token keyword">let</span> w<span class="token operator">:</span> Car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Golfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="types-as-sets" tabindex="-1"><a class="header-anchor" href="#types-as-sets" aria-hidden="true">#</a> Types as Sets</h3><p>In Java, it’s meaningful to think of a one-to-one correspondence between runtime types and their compile-time declarations.</p><p>In TypeScript, <strong>it’s better to think of a type as a <em>set of values</em> that share something in common</strong>. Because types are just sets, <strong>a particular value can belong to <em>many</em> sets at the same time</strong>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Pointlike</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Named</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n \n<span class="token keyword">function</span> <span class="token function">logPoint</span><span class="token punctuation">(</span>point<span class="token operator">:</span> Pointlike<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;x = &quot;</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&quot;, y = &quot;</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n \n<span class="token keyword">function</span> <span class="token function">logName</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Named<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n \n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;Origin&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token function">logPoint</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">logName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>',8),k={},u=(0,a(66262).A)(k,[["render",function(n,s){const a=(0,e.g2)("CodeGroupItem"),k=(0,e.g2)("CodeGroup");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,(0,e.bF)(k,null,{default:(0,e.k6)((()=>[(0,e.bF)(a,{title:"JavaScript"},{default:(0,e.k6)((()=>[p])),_:1}),(0,e.bF)(a,{title:"TypeScript"},{default:(0,e.k6)((()=>[o])),_:1})])),_:1}),c,(0,e.bF)(k,null,{default:(0,e.k6)((()=>[(0,e.bF)(a,{title:"object"},{default:(0,e.k6)((()=>[l])),_:1}),(0,e.bF)(a,{title:"class"},{default:(0,e.k6)((()=>[r])),_:1})])),_:1}),i],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);