"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[97766],{83284:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-5e7c4bc1",path:"/Redis/26%20Springboot%E6%95%B4%E5%90%88Redis.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"依赖",slug:"依赖",children:[]},{level:2,title:"简单的redis配置",slug:"简单的redis配置",children:[]},{level:2,title:"StringRedisTemplate与RedisTemplate序列化测试",slug:"stringredistemplate与redistemplate序列化测试",children:[{level:3,title:"对象序列化❤️",slug:"对象序列化❤️",children:[]},{level:3,title:"Jackson2JsonRedisSerializer对象转Json❤️",slug:"jackson2jsonredisserializer对象转json❤️",children:[]}]},{level:2,title:"Redis客户端命令对应的RedisTemplate中的方法列表",slug:"redis客户端命令对应的redistemplate中的方法列表",children:[{level:3,title:"String结构",slug:"string结构",children:[]},{level:3,title:"Hash结构",slug:"hash结构",children:[]},{level:3,title:"List结构",slug:"list结构",children:[]},{level:3,title:"Set结构",slug:"set结构",children:[]}]}],filePathRelative:"Redis/26 Springboot整合Redis.md"}},73254:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var t=a(20641);const e={class:"custom-container tip"},p=(0,t.Lk)("p",{class:"custom-container-title"},"TIP",-1),o={href:"https://github.com/Q10Viking/learncode/tree/main/redis/_03_springboot_redis",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Fv)('<h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="简单的redis配置" tabindex="-1"><a class="header-anchor" href="#简单的redis配置" aria-hidden="true">#</a> 简单的redis配置</h2><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">redis</span><span class="token punctuation">:</span>\n    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>\n    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.187.135\n    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>\n      <span class="token key atrule">pool</span><span class="token punctuation">:</span>\n        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">100</span>\n        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">50</span>\n        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>\n        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">1000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="stringredistemplate与redistemplate序列化测试" tabindex="-1"><a class="header-anchor" href="#stringredistemplate与redistemplate序列化测试" aria-hidden="true">#</a> StringRedisTemplate与RedisTemplate序列化测试</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>StringRedisTemplate继承自RedisTemplate，也一样拥有相同的操作。</p><p>StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。</p><p>RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。</p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;template:string:1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello Redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;template:string:2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello 静默&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;template:redis:1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello Redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;template:redis:2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello 静默&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><img src="/images/Redis/image-20220809022616694.png" alt="image-20220809022616694"></p><h3 id="对象序列化❤️" tabindex="-1"><a class="header-anchor" href="#对象序列化❤️" aria-hidden="true">#</a> <strong>对象序列化</strong>❤️</h3><p><strong>StringRedisTemplate一般用来存储字符串，默认用的序列化是StringRedisSerializer。</strong></p><p>如果要存储对象我们一般用RedisTemplate，它底层用的序列化机制是JdkSerializationRedisSerializer，<strong>这种存储对象要求对象实现Serializable接口，它底层存的是二进制的序列化数组，不便于在redis里查看</strong>，<strong>所以我们一般用Jackson2JsonRedisSerializer，能将对象转成json存储，并且不需要对象实现Serializable接口，也便于在redis里查看</strong>。</p><p>当然，如果不需要在redis里查看一些数据，对性能要求较高的话，序列化可以采用protobuf。</p><h4 id="实现serializable" tabindex="-1"><a class="header-anchor" href="#实现serializable" aria-hidden="true">#</a> 实现Serializable</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">storeObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// User实现了Serializable接口</span>\n    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;q10viking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 只提供字符串</span>\n    <span class="token comment">//        stringRedisTemplate.opsForValue().set(&quot;user:1&quot;,user);</span>\n    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// User{name=&#39;q10viking&#39;, id=1}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="/images/Redis/image-20220809025902867.png" alt="image-20220809025902867"></p><h3 id="jackson2jsonredisserializer对象转json❤️" tabindex="-1"><a class="header-anchor" href="#jackson2jsonredisserializer对象转json❤️" aria-hidden="true">#</a> Jackson2JsonRedisSerializer对象转Json❤️</h3><p>需要jackson的依赖</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.13.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">storeObjectJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;《生死疲劳》&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">ANY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span><span class="token constant">NON_FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// key序列化使用StringRedisSerializer</span>\n        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// value序列化jackson</span>\n        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;book:1&quot;</span><span class="token punctuation">,</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Book</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;book:1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Book{name=&#39;《生死疲劳》&#39;, id=1}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><img src="/images/Redis/image-20220809032642885.png" alt="image-20220809032642885"></p><p>以后可以单独创建RestTemplate Bean来自己配置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">RedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">ANY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span><span class="token constant">NON_FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// key序列化使用StringRedisSerializer</span>\n    redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// value序列化jackson</span>\n    redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="redis客户端命令对应的redistemplate中的方法列表" tabindex="-1"><a class="header-anchor" href="#redis客户端命令对应的redistemplate中的方法列表" aria-hidden="true">#</a> <strong>Redis客户端命令对应的RedisTemplate中的方法列表</strong></h2><h3 id="string结构" tabindex="-1"><a class="header-anchor" href="#string结构" aria-hidden="true">#</a> String结构</h3><table><thead><tr><th><strong>String类型结构</strong></th><th></th></tr></thead><tbody><tr><td>Redis</td><td>RedisTemplate rt</td></tr><tr><td>set key value</td><td>rt.opsForValue().set(&quot;key&quot;,&quot;value&quot;)</td></tr><tr><td>get key</td><td>rt.opsForValue().get(&quot;key&quot;)</td></tr><tr><td>del key</td><td>rt.delete(&quot;key&quot;)</td></tr><tr><td>strlen key</td><td>rt.opsForValue().size(&quot;key&quot;)</td></tr><tr><td>getset key value</td><td>rt.opsForValue().getAndSet(&quot;key&quot;,&quot;value&quot;)</td></tr><tr><td>getrange key start end</td><td>rt.opsForValue().get(&quot;key&quot;,start,end)</td></tr><tr><td>append key value</td><td>rt.opsForValue().append(&quot;key&quot;,&quot;value&quot;)</td></tr></tbody></table><h3 id="hash结构" tabindex="-1"><a class="header-anchor" href="#hash结构" aria-hidden="true">#</a> Hash结构</h3><table><thead><tr><th><strong>Hash结构</strong></th><th></th></tr></thead><tbody><tr><td>hmset key field1 value1 field2 value2...</td><td>rt.opsForHash().putAll(&quot;key&quot;,map) //map是一个集合对象</td></tr><tr><td>hset key field value</td><td>rt.opsForHash().put(&quot;key&quot;,&quot;field&quot;,&quot;value&quot;)</td></tr><tr><td>hexists key field</td><td>rt.opsForHash().hasKey(&quot;key&quot;,&quot;field&quot;)</td></tr><tr><td>hgetall key</td><td>rt.opsForHash().entries(&quot;key&quot;) //返回Map对象</td></tr><tr><td>hvals key</td><td>rt.opsForHash().values(&quot;key&quot;) //返回List对象</td></tr><tr><td>hkeys key</td><td>rt.opsForHash().keys(&quot;key&quot;) //返回List对象</td></tr><tr><td>hmget key field1 field2...</td><td>rt.opsForHash().multiGet(&quot;key&quot;,keyList)</td></tr><tr><td>hsetnx key field value</td><td>rt.opsForHash().putIfAbsent(&quot;key&quot;,&quot;field&quot;,&quot;value&quot;</td></tr><tr><td>hdel key field1 field2</td><td>rt.opsForHash().delete(&quot;key&quot;,&quot;field1&quot;,&quot;field2&quot;)</td></tr><tr><td>hget key field</td><td>rt.opsForHash().get(&quot;key&quot;,&quot;field&quot;)</td></tr></tbody></table><h3 id="list结构" tabindex="-1"><a class="header-anchor" href="#list结构" aria-hidden="true">#</a> List结构</h3><table><thead><tr><th><strong>List结构</strong></th><th></th></tr></thead><tbody><tr><td>lpush list node1 node2 node3...</td><td>rt.opsForList().leftPush(&quot;list&quot;,&quot;node&quot;)</td></tr><tr><td>rt.opsForList().leftPushAll(&quot;list&quot;,list) //list是集合对象</td><td></td></tr><tr><td>rpush list node1 node2 node3...</td><td>rt.opsForList().rightPush(&quot;list&quot;,&quot;node&quot;)</td></tr><tr><td>rt.opsForList().rightPushAll(&quot;list&quot;,list) //list是集合对象</td><td></td></tr><tr><td>lindex key index</td><td>rt.opsForList().index(&quot;list&quot;, index)</td></tr><tr><td>llen key</td><td>rt.opsForList().size(&quot;key&quot;)</td></tr><tr><td>lpop key</td><td>rt.opsForList().leftPop(&quot;key&quot;)</td></tr><tr><td>rpop key</td><td>rt.opsForList().rightPop(&quot;key&quot;)</td></tr><tr><td>lpushx list node</td><td>rt.opsForList().leftPushIfPresent(&quot;list&quot;,&quot;node&quot;)</td></tr><tr><td>rpushx list node</td><td>rt.opsForList().rightPushIfPresent(&quot;list&quot;,&quot;node&quot;)</td></tr><tr><td>lrange list start end</td><td>rt.opsForList().range(&quot;list&quot;,start,end)</td></tr><tr><td>lrem list count value</td><td>rt.opsForList().remove(&quot;list&quot;,count,&quot;value&quot;)</td></tr><tr><td>lset key index value</td><td>rt.opsForList().set(&quot;list&quot;,index,&quot;value&quot;)</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="set结构" tabindex="-1"><a class="header-anchor" href="#set结构" aria-hidden="true">#</a> Set结构</h3><table><thead><tr><th><strong>Set结构</strong></th><th></th></tr></thead><tbody><tr><td>sadd key member1 member2...</td><td>rt.boundSetOps(&quot;key&quot;).add(&quot;member1&quot;,&quot;member2&quot;,...)</td></tr><tr><td>rt.opsForSet().add(&quot;key&quot;, set) //set是一个集合对象</td><td></td></tr><tr><td>scard key</td><td>rt.opsForSet().size(&quot;key&quot;)</td></tr><tr><td>sidff key1 key2</td><td>rt.opsForSet().difference(&quot;key1&quot;,&quot;key2&quot;) //返回一个集合对象</td></tr><tr><td>sinter key1 key2</td><td>rt.opsForSet().intersect(&quot;key1&quot;,&quot;key2&quot;)//同上</td></tr><tr><td>sunion key1 key2</td><td>rt.opsForSet().union(&quot;key1&quot;,&quot;key2&quot;)//同上</td></tr><tr><td>sdiffstore des key1 key2</td><td>rt.opsForSet().differenceAndStore(&quot;key1&quot;,&quot;key2&quot;,&quot;des&quot;)</td></tr><tr><td>sinter des key1 key2</td><td>rt.opsForSet().intersectAndStore(&quot;key1&quot;,&quot;key2&quot;,&quot;des&quot;)</td></tr><tr><td>sunionstore des key1 key2</td><td>rt.opsForSet().unionAndStore(&quot;key1&quot;,&quot;key2&quot;,&quot;des&quot;)</td></tr><tr><td>sismember key member</td><td>rt.opsForSet().isMember(&quot;key&quot;,&quot;member&quot;)</td></tr><tr><td>smembers key</td><td>rt.opsForSet().members(&quot;key&quot;)</td></tr><tr><td>spop key</td><td>rt.opsForSet().pop(&quot;key&quot;)</td></tr><tr><td>srandmember key count</td><td>rt.opsForSet().randomMember(&quot;key&quot;,count)</td></tr><tr><td>srem key member1 member2...</td><td>rt.opsForSet().remove(&quot;key&quot;,&quot;member1&quot;,&quot;member2&quot;,...)</td></tr></tbody></table>',31),c={},u=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,t.g2)("OutboundLink");return(0,t.uX)(),(0,t.CE)(t.FK,null,[(0,t.Lk)("div",e,[p,(0,t.Lk)("p",null,[(0,t.Lk)("a",o,[(0,t.eW)("Source Code"),(0,t.bF)(a)])])]),l],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);