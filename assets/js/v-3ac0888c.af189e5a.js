"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[61726],{84793:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3ac0888c",path:"/typescript/09%20%E7%B1%BB%E5%9E%8B%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/typescript/"}},excerpt:"",headers:[{level:2,title:"Intersection Type",slug:"intersection-type",children:[]},{level:2,title:"Type Guards",slug:"type-guards",children:[]},{level:2,title:"Discriminated unions",slug:"discriminated-unions",children:[]},{level:2,title:"Type Casting",slug:"type-casting",children:[]},{level:2,title:"Index properties",slug:"index-properties",children:[]},{level:2,title:"Function overloads",slug:"function-overloads",children:[]},{level:2,title:"Optional Chain",slug:"optional-chain",children:[]},{level:2,title:"Nullish Coalescing",slug:"nullish-coalescing",children:[]}],filePathRelative:"typescript/09 类型高级操作.md"}},20484:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var p=a(20641);const e=(0,p.Fv)('<h2 id="intersection-type" tabindex="-1"><a class="header-anchor" href="#intersection-type" aria-hidden="true">#</a> Intersection Type</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Combineable</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Numernic</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token comment">// Universal是number</span>\n<span class="token keyword">type</span> <span class="token class-name">Universal</span> <span class="token operator">=</span> Combineable <span class="token operator">&amp;</span> Numernic<span class="token punctuation">;</span>\n<span class="token keyword">let</span> someVal<span class="token operator">:</span>Universal <span class="token operator">=</span> <span class="token number">6</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Combine Two Type <strong>Intersection Type</strong>相比接口继承的方式，书写更加简洁</p></div>',3),t=(0,p.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-typescript"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"type"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Admin"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  name"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token builtin"},"string"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n  privileges"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token builtin"},"string"),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n\n"),(0,p.Lk)("span",{class:"token keyword"},"type"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Employee"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  name"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token builtin"},"string"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n  startDate"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(" Date"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token comment"},"// 结合Admin和Employee的属性"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token keyword"},"type"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"ElevatedEmployee"),(0,p.eW)(),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(" Admin "),(0,p.Lk)("span",{class:"token operator"},"&"),(0,p.eW)(" Employee"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n\n"),(0,p.Lk)("span",{class:"token keyword"},"const"),(0,p.eW)(" e1"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(" ElevatedEmployee "),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  name"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"静默"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  privileges"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token string"},'"create-server"'),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  startDate"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"new"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Date"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n\n")])]),(0,p.Lk)("div",{class:"highlight-lines"},[(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("div",{class:"highlight-line"}," "),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br")]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"7"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"8"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"9"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"10"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"11"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"12"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"13"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"14"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"15"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"16"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"17"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"18"),(0,p.Lk)("br")])],-1),o=(0,p.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-typescript"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"interface"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Admin"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  name"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token builtin"},"string"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n  privileges"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token builtin"},"string"),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n\n"),(0,p.Lk)("span",{class:"token keyword"},"interface"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Employee"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  name"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token builtin"},"string"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n  startDate"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(" Date"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n\n"),(0,p.Lk)("span",{class:"token comment"},"// 结合Admin和Employee的属性"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token keyword"},"interface"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"ElevatedEmployee"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"extends"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Employee"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)(" Admin "),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n\n"),(0,p.Lk)("span",{class:"token keyword"},"const"),(0,p.eW)(" e1"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(" ElevatedEmployee "),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n  name"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token string"},'"静默"'),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  privileges"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"["),(0,p.Lk)("span",{class:"token string"},'"create-server"'),(0,p.Lk)("span",{class:"token punctuation"},"]"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n  startDate"),(0,p.Lk)("span",{class:"token operator"},":"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"new"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Date"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},","),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n\n")])]),(0,p.Lk)("div",{class:"highlight-lines"},[(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("div",{class:"highlight-line"}," "),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br"),(0,p.Lk)("br")]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"7"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"8"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"9"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"10"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"11"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"12"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"13"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"14"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"15"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"16"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"17"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"18"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"19"),(0,p.Lk)("br")])],-1),l=(0,p.Fv)('<hr><h2 id="type-guards" tabindex="-1"><a class="header-anchor" href="#type-guards" aria-hidden="true">#</a> Type Guards</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Type守卫</p></div><p>基本数据类型可以使用<strong>typeof</strong></p><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Combineable</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Combineable<span class="token punctuation">,</span> b<span class="token operator">:</span> Combineable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// type guard</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 这样这里就是number的相加了</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></details><p>对象的属性<strong>in</strong> 是否存在判断来保证</p><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Admin</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  privileges<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Employee</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  startDate<span class="token operator">:</span> Date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">UnknownEmployee</span> <span class="token operator">=</span> Employee <span class="token operator">|</span> Admin<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">printEmployeeInfomation</span><span class="token punctuation">(</span>emp<span class="token operator">:</span> UnknownEmployee<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;privileges&quot;</span> <span class="token keyword">in</span> emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// type guard</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Privileges: &quot;</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span>privileges<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;startDate&quot;</span> <span class="token keyword">in</span> emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;startDate: &quot;</span> <span class="token operator">+</span> emp<span class="token punctuation">.</span>startDate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">printEmployeeInfomation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;静默&quot;</span><span class="token punctuation">,</span>\n  privileges<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;create-server&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  startDate<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div></details><p>class有构造函数，可以使用<strong>instanceof</strong>来判断</p><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n  <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Driving ... ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Truck</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 卡车</span>\n  <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Driving a truck... ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// cargo 货物</span>\n  <span class="token function">loadCargo</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Loading </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> cargo... ...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 车辆</span>\n<span class="token keyword">type</span> <span class="token class-name">Vehicle</span> <span class="token operator">=</span> Car <span class="token operator">|</span> Truck<span class="token punctuation">;</span>\n<span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Truck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">useVehicle</span><span class="token punctuation">(</span>vehicle<span class="token operator">:</span> Vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  vehicle<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// if (&quot;loadCargo&quot; in vehicle)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>vehicle <span class="token keyword">instanceof</span> <span class="token class-name">Truck</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    vehicle<span class="token punctuation">.</span><span class="token function">loadCargo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">useVehicle</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">useVehicle</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div></details><hr><h2 id="discriminated-unions" tabindex="-1"><a class="header-anchor" href="#discriminated-unions" aria-hidden="true">#</a> Discriminated unions</h2>',11),c={href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Fv)('<p>引入了Literal type 来简化Type Guards的写法</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&quot;Bird&quot;</span><span class="token punctuation">;</span>\n  flyingSpeed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Horse</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">&quot;Horse&quot;</span><span class="token punctuation">;</span>\n  runningSpeed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> Bird <span class="token operator">|</span> Horse<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">moveAnimal</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> speed<span class="token punctuation">;</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>animal<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;Bird&quot;</span><span class="token operator">:</span>\n      speed <span class="token operator">=</span> animal<span class="token punctuation">.</span>flyingSpeed<span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;Horse&quot;</span><span class="token operator">:</span>\n      speed <span class="token operator">=</span> animal<span class="token punctuation">.</span>runningSpeed<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Moving at speed: &quot;</span> <span class="token operator">+</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><hr><h2 id="type-casting" tabindex="-1"><a class="header-anchor" href="#type-casting" aria-hidden="true">#</a> Type Casting</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>作为开发者，我们知道某个元素肯定不为null，那么可以通过！的形式告诉typescript</p></div><p>1️⃣ 直接在前面加上尖括号</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> userInputElement <span class="token operator">=</span> <span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;user-input&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2️⃣ 使用as</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> userInputElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;user-input&quot;</span>\n<span class="token punctuation">)</span><span class="token operator">!</span> <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如开始使用</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> userInputElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;user-input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 不用！自己来检测</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>userInputElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>userInputElement <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;Hello TypeScript&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h2 id="index-properties" tabindex="-1"><a class="header-anchor" href="#index-properties" aria-hidden="true">#</a> Index properties</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// index properties</span>\n<span class="token keyword">interface</span> <span class="token class-name">ErrorContainer</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>props<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> errorBag<span class="token operator">:</span> ErrorContainer <span class="token operator">=</span> <span class="token punctuation">{</span>\n  email<span class="token operator">:</span> <span class="token string">&quot;Not a valid email&quot;</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">&quot;Must start with a capital character&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="function-overloads" tabindex="-1"><a class="header-anchor" href="#function-overloads" aria-hidden="true">#</a> Function overloads</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Combineable</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Combineable<span class="token punctuation">,</span> b<span class="token operator">:</span> Combineable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// type guard</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 这样这里就是number的相加了</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Q10 &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Viking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nresult<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="optional-chain" tabindex="-1"><a class="header-anchor" href="#optional-chain" aria-hidden="true">#</a> Optional Chain</h2>',17),i={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html?#optional-chaining",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Fv)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Help us safely access nested properties and nested object in our object data</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UserData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  job<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> fetchedUserData<span class="token operator">:</span> UserData <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token string">&quot;u1&quot;</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;静默&quot;</span><span class="token punctuation">,</span>\n  <span class="token comment">// job: { title: &quot;Developer&quot;, description: &quot;Keep learning&quot; },</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fetchedUserData<span class="token operator">?.</span>job<span class="token operator">?.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出： undefined</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="nullish-coalescing" tabindex="-1"><a class="header-anchor" href="#nullish-coalescing" aria-hidden="true">#</a> Nullish Coalescing</h2>',3),k={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html?#nullish-coalescing",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Fv)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can think of this feature - the <code>??</code> operator - as a way to “fall back” to a default value when dealing with <code>null</code> or <code>undefined</code>. When we write code like</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> userInput <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token comment">// 存储到数据库的数据</span>\n<span class="token keyword">const</span> storeData <span class="token operator">=</span> userInput <span class="token operator">??</span> <span class="token string">&quot;DEFAULT&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 相当于</span>\n<span class="token keyword">let</span> x <span class="token operator">=</span> storeData <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> storeData <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> storeData <span class="token operator">:</span> <span class="token string">&quot;DEFAULT&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),m={},d=(0,a(66262).A)(m,[["render",function(n,s){const a=(0,p.g2)("CodeGroupItem"),m=(0,p.g2)("CodeGroup"),d=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[e,(0,p.bF)(m,null,{default:(0,p.k6)((()=>[(0,p.bF)(a,{title:"type"},{default:(0,p.k6)((()=>[t])),_:1}),(0,p.bF)(a,{title:"interface"},{default:(0,p.k6)((()=>[o])),_:1})])),_:1}),l,(0,p.Lk)("p",null,[(0,p.Lk)("a",c,[(0,p.eW)("TypeScript: Documentation - Discriminated unions"),(0,p.bF)(d)])]),r,(0,p.Lk)("p",null,[(0,p.Lk)("a",i,[(0,p.eW)("TypeScript: Documentation - Optional Chain"),(0,p.bF)(d)])]),u,(0,p.Lk)("p",null,[(0,p.Lk)("a",k,[(0,p.eW)("TypeScript: Documentation - Nullish Coalescing"),(0,p.bF)(d)])]),b],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);