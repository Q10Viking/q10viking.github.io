"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[44944],{71134:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6eb71504",path:"/netty/16%20netty%E7%BA%BF%E7%A8%8B%E5%85%B3%E7%B3%BB.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/netty/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Netty中线程的流转",slug:"netty中线程的流转",children:[{level:3,title:"模拟实现❤️",slug:"模拟实现❤️",children:[]},{level:3,title:"测试",slug:"测试",children:[]}]},{level:2,title:"Netty是如何启动线程的",slug:"netty是如何启动线程的",children:[]},{level:2,title:"线程分配",slug:"线程分配",children:[]},{level:2,title:"线程管理",slug:"线程管理",children:[]}],filePathRelative:"netty/16 netty线程关系.md"}},45186:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var p=a(20641);const t=(0,p.Fv)('<h2 id="netty中线程的流转" tabindex="-1"><a class="header-anchor" href="#netty中线程的流转" aria-hidden="true">#</a> Netty中线程的流转</h2><p><img src="/images/netty/image-20230411214539451.png" alt="image-20230411214539451"></p><ul><li>EventLoopGroup持有多个EventLoop数组，每个EventLoop如NioEventLoop继承SingleThreadLoop在继承SingleThreadEventExecutor.</li><li>SingleThreadEventExecutor里面持有一个executor为ThreadExecutorMap内部类的Executor,这个内部类包裹着一个ThreadPerTaskExecutor</li><li>这个ThreadPerTaskExecutor在MultithreadEventExecutorGroup构造函数中创建，最后传递到NioEventLoop中。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/*************************MultithreadEventExecutorGroup构造函数********************************************/</span>\nexecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token function">newDefaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// DefaultThreadFactory</span>\n<span class="token doc-comment comment">/*********************************************************************/</span>\n    \n<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPerTaskExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">ThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>threadFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;threadFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        threadFactory<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// 启动了一个线程</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol start="4"><li>上面的代码最终启动了一个线程，这个线程从DefaultThreadFactory来，创建的是一个FastThreadLocalThread，这个线程继承Thread。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 注册</span>\n<span class="token class-name">SingleThreadEventExecutor</span>#execute\n    \n    doStartThread\t\t注意 <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    inEventLoop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',6),e={href:"https://www.processon.com/view/link/6436d71340a0dd65f6a207f6",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Lk)("p",null,[(0,p.Lk)("img",{src:"/images/concurrency/线程关系.png",alt:"线程关系"})],-1),c=(0,p.Lk)("blockquote",null,[(0,p.Lk)("p",null,"在源码过程中发现一个netty使用的是无锁队列MpscUnboundedArrayQueue")],-1),l={href:"https://www.jianshu.com/p/119a03332619",target:"_blank",rel:"noopener noreferrer"},u={href:"http://jctools.github.io/JCTools/",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Lk)("h3",{id:"模拟实现❤️",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#模拟实现❤️","aria-hidden":"true"},"#"),(0,p.eW)(" 模拟实现❤️")],-1),k=(0,p.Lk)("ul",null,[(0,p.Lk)("li",null,"实现上面线程的流转创建"),(0,p.Lk)("li",null,"实现了ThreadLocal中的应用，方便获取NioEventLoop"),(0,p.Lk)("li",null,"自己实现了动态添加线程的功能"),(0,p.Lk)("li",null,[(0,p.eW)("每个线程处理的任务的时候，我本次实现的允许线程积压的任务数量最多为2个("),(0,p.Lk)("code",null,"new LinkedBlockingQueue(2)"),(0,p.eW)(")，方便看到拒绝效果")])],-1),i={href:"https://github.com/Q10Viking/learncode/tree/main/threads/_03-netty-thread/netty-thread/src/main/java/org/hzz/netty",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.processon.com/view/link/6437cc8d8d9de6685f17b90a",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Fv)('<p><img src="/images/concurrency/netty线程模拟实现.png" alt="netty线程模拟实现"></p><blockquote><p>只要是创建线程的过程</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SingleThreadEventExecutor</span>  <span class="token keyword">extends</span> <span class="token class-name">AbstractEventExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_MAX_PENDING_TASKS</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token comment">// 任务队列允许最大的任务数</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxPendingTasks<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> taskQueue<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_NOT_STARTED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ST_STARTED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token constant">ST_NOT_STARTED</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">&gt;</span></span> <span class="token constant">STATE_UPDATER</span> <span class="token operator">=</span>\n            <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;state&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_MAX_PENDING_TASKS</span><span class="token punctuation">,</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxPendingTasks<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>maxPendingTasks <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>maxPendingTasks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue <span class="token operator">=</span> <span class="token function">newTaskQueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxPendingTasks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> <span class="token class-name">ThreadExecutorMap</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">newTaskQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxPendingTasks<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>maxPendingTasks <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;maxPendingTasks: &quot;</span> <span class="token operator">+</span> maxPendingTasks <span class="token operator">+</span> <span class="token string">&quot; (expected: &gt; 0)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>maxPendingTasks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">offerTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;任务队列繁忙，拒绝接收任务：&quot;</span><span class="token operator">+</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">offerTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> taskQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">final</span> <span class="token class-name">Runnable</span> <span class="token function">pollTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// taskQueue.take(); 会阻塞</span>\n        <span class="token keyword">return</span> taskQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从队列中取出任务不会阻塞</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">runAllTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">Runnable</span> task <span class="token operator">=</span> <span class="token function">pollTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> thread <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>thread<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">addTask</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">startThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">ST_NOT_STARTED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token constant">ST_NOT_STARTED</span><span class="token punctuation">,</span><span class="token constant">ST_STARTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    <span class="token function">doStartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        <span class="token constant">STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token constant">ST_STARTED</span><span class="token punctuation">,</span><span class="token constant">ST_NOT_STARTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doStartThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">assert</span> thread <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>\n            thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n                thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 增大线程</span>\n        <span class="token class-name">NioEventLoopGroup</span> nioEventLoopGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;msg&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>\n            nioEventLoopGroup<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token function">makeTask</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 增加线程</span>\n        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入要增加的线程数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> number <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        nioEventLoopGroup<span class="token punctuation">.</span><span class="token function">addNThreads</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入任意字符继续&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> next <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;msg&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>\n            nioEventLoopGroup<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token function">makeTask</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runnable</span> <span class="token function">makeTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 通过ThreadExecutorMap获取当前线程的EventExecutor</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{},msg:{}&quot;</span><span class="token punctuation">,</span><span class="token class-name">ThreadExecutorMap</span><span class="token punctuation">.</span><span class="token function">currentEventExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token string">&quot;Task{&quot;</span> <span class="token operator">+</span>\n                    <span class="token string">&quot;msg=&#39;&quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                    <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p>初始阶段：线程数量只设置为2.提交10个任务，可以看到只处理了一半</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>任务队列繁忙，拒绝接收任务：Task<span class="token punctuation">{</span>msg<span class="token operator">=</span><span class="token string">&#39;msg4&#39;</span><span class="token punctuation">}</span>\n任务队列繁忙，拒绝接收任务：Task<span class="token punctuation">{</span>msg<span class="token operator">=</span><span class="token string">&#39;msg5&#39;</span><span class="token punctuation">}</span>\n任务队列繁忙，拒绝接收任务：Task<span class="token punctuation">{</span>msg<span class="token operator">=</span><span class="token string">&#39;msg6&#39;</span><span class="token punctuation">}</span>\n任务队列繁忙，拒绝接收任务：Task<span class="token punctuation">{</span>msg<span class="token operator">=</span><span class="token string">&#39;msg7&#39;</span><span class="token punctuation">}</span>\n任务队列繁忙，拒绝接收任务：Task<span class="token punctuation">{</span>msg<span class="token operator">=</span><span class="token string">&#39;msg9&#39;</span><span class="token punctuation">}</span>\n<span class="token number">17</span>:37:10.874 <span class="token punctuation">[</span>nioEventLoopGroup-1-thread-1<span class="token punctuation">]</span> INFO org.hzz.netty.app.App - NioEventLoop<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>,msg:msg0\n<span class="token number">17</span>:37:10.874 <span class="token punctuation">[</span>nioEventLoopGroup-1-thread-2<span class="token punctuation">]</span> INFO org.hzz.netty.app.App - NioEventLoop<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>,msg:msg1\n<span class="token number">17</span>:37:10.879 <span class="token punctuation">[</span>nioEventLoopGroup-1-thread-1<span class="token punctuation">]</span> INFO org.hzz.netty.app.App - NioEventLoop<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>,msg:msg2\n<span class="token number">17</span>:37:10.879 <span class="token punctuation">[</span>nioEventLoopGroup-1-thread-1<span class="token punctuation">]</span> INFO org.hzz.netty.app.App - NioEventLoop<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>,msg:msg8\n<span class="token number">17</span>:37:10.879 <span class="token punctuation">[</span>nioEventLoopGroup-1-thread-2<span class="token punctuation">]</span> INFO org.hzz.netty.app.App - NioEventLoop<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>,msg:msg3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="/images/concurrency/image-20230413174221729.png" alt="image-20230413174221729"></p><p>接着我们继续，输入要增加的线程数，比如输入要添加8个。实现中，虽然只是添加了8个，但是没有提交任务还不会触发线程启动，所以继续提交100线程。给每个线程都轮询到</p><p><img src="/images/concurrency/image-20230413174627952.png" alt="image-20230413174627952"></p><h2 id="netty是如何启动线程的" tabindex="-1"><a class="header-anchor" href="#netty是如何启动线程的" aria-hidden="true">#</a> Netty是如何启动线程的</h2><ol><li>netty ServerBootstrap在bind的时候，会创建一个ServerSocketChannel.然后注册到其中一个NioEventLoop中。</li><li>就在注册的过程中启动了线程startThread()</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">SingleThreadEventExecutor</span>#startThread\n<span class="token class-name">ThreadExecutorMap<span class="token punctuation">.</span>Executor</span><span class="token punctuation">.</span>execute \n<span class="token class-name">ThreadPerTaskExecutor</span><span class="token punctuation">.</span>execute\n    从线程工厂拿出一个线程执行\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="线程分配" tabindex="-1"><a class="header-anchor" href="#线程分配" aria-hidden="true">#</a> 线程分配</h2><p>服务于Channel 的I/O 和事件的EventLoop 包含在EventLoopGroup 中。</p><p>异步传输实现只使用了少量的EventLoop（以及和它们相关联的Thread），而且在当前的线程模型中，它们可能会被多个Channel 所共享。这使得可以通过尽可能少量的Thread 来支撑大量的Channel，而不是每个Channel 分配一个Thread。EventLoopGroup 负责为每个新创建的Channel 分配一个EventLoop。在当前实现中，使用顺序循环（round-robin）的方式进行分配以获取一个均衡的分布，并且相同的EventLoop可能会被分配给多个Channel。</p><p>一旦一个Channel 被分配给一个EventLoop，它将在它的整个生命周期中都使用这个EventLoop（以及相关联的Thread）。</p><p>​ <img src="/images/netty/10093.png" alt="0"></p><blockquote><p>如下面的例子给server的workEventLoopGroup设置为线程数量为3，然后启动三个客户端去连接</p><p>就会观察到服务端处理第一个client和第三个client的线程是同一个</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token number">09</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">17.188</span> <span class="token punctuation">[</span>nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>h<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>EchoServerHandler</span> <span class="token operator">-</span> channelActive <span class="token operator">-</span> <span class="token constant">INFO</span>  连接： <span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6108</span>\n<span class="token number">09</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">17.188</span> <span class="token punctuation">[</span>nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>h<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>EchoServerHandler</span> <span class="token operator">-</span> channelActive <span class="token operator">-</span> <span class="token constant">INFO</span>  channelActive<span class="token operator">:</span> nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>\n<span class="token number">09</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">17.211</span> <span class="token punctuation">[</span>nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>h<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>EchoServerHandler</span> <span class="token operator">-</span> channelRead <span class="token operator">-</span> <span class="token constant">INFO</span>  channelRead<span class="token operator">:</span> nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>\n<span class="token number">09</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">26.004</span> <span class="token punctuation">[</span>nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>h<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>EchoServerHandler</span> <span class="token operator">-</span> channelActive <span class="token operator">-</span> <span class="token constant">INFO</span>  连接： <span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6167</span>\n<span class="token number">09</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">26.004</span> <span class="token punctuation">[</span>nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>h<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>EchoServerHandler</span> <span class="token operator">-</span> channelActive <span class="token operator">-</span> <span class="token constant">INFO</span>  channelActive<span class="token operator">:</span> nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span>\n<span class="token number">09</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">26.027</span> <span class="token punctuation">[</span>nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>h<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>EchoServerHandler</span> <span class="token operator">-</span> channelRead <span class="token operator">-</span> <span class="token constant">INFO</span>  channelRead<span class="token operator">:</span> nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span>\n<span class="token number">09</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33.354</span> <span class="token punctuation">[</span>nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>h<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>EchoServerHandler</span> <span class="token operator">-</span> channelActive <span class="token operator">-</span> <span class="token constant">INFO</span>  连接： <span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6221</span>\n<span class="token number">09</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33.354</span> <span class="token punctuation">[</span>nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>h<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>EchoServerHandler</span> <span class="token operator">-</span> channelActive <span class="token operator">-</span> <span class="token constant">INFO</span>  channelActive<span class="token operator">:</span> nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>\n<span class="token number">09</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33.374</span> <span class="token punctuation">[</span>nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>h<span class="token punctuation">.</span>e<span class="token punctuation">.</span></span>EchoServerHandler</span> <span class="token operator">-</span> channelRead <span class="token operator">-</span> <span class="token constant">INFO</span>  channelRead<span class="token operator">:</span> nioEventLoopGroup<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="线程管理" tabindex="-1"><a class="header-anchor" href="#线程管理" aria-hidden="true">#</a> 线程管理</h2><p>在内部，当提交任务到如果**（**当前）调用线程正是支撑EventLoop 的线程，那么所提交的代码块将会被（直接）执行。否则，EventLoop 将调度该任务以便稍后执行，并将它放入到内部队列中。当EventLoop下次处理它的事件时，它会执行队列中的那些任务/事件</p><p><img src="/images/netty/10094.png" alt="img"></p>',23),d={},h=(0,a(66262).A)(d,[["render",function(n,s){const a=(0,p.g2)("OutboundLink"),d=(0,p.g2)("common-progresson-snippet");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",e,[(0,p.eW)("线程关系| ProcessOn免费在线作图,在线流程图,在线思维导图"),(0,p.bF)(a)])]),(0,p.bF)(d,{src:"https://www.processon.com/view/link/6436d71340a0dd65f6a207f6"}),o,c,(0,p.Lk)("p",null,[(0,p.Lk)("a",l,[(0,p.eW)("原理剖析（第 012 篇）Netty之无锁队列MpscUnboundedArrayQueue原理分析 - 简书 (jianshu.com)"),(0,p.bF)(a)])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",u,[(0,p.eW)("JCTools | Java Concurrency Tools"),(0,p.bF)(a)])]),r,k,(0,p.Lk)("p",null,[(0,p.Lk)("a",i,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",b,[(0,p.eW)("Link"),(0,p.bF)(a)])]),m],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);