"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[74486],{34697:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-32ce8953",path:"/Docker/11%20compose%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Docker/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"docker compose部署springboot项目❤️",slug:"docker-compose部署springboot项目❤️",children:[]},{level:2,title:"项目配置",slug:"项目配置",children:[]},{level:2,title:"项目打包",slug:"项目打包",children:[]},{level:2,title:"编写相应配置文件",slug:"编写相应配置文件",children:[{level:3,title:"依赖环境",slug:"依赖环境",children:[]},{level:3,title:"服务",slug:"服务",children:[]},{level:3,title:"效果",slug:"效果",children:[]},{level:3,title:"测试",slug:"测试",children:[]}]},{level:2,title:"动态扩容微服务(单物理机内扩容)❤️",slug:"动态扩容微服务-单物理机内扩容-❤️",children:[{level:3,title:"负载均衡👍",slug:"负载均衡👍",children:[]}]},{level:2,title:"命令小结",slug:"命令小结",children:[]},{level:2,title:"项目小结👍",slug:"项目小结👍",children:[]}],filePathRelative:"Docker/11 compose部署springboot项目.md"}},75765:(s,n,a)=>{a.r(n),a.d(n,{default:()=>d});var e=a(20641);const p=(0,e.Fv)('<h2 id="docker-compose部署springboot项目❤️" tabindex="-1"><a class="header-anchor" href="#docker-compose部署springboot项目❤️" aria-hidden="true">#</a> docker compose部署springboot项目❤️</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>我开发一个简单的springboot的项目，依赖着mysql和redis的环境。部署的时候。采用docker compose的方式来部署。</p></div><p>以下操作在：docker compose v2.15.1</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>q10viking@LAPTOP-PJLAUUSP:/mydata$ <span class="token function">docker</span> compose version\nDocker Compose version v2.15.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',4),l={href:"https://github.com/Q10Viking/learncode/tree/main/docker/docker-service",target:"_blank",rel:"noopener noreferrer"},r={href:"https://www.processon.com/view/link/64466c9c0fb07e72341c3180",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Fv)('<p><img src="/images/Docker/image-20230424194756152.png" alt="image-20230424194756152"></p><h2 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置" aria-hidden="true">#</a> 项目配置</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>server:\n  port: <span class="token number">8888</span>\n  servlet:\n    context-path: /docker\nspring:\n  redis:\n    host: redis  <span class="token comment"># docker compose下的redis服务名</span>\n    port: <span class="token number">6379</span>\n    database: <span class="token number">0</span>\n\n  datasource:\n    type: com.zaxxer.hikari.HikariDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    <span class="token comment"># docker compose下的mysql8服务的别名db</span>\n    url: jdbc:mysql://db:3306/test?useUnicode<span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">characterEncoding</span><span class="token operator">=</span>utf-8<span class="token operator">&amp;</span><span class="token assign-left variable">useSSL</span><span class="token operator">=</span>false<span class="token operator">&amp;</span><span class="token assign-left variable">serverTimezone</span><span class="token operator">=</span>UTC\n    username: root\n    password: Root.123456\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="项目打包" tabindex="-1"><a class="header-anchor" href="#项目打包" aria-hidden="true">#</a> 项目打包</h2><blockquote><p>maven打包，我们跳过test测试，因为我直接在项目中配置的redis,mysql为docker compose下的服务名。</p></blockquote><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mvn package <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>将打包好的jar包上传到服务器。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>q10viking@LAPTOP-PJLAUUSP:~/learndocker/mall$ tree\n<span class="token builtin class-name">.</span>\n├── docker-compose-app.yml\n├── docker-compose-env.yml\n└── user\n    ├── Dockerfile\n    └── docker-service-0.0.1-SNAPSHOT.jar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在服务器中新建一个mall目录用于docker compose的工程目录。然后创建文件夹user目录，用于存放user服务的jar包</p><h2 id="编写相应配置文件" tabindex="-1"><a class="header-anchor" href="#编写相应配置文件" aria-hidden="true">#</a> 编写相应配置文件</h2><h3 id="依赖环境" tabindex="-1"><a class="header-anchor" href="#依赖环境" aria-hidden="true">#</a> 依赖环境</h3><blockquote><p>依赖环境mysql和redis,<code>docker-compose-env.yml</code></p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>services:\n  redis:\n    image: redis:6.0\n    container_name: redis\n    command: redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span>\n    volumes:\n      - /mydata/redis/data:/data\n    ports:\n      - <span class="token number">6379</span>:6379\n  mysql:\n    image: mysql:8.0-oracle\n    container_name: mysql8\n    command: mysqld --character-set-server<span class="token operator">=</span>utf8mb4 --collation-server<span class="token operator">=</span>utf8mb4_unicode_ci\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: Root.123456\n    ports:\n      - <span class="token number">3306</span>:3306\n    volumes:\n      - /mydata/mysql/data/db:/var/lib/mysql <span class="token comment">#数据文件挂载</span>\n      - /mydata/mysql/data/conf:/etc/mysql/conf.d <span class="token comment">#配置文件挂载</span>\n      - /mydata/mysql/log:/var/log/mysql <span class="token comment">#日志文件挂载</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>启动docker compose的依赖环境</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-env.yml up <span class="token parameter variable">-d</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>可以看到卷挂在到了宿主机</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>q10viking@LAPTOP-PJLAUUSP:/mydata$ <span class="token builtin class-name">pwd</span>\n/mydata\nq10viking@LAPTOP-PJLAUUSP:/mydata$ <span class="token function">ls</span>\nmysql  redis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="服务" tabindex="-1"><a class="header-anchor" href="#服务" aria-hidden="true">#</a> 服务</h3><blockquote><p>新建一个Dockerfile构建user服务的镜像</p></blockquote><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">From</span> java:8</span>\n<span class="token instruction"><span class="token keyword">ADD</span> docker-service-0.0.1-SNAPSHOT.jar /app.jar</span>\n<span class="token comment"># 声明需要暴露的端口</span>\n<span class="token instruction"><span class="token keyword">EXPOSE</span> 8888</span>\n<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;/app.jar&quot;</span>]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>配置docker compose 服务<code>docker-compose-app.yml</code></p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>services:\n  user:\n    image: mall-user-service:0.0.1 <span class="token comment">#指定Dockfile所在路径</span>\n    build: ./user <span class="token comment">#指定Dockfile所在路径</span>\n    container_name: mall-user-service\n    ports:\n      - <span class="token number">8888</span>:8888\n    external_links:\n      - redis\n      - mysql8:db   <span class="token comment"># 定义一个别名，项目中jdbc://db:3306</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>启动起来</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up <span class="token parameter variable">-d</span>\n <span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up --force-recreate <span class="token parameter variable">-d</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h3><p><img src="/images/Docker/image-20230424164059511.png" alt="image-20230424164059511"></p><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3>',28),o={href:"http://localhost:8888/docker/user/select?name=q10viking",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Fv)('<p><img src="/images/Docker/image-20230424164143026.png" alt="image-20230424164143026"></p><blockquote><p>redis中</p></blockquote><p><img src="/images/Docker/image-20230424164218153.png" alt="image-20230424164218153"></p><h2 id="动态扩容微服务-单物理机内扩容-❤️" tabindex="-1"><a class="header-anchor" href="#动态扩容微服务-单物理机内扩容-❤️" aria-hidden="true">#</a> 动态扩容微服务(单物理机内扩容)❤️</h2><p>要扩容微服务，比如我们想把user服务部署成两个微服务，则需要将docker-compose.yml里的服务的端口映射和容器名称都注释掉，因为不可能两个user服务的容器映射到宿主机的同一个端口，修改之后的docker-compose-app.yml内容如下：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">user</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> mall<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service<span class="token punctuation">:</span>0.0.1 <span class="token comment">#指定Dockfile所在路径</span>\n    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./user <span class="token comment">#指定Dockfile所在路径</span>\n    <span class="token comment"># container_name: mall-user-service</span>\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token number">8888</span>  <span class="token comment"># 仅指定容器的端口，让宿主机随机分配</span>\n    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> redis\n      <span class="token punctuation">-</span> mysql8<span class="token punctuation">:</span>db\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>执行如下扩容命令，<strong>服务一旦扩容对应了多个容器，则❤️访问服务名❤️docker会自动帮我们负载均衡去访问服务对应的每台容器</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token comment">#必须先正常编排微服务，然后才能动态扩容,文件有变动，需要重新创建容器</span>\n<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up --force-recreate <span class="token parameter variable">-d</span>    \n<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up <span class="token parameter variable">--scale</span> <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-d</span>\n<span class="token comment">#如果要缩容执行如下操作</span>\n<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up <span class="token parameter variable">--scale</span> <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-d</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>输出</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>q10viking@LAPTOP-PJLAUUSP:~/learndocker/mall$ <span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up <span class="token parameter variable">--scale</span> <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-d</span>\n<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Running <span class="token number">3</span>/3\n ⠿ Container mall-user-1  Started                                                                                                                      <span class="token number">1</span>.5s\n ⠿ Container mall-user-3  Started                                                                                                                      <span class="token number">3</span>.1s\n ⠿ Container mall-user-2  Started                                                                                                                      <span class="token number">4</span>.8s\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="/images/Docker/image-20230424175539729.png" alt="image-20230424175539729"></p><h3 id="负载均衡👍" tabindex="-1"><a class="header-anchor" href="#负载均衡👍" aria-hidden="true">#</a> 负载均衡👍</h3>',12),i={href:"https://medium.com/@vinodkrane/microservices-scaling-and-load-balancing-using-docker-compose-78bf8dc04da9",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Fv)('<p>创建nginx的配置文件,在mall目录（也就是docker compose的工程目录）</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>q10viking@LAPTOP-PJLAUUSP:~/learndocker/mall$ tree\n<span class="token builtin class-name">.</span>\n├── docker-compose-app.yml\n├── docker-compose-env.yml\n├── nginx.conf\n└── user\n    ├── Dockerfile\n    └── docker-service-0.0.1-SNAPSHOT.jar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>user  nginx;\nevents {\n    worker_connections   1000;\n}\nhttp {\n        server {\n              listen 8888;\n              location / {\n                proxy_pass http://user:8888; # docker会自己根据user服务名去负载均衡，nginx在这里主要责任是代理的作用\n              }\n        }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>修改<code>docker-compose-app.yml</code>文件</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">user</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> mall<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service<span class="token punctuation">:</span>0.0.1 <span class="token comment">#指定Dockfile所在路径</span>\n    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./user <span class="token comment">#指定Dockfile所在路径</span>\n    <span class="token comment"># container_name: mall-user-service</span>\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token number">8888</span>\n    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> redis\n      <span class="token punctuation">-</span> mysql8<span class="token punctuation">:</span>db\n  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> ./nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf<span class="token punctuation">:</span>ro <span class="token comment"># 将当前我们的配置挂载到容器</span>\n    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> user   <span class="token comment"># 依赖的服务，我们在nginx做了反向代理</span>\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;8888:8888&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p>启动</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token comment"># 先启动容器</span>\n <span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up --force-recreate <span class="token parameter variable">-d</span>\n <span class="token comment"># 再扩展</span>\n <span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up <span class="token parameter variable">--scale</span> <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-d</span>\n \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="/images/Docker/image-20230424183517979.png" alt="image-20230424183517979"></p>',8),m={href:"http://localhost:8888/docker/user/select?name=huangzhuangzhuang",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Fv)('<p><img src="/images/Docker/image-20230424184756842.png" alt="image-20230424184756842"></p><blockquote><p>优化，既然在docker compose工程中就相当于内网，我们只需要暴露nginx的端口就行了，user服务的端口我们就选择不暴露了。</p><p>将user服务的端口注释掉</p></blockquote><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">user</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> mall<span class="token punctuation">-</span>user<span class="token punctuation">-</span>service<span class="token punctuation">:</span>0.0.1 <span class="token comment">#指定Dockfile所在路径</span>\n    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./user <span class="token comment">#指定Dockfile所在路径</span>\n    <span class="token comment"># container_name: mall-user-service</span>\n    <span class="token comment"># ports:</span>\n    <span class="token comment">#   - 8888</span>\n    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> redis\n      <span class="token punctuation">-</span> mysql8<span class="token punctuation">:</span>db\n  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> ./nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf<span class="token punctuation">:</span>ro <span class="token comment"># 将当前我们的配置挂载到容器</span>\n    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> user   <span class="token comment"># 依赖的服务，我们在nginx做了反向代理</span>\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;8888:8888&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>CONTAINER ID   IMAGE                     COMMAND                  CREATED         STATUS         PORTS                               NAMES\nc4e20908b65e   nginx:latest              <span class="token string">&quot;/docker-entrypoint.…&quot;</span>   <span class="token number">7</span> minutes ago   Up <span class="token number">6</span> minutes   <span class="token number">80</span>/tcp, <span class="token number">0.0</span>.0.0:8888-<span class="token operator">&gt;</span><span class="token number">8888</span>/tcp      nginx\n346605d38eb7   mall-user-service:0.0.1   <span class="token string">&quot;java -jar /app.jar&quot;</span>     <span class="token number">7</span> minutes ago   Up <span class="token number">7</span> minutes   <span class="token number">8888</span>/tcp                            mall-user-1\n2fd53aedfe13   mall-user-service:0.0.1   <span class="token string">&quot;java -jar /app.jar&quot;</span>     <span class="token number">7</span> minutes ago   Up <span class="token number">7</span> minutes   <span class="token number">8888</span>/tcp                            mall-user-2\n224457a0cad9   mall-user-service:0.0.1   <span class="token string">&quot;java -jar /app.jar&quot;</span>     <span class="token number">7</span> minutes ago   Up <span class="token number">7</span> minutes   <span class="token number">8888</span>/tcp                            mall-user-3\n7d3ac8001869   mysql:8.0-oracle          <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   <span class="token number">4</span> hours ago     Up <span class="token number">4</span> hours     <span class="token number">0.0</span>.0.0:3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, <span class="token number">33060</span>/tcp   mysql8\n62229f460335   redis:6.0                 <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   <span class="token number">4</span> hours ago     Up <span class="token number">4</span> hours     <span class="token number">0.0</span>.0.0:6379-<span class="token operator">&gt;</span><span class="token number">6379</span>/tcp              redis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="/images/Docker/image-20230424194756152.png" alt="image-20230424194756152"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>q10viking@LAPTOP-PJLAUUSP:~/learndocker/mall$ <span class="token function">docker</span> <span class="token function">ps</span>\nCONTAINER ID   IMAGE                     COMMAND                  CREATED             STATUS             PORTS                               NAMES\nc4e20908b65e   nginx:latest              <span class="token string">&quot;/docker-entrypoint.…&quot;</span>   About an hour ago   Up About an hour   <span class="token number">80</span>/tcp, <span class="token number">0.0</span>.0.0:8888-<span class="token operator">&gt;</span><span class="token number">8888</span>/tcp      nginx\n346605d38eb7   mall-user-service:0.0.1   <span class="token string">&quot;java -jar /app.jar&quot;</span>     About an hour ago   Up About an hour   <span class="token number">8888</span>/tcp                            mall-user-1\n2fd53aedfe13   mall-user-service:0.0.1   <span class="token string">&quot;java -jar /app.jar&quot;</span>     About an hour ago   Up About an hour   <span class="token number">8888</span>/tcp                            mall-user-2\n224457a0cad9   mall-user-service:0.0.1   <span class="token string">&quot;java -jar /app.jar&quot;</span>     About an hour ago   Up About an hour   <span class="token number">8888</span>/tcp                            mall-user-3\n7d3ac8001869   mysql:8.0-oracle          <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   <span class="token number">5</span> hours ago         Up <span class="token number">5</span> hours         <span class="token number">0.0</span>.0.0:3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, <span class="token number">33060</span>/tcp   mysql8\n62229f460335   redis:6.0                 <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   <span class="token number">5</span> hours ago         Up <span class="token number">5</span> hours         <span class="token number">0.0</span>.0.0:6379-<span class="token operator">&gt;</span><span class="token number">6379</span>/tcp              redis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="命令小结" tabindex="-1"><a class="header-anchor" href="#命令小结" aria-hidden="true">#</a> 命令小结</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-env.yml up <span class="token parameter variable">-d</span>\n<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up <span class="token parameter variable">-d</span>\n<span class="token comment"># 文件有变动，需要重新创建容器 --force-recreate</span>\n<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up --force-recreate <span class="token parameter variable">-d</span>\n<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up <span class="token parameter variable">--scale</span> <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-d</span>\n<span class="token comment">#如果要缩容执行如下操作</span>\n<span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose-app.yml up <span class="token parameter variable">--scale</span> <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-d</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="项目小结👍" tabindex="-1"><a class="header-anchor" href="#项目小结👍" aria-hidden="true">#</a> 项目小结👍</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>docker compose部署的工程相当于一个内网，内网下的服务可以通过服务名进行访问</p><p>如果一个服务有多个实例，那么通过访问服务名，docker会自己进行负载均衡。我们通过nginx来反向代理服务名</p></div><p>注意：docker compose主要用在单物理机内扩容的情况，要做多机扩容还需自己在多个机器上做很多定制化配置，当然，要做多物理机扩容一般都会用docker swarm或kubernetes。</p>',11),k={},d=(0,a(66262).A)(k,[["render",function(s,n){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[p,(0,e.Lk)("p",null,[(0,e.Lk)("a",l,[(0,e.eW)("Source Code"),(0,e.bF)(a)])]),(0,e.Lk)("p",null,[(0,e.Lk)("a",r,[(0,e.eW)("ProgressOn | Docker compose"),(0,e.bF)(a)])]),c,(0,e.Lk)("p",null,[(0,e.Lk)("a",o,[(0,e.eW)("http://localhost:8888/docker/user/select?name=q10viking"),(0,e.bF)(a)])]),t,(0,e.Lk)("p",null,[(0,e.eW)("为了实现负载均衡，参照"),(0,e.Lk)("a",i,[(0,e.eW)("Microservices: Scaling and Load Balancing using docker compose | by Vinod Rane | Medium"),(0,e.bF)(a)]),(0,e.eW)("用nginx来实现")]),u,(0,e.Lk)("p",null,[(0,e.eW)("访问： "),(0,e.Lk)("a",m,[(0,e.eW)("http://localhost:8888/docker/user/select?name=huangzhuangzhuang"),(0,e.bF)(a)])]),b],64)}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);