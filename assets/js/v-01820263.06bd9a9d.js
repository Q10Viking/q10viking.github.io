"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[30704],{93680:(s,n,a)=>{a.r(n),a.d(n,{data:()=>t});const t={key:"v-01820263",path:"/Redis/24%20Lua%E8%84%9A%E6%9C%AC%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Redis Lua脚本",slug:"redis-lua脚本",children:[]},{level:2,title:"Java代码示例",slug:"java代码示例",children:[]},{level:2,title:"RedissonLock.java中的源码",slug:"redissonlock-java中的源码",children:[]}],filePathRelative:"Redis/24 Lua脚本原子操作.md"}},53821:(s,n,a)=>{a.r(n),a.d(n,{default:()=>r});var t=a(20641);const e=(0,t.Fv)('<h2 id="redis-lua脚本" tabindex="-1"><a class="header-anchor" href="#redis-lua脚本" aria-hidden="true">#</a> Redis Lua脚本</h2><p>Redis在2.6推出了脚本功能，允许开发者使用Lua语言编写脚本传到Redis中执行。使用脚本的好处如下:</p><ol><li><p><strong>减少网络开销</strong>：本来5次网络请求的操作，可以用一个请求完成，原先5次请求的逻辑放在redis服务器上完成。使用脚本，减少了网络往返时延。<strong>这点跟管道类似</strong>。</p></li><li><p><strong>原子操作</strong>：Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。<strong>管道不是原子的，不过redis的批量操作命令(类似mset)是原子的。</strong></p></li><li><p><strong>替代redis的事务功能</strong>：redis自带的事务功能很鸡肋，而redis的lua脚本几乎实现了常规的事务功能，官方推荐如果要使用redis的事务功能可以用redis lua替代。</p><p><strong>官网文档上有这样一段话：</strong></p><blockquote><p>A Redis script is transactional by definition, so everything you can do with a Redis transaction, you can also do with a script, and usually the script will be both simpler and faster.</p></blockquote></li></ol><p>从Redis2.6.0版本开始，通过内置的Lua解释器，可以使用EVAL命令对Lua脚本进行求值。EVAL命令的格式如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>EVAL script numkeys key [key ...] arg [arg ...]　\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>script参数是一段Lua脚本程序，它会被运行在Redis服务器上下文中，这段脚本<strong>不必(也不应该)定义为一个Lua函数</strong>。numkeys参数用于指定键名参数的个数。键名参数 key [key ...] 从EVAL的第三个参数开始算起，表示在脚本中所用到的那些Redis键(key)，这些键名参数可以在 Lua中通过全局变量KEYS数组，<strong>用1为基址</strong>的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。</p><p>在命令的最后，那些不是键名参数的附加参数 arg [arg ...] ，可以在Lua中通过全局变量<strong>ARGV</strong>数组访问，访问的形式和KEYS变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)。例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">eval</span> <span class="token string">&quot;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&quot;</span> <span class="token number">2</span> key1 key2 first second\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;key1&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;key2&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;first&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;second&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中 &quot;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&quot; 是被求值的Lua脚本，数字2指定了键名参数的数量， key1和key2是键名参数，分别使用 KEYS[1] 和 KEYS[2] 访问，而最后的 first 和 second 则是附加参数，可以通过 ARGV[1] 和 ARGV[2] 访问它们。</p><p>⭐在 Lua 脚本中，可以使用**redis.call()**函数来执行Redis命令⭐</p><h2 id="java代码示例" tabindex="-1"><a class="header-anchor" href="#java代码示例" aria-hidden="true">#</a> Java代码示例</h2>',11),p={class:"custom-container tip"},o=(0,t.Lk)("p",{class:"custom-container-title"},"TIP",-1),c={href:"https://github.com/Q10Viking/learncode/blob/main/redis/_01_java_redis/src/main/java/org/hzz/LuaApp.java",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Fv)('<blockquote><p>Lua脚本能确保原子性操作</p></blockquote><blockquote><p>模拟一个商品减库存的原子操作</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//lua脚本命令执行方式：redis-cli --eval /tmp/test.lua , 10</span>\njedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;product_stock_10016&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;15&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化商品10016的库存</span>\n<span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">&quot; local count = redis.call(&#39;get&#39;, KEYS[1]) &quot;</span> <span class="token operator">+</span>\n    <span class="token string">&quot; local a = tonumber(count) &quot;</span> <span class="token operator">+</span>\n    <span class="token string">&quot; local b = tonumber(ARGV[1]) &quot;</span> <span class="token operator">+</span>\n    <span class="token string">&quot; if a &gt;= b then &quot;</span> <span class="token operator">+</span>\n    <span class="token string">&quot;   redis.call(&#39;set&#39;, KEYS[1], a-b) &quot;</span> <span class="token operator">+</span>\n    <span class="token comment">//模拟语法报错回滚操作</span>\n    <span class="token comment">// &quot;   bb == 0 &quot; +</span>\n    <span class="token string">&quot;   return 1 &quot;</span> <span class="token operator">+</span>\n    <span class="token string">&quot; end &quot;</span> <span class="token operator">+</span>\n    <span class="token string">&quot; return 0 &quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 返回的就是Lua脚本返回的return</span>\n<span class="token class-name">Object</span> obj <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;product_stock_10016&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;product_stock_10016&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>注意，不要在Lua脚本中出现死循环和耗时的运算，否则redis会阻塞，将不接受其他的命令， 所以使用时要注意不能出现死循环、耗时的运算。redis是单进程、单线程执行脚本。管道不会阻塞redis。</strong></p><h2 id="redissonlock-java中的源码" tabindex="-1"><a class="header-anchor" href="#redissonlock-java中的源码" aria-hidden="true">#</a> RedissonLock.java中的源码</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> commandExecutor<span class="token punctuation">.</span><span class="token function">evalWriteAsync</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LongCodec</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">,</span> command<span class="token punctuation">,</span>\n                  <span class="token string">&quot;if (redis.call(&#39;exists&#39;, KEYS[1]) == 0) then &quot;</span> <span class="token operator">+</span>\n                      <span class="token string">&quot;redis.call(&#39;hset&#39;, KEYS[1], ARGV[2], 1); &quot;</span> <span class="token operator">+</span>\n                      <span class="token string">&quot;redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]); &quot;</span> <span class="token operator">+</span>\n                      <span class="token string">&quot;return nil; &quot;</span> <span class="token operator">+</span>\n                  <span class="token string">&quot;end; &quot;</span> <span class="token operator">+</span>\n                  <span class="token string">&quot;if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[2]) == 1) then &quot;</span> <span class="token operator">+</span>\n                      <span class="token string">&quot;redis.call(&#39;hincrby&#39;, KEYS[1], ARGV[2], 1); &quot;</span> <span class="token operator">+</span>\n                      <span class="token string">&quot;redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]); &quot;</span> <span class="token operator">+</span>\n                      <span class="token string">&quot;return nil; &quot;</span> <span class="token operator">+</span>\n                  <span class="token string">&quot;end; &quot;</span> <span class="token operator">+</span>\n                  <span class="token string">&quot;return redis.call(&#39;pttl&#39;, KEYS[1]);&quot;</span><span class="token punctuation">,</span>\n                    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> internalLockLeaseTime<span class="token punctuation">,</span> <span class="token function">getLockName</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// key 续命时间  线程id</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',6),u={},r=(0,a(66262).A)(u,[["render",function(s,n){const a=(0,t.g2)("OutboundLink");return(0,t.uX)(),(0,t.CE)(t.FK,null,[e,(0,t.Lk)("div",p,[o,(0,t.Lk)("p",null,[(0,t.Lk)("a",c,[(0,t.eW)("Source Code LuaApp.java"),(0,t.bF)(a)])])]),l],64)}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,t]of n)a[s]=t;return a}}}]);