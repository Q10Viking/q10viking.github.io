"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[61519],{4225:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-cfd5f58a",path:"/MySQL/04%20Mysql%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/MySQL/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"理论",slug:"理论",children:[{level:3,title:"数据安全",slug:"数据安全",children:[]},{level:3,title:"读写分离",slug:"读写分离",children:[]},{level:3,title:"故障转移-高可用",slug:"故障转移-高可用",children:[]}]},{level:2,title:"主从同步原理",slug:"主从同步原理",children:[]},{level:2,title:"搭建主从",slug:"搭建主从",children:[{level:3,title:"集群规划",slug:"集群规划",children:[]},{level:3,title:"主节点配置",slug:"主节点配置",children:[]},{level:3,title:"从节点配置",slug:"从节点配置",children:[]}]},{level:2,title:"主从测试",slug:"主从测试",children:[]},{level:2,title:"全库同步与部分同步",slug:"全库同步与部分同步",children:[]},{level:2,title:"补充",slug:"补充",children:[]}],filePathRelative:"MySQL/04 Mysql主从搭建.md"}},58570:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(20641).Fv)('<h2 id="理论" tabindex="-1"><a class="header-anchor" href="#理论" aria-hidden="true">#</a> 理论</h2><h3 id="数据安全" tabindex="-1"><a class="header-anchor" href="#数据安全" aria-hidden="true">#</a> 数据安全</h3><p>给主服务增加一个数据备份。基于这个目的，可以搭建主从架构，或者也可以基于主从架构搭建互主的架构。</p><h3 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离" aria-hidden="true">#</a> 读写分离</h3><p>对于大部分的JAVA业务系统来说，都是读多写少的，读请求远远高于写请求。这时，当主服务的访问压力过大时，可以将数据读请求转为由从服务来分担，主服务只负责数据写入的请求，这样大大缓解数据库的访问压力。</p><p>要理解，<strong>MySQL的主从架构只是实现读写分离的一个基础。实现读写分离还是需要一些中间件来支持，比如ShardingSphere</strong></p><h3 id="故障转移-高可用" tabindex="-1"><a class="header-anchor" href="#故障转移-高可用" aria-hidden="true">#</a> 故障转移-高可用</h3><p>当MySQL主服务宕机后，可以由一台从服务切换成为主服务，继续提供数据读写功能。对于高可用架构，主从数据的同步也只是实现故障转移的一个前提条件，<strong>要实现MySQL主从切换，还需要依靠一些其他的中间件来实现。比如MMM、MHA、MGR。</strong></p><p>在一般项目中，如果数据库的访问压力没有那么大，那读写分离不一定是必须要做的，但是，主从架构和高可用架构则是必须要搭建的。</p><h2 id="主从同步原理" tabindex="-1"><a class="header-anchor" href="#主从同步原理" aria-hidden="true">#</a> 主从同步原理</h2><p>MySQL服务的主从架构一般都是通过binlog日志文件来进行的。即在主服务上打开binlog记录每一步的数据库操作，然后从服务上会有一个IO线程，负责跟主服务建立一个TCP连接，请求主服务将binlog传输过来。这时，主库上会有一个IO dump线程，负责通过这个TCP连接把Binlog日志传输给从库的IO线程。接着从服务的IO线程会把读取到的binlog日志数据写入自己的relay日志文件中。然后从服务 上另外一个SQL线程会读取relay日志里的内容，进行操作重演，达到还原数据的目的。我们通常对MySQL做的读写分离配置就必须基于主从架构来搭建。</p><p><img src="/images/MySQL/image-20211024234212583.png" alt="image-20211024234212583"></p><blockquote><p>MySQL的binlog不光可以用于主从同步，还可以用于缓存数据同步等场景。</p><p>例如Canal，可以模拟一个slave节点，向MySQL发起binlog同步，然后将数据落地到Redis、Kafka等其他组件，<strong>实现数据实时流转。</strong></p></blockquote><p><img src="/images/MySQL/image-20230510162910657.png" alt="image-20230510162910657"></p><p>一个事务日志同步的完整过程是这样的：</p><ol><li>在备库 B 上通过 change master 命令，设置主库 A 的 IP、端口、用户名、密码，以及要从哪个位置开始请求 binlog，这个位置包含文件名和日志偏移量。</li><li>在备库 B 上执行 start slave 命令，这时候备库会启动两个线程，就是图中的 io_thread 和 sql_thread。其中 io_thread 负责与主库建立连接。</li><li>主库 A 校验完用户名、密码后，开始按照备库 B 传过来的位置，从本地读取 binlog，发给 B。</li><li>备库 B 拿到 binlog 后，写到本地文件，称为中转日志（relay log）。</li><li>sql_thread 读取中转日志，解析出日志里的命令，并执行。</li></ol><h2 id="搭建主从" tabindex="-1"><a class="header-anchor" href="#搭建主从" aria-hidden="true">#</a> 搭建主从</h2><p>搭建主从集群时，有两个必要的要求：</p><ol><li>双方MySQL必须版本一致。至少需要主服务的版本低于从服务</li><li>两节点间的时间需要同步。</li></ol><h3 id="集群规划" tabindex="-1"><a class="header-anchor" href="#集群规划" aria-hidden="true">#</a> 集群规划</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>192.168.187.132  主\n192.168.187.135  从\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="主节点配置" tabindex="-1"><a class="header-anchor" href="#主节点配置" aria-hidden="true">#</a> 主节点配置</h3><blockquote><p>配置说明：主要需要修改的是以下几个属性： server-id：服务节点的唯一标识。需要给集群中的每个服务分配一个单独的ID。 log_bin：打开Binlog日志记录，并指定文件名。 log_bin-index：Binlog日志文件</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># /etc/my.cnf</span>\nserver-id<span class="token operator">=</span><span class="token number">47</span>\n<span class="token comment">#开启binlog</span>\n<span class="token assign-left variable">log_bin</span><span class="token operator">=</span>master-bin\nlog_bin-index<span class="token operator">=</span>master-bin.index\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#登录主数据库</span>\nmysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-pRoot.123456</span>\nGRANT REPLICATION SLAVE ON *.* TO <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span>\nflush privileges<span class="token punctuation">;</span>\n<span class="token comment">#查看主节点同步状态：</span>\nshow master status<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="/images/MySQL/image-20211025014416837.png" alt="image-20211025014416837"></p><h3 id="从节点配置" tabindex="-1"><a class="header-anchor" href="#从节点配置" aria-hidden="true">#</a> 从节点配置</h3><blockquote><p>配置说明：主要需要关注的几个属性： server-id：服务节点的唯一标识 relay-log：打开从服务的relay-log日志。 log-bin：打开从服务的bin-log日志记录。</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># /etc/my.cnf</span>\n<span class="token comment">#主库和从库需要不一致</span>\nserver-id<span class="token operator">=</span><span class="token number">48</span>\n<span class="token comment">#打开MySQL中继日志</span>\nrelay-log-index<span class="token operator">=</span>slave-relay-bin.index\nrelay-log<span class="token operator">=</span>slave-relay-bin\n\n<span class="token comment">#打开从服务二进制日志</span>\nlog-bin<span class="token operator">=</span>mysql-bin\n<span class="token comment">#使得更新的数据写进二进制日志中</span>\nlog-slave-updates<span class="token operator">=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#设置同步主节点：在mysql命令行中输入以下sql语句</span>\nCHANGE MASTER TO\n<span class="token assign-left variable">MASTER_HOST</span><span class="token operator">=</span><span class="token string">&#39;192.168.135.132&#39;</span>,       \n<span class="token assign-left variable">MASTER_PORT</span><span class="token operator">=</span><span class="token number">3306</span>,\n<span class="token assign-left variable">MASTER_USER</span><span class="token operator">=</span><span class="token string">&#39;root&#39;</span>,\n<span class="token assign-left variable">MASTER_PASSWORD</span><span class="token operator">=</span><span class="token string">&#39;Root.123456&#39;</span>,\n<span class="token assign-left variable">MASTER_LOG_FILE</span><span class="token operator">=</span><span class="token string">&#39;master-bin.000001&#39;</span>,\n<span class="token assign-left variable">MASTER_LOG_POS</span><span class="token operator">=</span><span class="token number">535</span>,\n<span class="token assign-left variable">GET_MASTER_PUBLIC_KEY</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">#开启slave</span>\nstart slave<span class="token punctuation">;</span>\n<span class="token comment">#查看主从同步状态</span>\nshow slave status<span class="token punctuation">;</span>\n或者用 show slave status <span class="token punctuation">\\</span>G<span class="token punctuation">;</span> 这样查看比较简洁\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><img src="/images/MySQL/image-20211025014803641.png" alt="image-20211025014803641"></p><p>配置完后重新启动mysql</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">service</span> mysqld restart\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="主从测试" tabindex="-1"><a class="header-anchor" href="#主从测试" aria-hidden="true">#</a> 主从测试</h2><p>测试时，我们先用<code>show databases</code>，查看下两个MySQL服务中的数据库情况</p><p><img src="/images/MySQL/image-20211025020248891.png" alt="image-20211025020248891"></p><p>然后我们在主服务器上创建一个数据库</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> syncdemo<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后我们再用show databases，来看下这个syncdemo的数据库是不是已经同步到了从服务。</p><p><img src="/images/MySQL/image-20211025020446698.png" alt="image-20211025020446698"></p><p>接下来我们继续在syncdemo这个数据库中创建一个表，并插入一条数据。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> syncdemo<span class="token punctuation">;</span>\n<span class="token keyword">Database</span> changed\nmysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> demoTable<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nQuery OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>\nmysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> demoTable <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nQuery OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然后我们也同样到主服务与从服务上都来查一下这个demoTable是否同步到了从服务。</p><p><img src="/images/MySQL/image-20211025020725019.png" alt="image-20211025020725019"></p><p>从上面的实验过程看到，我们在主服务中进行的数据操作，就都已经同步到了从服务上。这样，我们一个主从集群就搭建完成了。</p><blockquote><p>另外，这个主从架构是有可能失败的，如果在slave从服务上查看slave状态，发现Slave_SQL_Running=no，就表示主从同步失败了。这有可能是因为在从数据库上进行了写操作，与同步过来的SQL操作冲突了，也有可能是slave从服务重启后有事务回滚了。 如果是因为slave从服务事务回滚的原因，可以按照以下方式重启主从同步：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> stop slave <span class="token punctuation">;</span>\nmysql<span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> GLOBAL <span class="token assign-left variable">SQL_SLAVE_SKIP_COUNTER</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\nmysql<span class="token operator">&gt;</span> start slave <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>而另一种解决方式就是重新记录主节点的binlog文件消息</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> stop slave <span class="token punctuation">;</span>\nmysql<span class="token operator">&gt;</span> change master to <span class="token punctuation">..</span><span class="token punctuation">..</span>.\nmysql<span class="token operator">&gt;</span> start slave <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是这种方式要注意binlog的文件和位置，如果修改后和之前的同步接不上，那就会丢失部分数据。所以不太常用。</p></blockquote><hr><p>停止掉从节点，接着往主节点插入数据，当重新启动从节点后，仍然会同步数据</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">service</span> mysqld stop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="全库同步与部分同步" tabindex="-1"><a class="header-anchor" href="#全库同步与部分同步" aria-hidden="true">#</a> 全库同步与部分同步</h2><p>之前提到，我们目前配置的主从同步是针对全库配置的，而实际环境中，一般并不需要针对全库做备份，而只需要对一些特别重要的库或者表来进行同步。那如何、针对库和表做同步配置呢？</p><p>首先在Master端：在my.cnf中，可以通过以下这些属性指定需要针对哪些库或者哪些表记录binlog</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#需要同步的二进制数据库名</span>\nbinlog-do-db<span class="token operator">=</span>syncdemo\n<span class="token comment">#只保留7天的二进制日志，以防磁盘被日志占满(可选)</span>\nexpire-logs-days <span class="token operator">=</span> <span class="token number">7</span>\n<span class="token comment">#不备份的数据库</span>\nbinlog-ignore-db<span class="token operator">=</span>information_schema\nbinlog-ignore-db<span class="token operator">=</span>performation_schema\nbinlog-ignore-db<span class="token operator">=</span>sys\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show master status <span class="token punctuation">\\</span>G<span class="token punctuation">;</span>\n*************************** <span class="token number">1</span>. row ***************************\n             File: master-bin.000002\n         Position: <span class="token number">156</span>\n     Binlog_Do_DB: syncdemo\n Binlog_Ignore_DB: information_schema,performation_schema,sys\nExecuted_Gtid_Set:\n<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后在Slave端：在my.cnf中，需要配置备份库与主服务的库的对应关系。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#如果salve库名称与master库名相同，使用本配置</span>\nreplicate-do-db<span class="token operator">=</span>syncdemo\n<span class="token comment">#如果master库名[mastdemo]与salve库名[mastdemo01]不同，使用以下配置[需要做映射]</span>\nreplicate-rewrite-db<span class="token operator">=</span>syncdemo -<span class="token operator">&gt;</span> syncdemo01\n<span class="token comment">#如果不是要全部同步[默认全部同步]，则指定需要同步的表</span>\nreplicate-wild-do-table<span class="token operator">=</span>masterdemo01.t_dict\nreplicate-wild-do-table<span class="token operator">=</span>masterdemo01.t_num\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="/images/MySQL/image-20211025023356777.png" alt="image-20211025023356777"></p><p>向同步的库syncdemo，继续写入数据，发现是同步的，而新建一个数据库，则发现没有同步过去</p><p><img src="/images/MySQL/image-20211025023841827.png" alt="image-20211025023841827"></p><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment"># 在mysql从节点中操作</span>\n<span class="token comment"># 停止从节点</span>\nstop slave\n<span class="token comment"># 重置从节点</span>\nreset slave\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',61),l={},p=(0,a(66262).A)(l,[["render",function(s,n){return e}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);