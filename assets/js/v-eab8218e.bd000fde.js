"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[22022],{76941:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-eab8218e",path:"/mybatis/15%20MyBatis%E6%BA%90%E7%A0%81%E2%9D%A4%EF%B8%8F.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/mybatis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"MyBatis整体架构图",slug:"mybatis整体架构图",children:[]},{level:2,title:"Mybatis的启动",slug:"mybatis的启动",children:[]},{level:2,title:"Mybatis配置文件解析",slug:"mybatis配置文件解析",children:[]},{level:2,title:"执行Sql流程",slug:"执行sql流程",children:[]}],filePathRelative:"mybatis/15 MyBatis源码❤️.md"}},75970:(a,n,s)=>{s.r(n),s.d(n,{default:()=>m});var e=s(20641);const t=(0,e.Lk)("blockquote",null,[(0,e.Lk)("p",null,"基于springboot来分析mybatis的工作流程")],-1),p=(0,e.Lk)("h2",{id:"mybatis整体架构图",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#mybatis整体架构图","aria-hidden":"true"},"#"),(0,e.eW)(" MyBatis整体架构图")],-1),i={href:"https://github.com/Q10Viking/learncode/tree/main/mybatis/_11_springboot_mybatis_source_code",target:"_blank",rel:"noopener noreferrer"},l={href:"https://www.processon.com/view/link/5f5075eaf346fb7afd409dd6",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Fv)('<p><img src="/images/mybatis/1520" alt="img"></p><p><img src="/images/mybatis/1522" alt="img"></p><p>总结下就是分为下面四个步骤：</p><ul><li>从配置文件（通常是XML文件）得到SessionFactory;</li><li>从SessionFactory得到SqlSession；</li><li>通过SqlSession进行CRUD和事务的操作；</li><li>执行完相关操作之后关闭Session。</li></ul><h2 id="mybatis的启动" tabindex="-1"><a class="header-anchor" href="#mybatis的启动" aria-hidden="true">#</a> Mybatis的启动</h2><p>对于MyBatis启动的流程（获取SqlSession的过程）这边简单总结下：</p><ul><li>SqlSessionFactoryBuilder解析配置文件，包括属性配置、别名配置、拦截器配置、环境（数据源和事务管理器）、Mapper配置等；解析完这些配置后会生成一个Configration对象，这个对象中包含了MyBatis需要的所有配置，然后会用这个Configration对象创建一个SqlSessionFactory对象，这个对象中包含了Configration对象；</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSessionFactory</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="mybatis配置文件解析" tabindex="-1"><a class="header-anchor" href="#mybatis配置文件解析" aria-hidden="true">#</a> Mybatis配置文件解析</h2><p>最重要的类Configuration.</p>',10),c={href:"https://www.processon.com/view/link/642d1c4ff83a045cbc146e41",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Fv)('<p>springboot中注解方式的接口mapper解析是在创建MapperFactoryBean的实例的时候通过afterPropertiesSet</p><p>MapperFactoryBean实现了Springboot-tx的DaoSuport这个抽象类实现了InitializingBean接口。在Bean的生命周期中会调用afterPropertiesSet这个方法。MapperFactoryBean实现了checkDaoConfig，就在这个方法里处理注解mapper的解析。</p><p>最后解析成MappedStatement</p><p><img src="/images/mybatis/image-20230405145003012.png" alt="image-20230405145003012"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from test&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Test</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="/images/mybatis/image-20230405145705035.png" alt="image-20230405145705035"></p><h2 id="执行sql流程" tabindex="-1"><a class="header-anchor" href="#执行sql流程" aria-hidden="true">#</a> 执行Sql流程</h2>',7),u={href:"https://www.processon.com/view/link/642d3962847e3938662d69f6",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>testMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">&quot;org.hzz.mapper.TestMapper.selectAll&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),b={href:"https://www.processon.com/view/link/5efc23966376891e81f2a37e",target:"_blank",rel:"noopener noreferrer"},d={},m=(0,s(66262).A)(d,[["render",function(a,n){const s=(0,e.g2)("OutboundLink"),d=(0,e.g2)("common-progresson-snippet");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,p,(0,e.Lk)("p",null,[(0,e.Lk)("a",i,[(0,e.eW)("Source Code"),(0,e.bF)(s)])]),(0,e.Lk)("p",null,[(0,e.Lk)("a",l,[(0,e.eW)("MyBatis源码体系"),(0,e.bF)(s)])]),(0,e.bF)(d,{src:"https://www.processon.com/view/link/5f5075eaf346fb7afd409dd6"}),o,(0,e.Lk)("p",null,[(0,e.Lk)("a",c,[(0,e.eW)("Link"),(0,e.bF)(s)])]),(0,e.bF)(d,{src:"https://www.processon.com/view/link/642d1c4ff83a045cbc146e41"}),r,(0,e.Lk)("p",null,[(0,e.Lk)("a",u,[(0,e.eW)("Link"),(0,e.bF)(s)])]),(0,e.bF)(d,{src:"https://www.processon.com/view/link/642d3962847e3938662d69f6"}),k,(0,e.Lk)("p",null,[(0,e.Lk)("a",b,[(0,e.eW)("link"),(0,e.bF)(s)])]),(0,e.bF)(d,{src:"https://www.processon.com/view/link/5efc23966376891e81f2a37e"})],64)}]])},66262:(a,n)=>{n.A=(a,n)=>{const s=a.__vccOpts||a;for(const[a,e]of n)s[a]=e;return s}}}]);