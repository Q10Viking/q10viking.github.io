"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[94215],{23962:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-42699ccc",path:"/springsecurity/13%20%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/springsecurity/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"同域单点登录",slug:"同域单点登录",children:[{level:3,title:"核心原理：",slug:"核心原理",children:[]}]},{level:2,title:"跨域登录",slug:"跨域登录",children:[{level:3,title:"核心原理",slug:"核心原理-1",children:[]},{level:3,title:"spring security oauth2实现",slug:"spring-security-oauth2实现",children:[]},{level:3,title:"流程分析",slug:"流程分析",children:[]}]}],filePathRelative:"springsecurity/13 单点登录.md"}},17298:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(20641);const t=(0,e.Fv)('<h2 id="同域单点登录" tabindex="-1"><a class="header-anchor" href="#同域单点登录" aria-hidden="true">#</a> 同域单点登录</h2><p>适用场景：都是企业自己的系统，所有系统都使用同一个一级域名通过不同的二级域名来区分</p><p><img src="/images/springsecurity/56798" alt="img"></p><h3 id="核心原理" tabindex="-1"><a class="header-anchor" href="#核心原理" aria-hidden="true">#</a> 核心原理：</h3><ol><li>门户系统设置 Cookie 的 domain 为一级域名也就是 zlt.com，这样就可以共享门户的 Cookie 给所有的使用该域名(xxx.zlt.com)的系统</li><li>使用 Spring Session 等技术让所有系统共享 Session</li><li>这样只要门户系统登录之后无论跳转应用1或者应用2，都能通过门户 Cookie 中的 sessionId 读取到 Session 中的登录信息实现单点登录</li></ol><h2 id="跨域登录" tabindex="-1"><a class="header-anchor" href="#跨域登录" aria-hidden="true">#</a> 跨域登录</h2><p><img src="/images/springsecurity/56814" alt="img"></p><h3 id="核心原理-1" tabindex="-1"><a class="header-anchor" href="#核心原理-1" aria-hidden="true">#</a> 核心原理</h3><ol><li>访问系统1判断未登录，则跳转到UAA系统请求授权</li><li>在UAA系统域名 sso.com 下的登录地址中输入用户名/密码完成登录</li><li>登录成功后UAA系统把登录信息保存到 Session 中，并在浏览器写入域为 sso.com 的 Cookie</li><li>访问系统2判断未登录，则跳转到UAA系统请求授权</li><li>由于是跳转到UAA系统的域名 sso.com 下，所以能通过浏览器中UAA的 Cookie 读取到 Session 中之前的登录信息完成单点登录</li></ol><h3 id="spring-security-oauth2实现" tabindex="-1"><a class="header-anchor" href="#spring-security-oauth2实现" aria-hidden="true">#</a> spring security oauth2实现</h3>',10),p={href:"https://github.com/Q10Viking/springcloudalibaba/tree/main/sso",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Fv)('<p>Oauth2单点登录除了需要授权中心完成统一登录/授权逻辑之外，各个系统本身(sso客户端)也需要实现以下逻辑：</p><ol><li>拦截请求判断登录状态</li><li>与 UAA授权中心 通过 Oauth2授权码模式 交互完成登录/单点登录</li><li>保存用户登录信息</li></ol><p>以上逻辑只需使用一个 @EnableOAuth2Sso 注解即可实现</p><p>客户端的配置</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>\n  <span class="token comment">#防止Cookie冲突，冲突会导致登录验证不通过</span>\n  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>\n    <span class="token key atrule">session</span><span class="token punctuation">:</span>\n      <span class="token key atrule">cookie</span><span class="token punctuation">:</span>\n        <span class="token key atrule">name</span><span class="token punctuation">:</span> OAUTH2<span class="token punctuation">-</span>CLIENT<span class="token punctuation">-</span>SESSIONID$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>\n\n<span class="token comment">#与授权服务器对应的配置</span>\n<span class="token key atrule">security</span><span class="token punctuation">:</span>\n  <span class="token key atrule">oauth2</span><span class="token punctuation">:</span>\n    <span class="token key atrule">client</span><span class="token punctuation">:</span>\n      <span class="token key atrule">client-id</span><span class="token punctuation">:</span> client\n      <span class="token key atrule">client-secret</span><span class="token punctuation">:</span> <span class="token number">123123</span>\n      <span class="token key atrule">user-authorization-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//sso.com<span class="token punctuation">:</span>8080/oauth/authorize\n      <span class="token key atrule">access-token-uri</span><span class="token punctuation">:</span>  http<span class="token punctuation">:</span>//sso.com<span class="token punctuation">:</span>8080/oauth/token\n    <span class="token key atrule">resource</span><span class="token punctuation">:</span>\n      <span class="token key atrule">token-info-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//sso.com<span class="token punctuation">:</span>8080/oauth/check_token\n<span class="token comment">#      jwt:</span>\n<span class="token comment">#        key-uri: ${oauth2-server-url}/oauth/token_key</span>\n\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在启动类上添加@EnableOAuth2Sso注解来启用单点登录功能</p><p>@EnableOAuth2Sso单点登录的原理简单来说就是：标注有@EnableOAuth2Sso的OAuth2 Client应用在通过某种OAuth2授权流程获取访问令牌后（一般是授权码流程），通过访问令牌访问userDetails用户明细这个受保护资源服务，获取用户信息后，将用户信息转换为Spring Security上下文中的认证后凭证Authentication，从而完成标注有@EnableOAuth2Sso的OAuth2 Client应用自身的登录认证的过程。整个过程是基于OAuth2的SSO单点登录</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableOAuth2Sso</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client2Application</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Client2Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="流程分析" tabindex="-1"><a class="header-anchor" href="#流程分析" aria-hidden="true">#</a> 流程分析</h3>',9),o={href:"https://www.processon.com/view/link/64104128eb191b58c3f31178",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Lk)("p",null,[(0,e.Lk)("img",{src:"/images/springsecurity/SSO.png",alt:"SSO"})],-1),c=(0,e.Lk)("p",null,"系统webapp.com重定向登录了sso.com的网站浏览器此时就记录了sso.com的cookie信息，系统zlt.com再次登录时也会重定向到sso.com登录时就会携带上一次的cookie来进行登录（此时sso.com已经有了登录的session）所以不用再输入用户名和密码",-1),r=(0,e.Lk)("p",null,[(0,e.Lk)("img",{src:"/images/springsecurity/image-20230314174011459.png",alt:"image-20230314174011459"})],-1),u={},k=(0,a(66262).A)(u,[["render",function(n,s){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,(0,e.Lk)("p",null,[(0,e.Lk)("a",p,[(0,e.eW)("Source Code"),(0,e.bF)(a)])]),l,(0,e.Lk)("p",null,[(0,e.Lk)("a",o,[(0,e.eW)("ProgressOn"),(0,e.bF)(a)])]),i,c,r],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);