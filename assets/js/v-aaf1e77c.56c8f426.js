"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[54919],{66148:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-aaf1e77c",path:"/rabbitmq/12%20%E6%B6%88%E6%81%AF%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92%E5%9C%A8Spring%E7%9A%84%E8%90%BD%E5%9C%B0%E5%AE%9E%E7%8E%B0.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/rabbitmq/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"丢失原因分析",slug:"丢失原因分析",children:[]},{level:2,title:"",slug:"",children:[]},{level:2,title:"生产端",slug:"生产端",children:[{level:3,title:"在Spring中实现",slug:"在spring中实现",children:[]}]},{level:2,title:"消费端",slug:"消费端",children:[{level:3,title:"ack方式",slug:"ack方式",children:[]},{level:3,title:"在Spring中实现",slug:"在spring中实现-1",children:[]}]},{level:2,title:"消息持久化机制（RabbitMQ 服务）",slug:"消息持久化机制-rabbitmq-服务",children:[{level:3,title:"",slug:"-1",children:[]}]},{level:2,title:"消息可靠性总结",slug:"消息可靠性总结",children:[]}],filePathRelative:"rabbitmq/12 消息可靠性投递在Spring的落地实现.md"}},25674:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const t=(0,s(20641).Fv)('<h2 id="丢失原因分析" tabindex="-1"><a class="header-anchor" href="#丢失原因分析" aria-hidden="true">#</a> 丢失原因分析</h2><p>rabbitmq 整个消息投递的路径为：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>producer<span class="token operator">--</span><span class="token operator">-&gt;</span>rabbitmq broker<span class="token operator">--</span><span class="token operator">-&gt;</span>exchange<span class="token operator">--</span><span class="token operator">-&gt;</span>queue<span class="token operator">--</span><span class="token operator">-&gt;</span>consumer   ⭐\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>从上述流程我们可以得知：消息从生产者到达消费者，经过两次网络传输，并且在 RabbitMQ 服务器中进行路由。</p><p>因此我们能知道整个流程中可能会出现三种消息丢失场景：</p><ul><li>生产者发送消息到 RabbitMQ 服务器的过程中出现消息丢失。 可能是网络波动未收到消息，又或者是服务器宕机。</li><li>RabbitMQ 服务器消息持久化出现消息丢失。 消息发送到 RabbitMQ 之后，未能及时存储完成持久化，RabbitMQ 服务器出现宕机重启，消息出现丢失。</li><li>消费者拉取消息过程以及拿到消息后出现消息丢失。 消费者从 RabbitMQ 服务器获取到消息过程出现网络波动等问题可能出现消息丢失；消费者拿到消息后但是消费者未能正常消费，导致丢失，可能是消费者出现处理异常又或者是消费者宕机。</li></ul><p>针对上述三种消息丢失场景，RabbitMQ 提供了相应的解决方案，confirm 消息确认机制（生产者），消息持久化机制（RabbitMQ 服务），ACK 事务机制（消费者）</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h2 id="生产端" tabindex="-1"><a class="header-anchor" href="#生产端" aria-hidden="true">#</a> 生产端</h2><p>在使用 RabbitMQ 的时候，作为消息发送方希望杜绝任何消息丢失或者投递失败场景。RabbitMQ 为我们提供了两种方式用来控制消息的投递可靠性模式。</p><ul><li><p>confirm 确认模式</p></li><li><p>return 退回模式</p></li></ul><h3 id="在spring中实现" tabindex="-1"><a class="header-anchor" href="#在spring中实现" aria-hidden="true">#</a> 在Spring中实现</h3><pre><code>- 消息从 producer 到 exchange 则会返回一个 confirmCallback\n- 消息从 exchange--&gt;queue 投递失败则会返回一个 returnCallback \n</code></pre><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>    <span class="token comment">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">rabbit:</span>connection-factory</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>connectionFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${rabbitmq.host}<span class="token punctuation">&quot;</span></span>\n                               <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${rabbitmq.port}<span class="token punctuation">&quot;</span></span>\n                               <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${rabbitmq.username}<span class="token punctuation">&quot;</span></span>\n                               <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${rabbitmq.password}<span class="token punctuation">&quot;</span></span>\n                               <span class="token attr-name">virtual-host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${rabbitmq.virtual-host}<span class="token punctuation">&quot;</span></span>\n                               <span class="token attr-name">publisher-confirms</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">⭐</span>\n                               <span class="token attr-name">publisher-returns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>   <span class="token attr-name">⭐</span>\n    <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="confirm确认模式" tabindex="-1"><a class="header-anchor" href="#confirm确认模式" aria-hidden="true">#</a> confirm确认模式</h4><ul><li><p>设置ConnectionFactory的publisher-confirms=&quot;true&quot; 开启 确认模式。</p></li><li><p>使用rabbitTemplate.<strong>setConfirmCallback</strong>设置回调函数。当消息发送到exchange后回调confirm方法。在方法中判断ack，如果为true，则发送成功，如果为false，则发送失败，需要处理。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//定义回调</span>\nrabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n             *\n             * <span class="token keyword">@param</span> <span class="token parameter">correlationData</span> 相关配置信息\n             * <span class="token keyword">@param</span> <span class="token parameter">ack</span>   exchange交换机 是否成功收到了消息。true 成功，false代表失败\n             * <span class="token keyword">@param</span> <span class="token parameter">cause</span> 失败原因\n             */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name">String</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;confirm方法被执行了....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//ack 为  true表示 消息已经到达交换机</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//接收成功</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收成功消息&quot;</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">//接收失败</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收失败消息&quot;</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//做一些处理，让消息再次发送。</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></li></ul><h4 id="return回退模式" tabindex="-1"><a class="header-anchor" href="#return回退模式" aria-hidden="true">#</a> return回退模式</h4><ol><li>设置ConnectionFactory的publisher-returns=&quot;true&quot; 开启 退回模式</li><li>使用rabbitTemplate.setReturnCallback设置退回函数，当消息从exchange路由到queue失败后，如果设置了**rabbitTemplate.setMandatory(true)参数，则会将消息退回给producer。并执行回调函数returnedMessage。**⭐</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//设置交换机处理失败消息的模式   为true的时候，消息达到不了 队列时，会将消息重新返回给生产者</span>\nrabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//定义回调</span>\nrabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n             *\n             * <span class="token keyword">@param</span> <span class="token parameter">message</span>   消息对象\n             * <span class="token keyword">@param</span> <span class="token parameter">replyCode</span> 错误码\n             * <span class="token keyword">@param</span> <span class="token parameter">replyText</span> 错误信息\n             * <span class="token keyword">@param</span> <span class="token parameter">exchange</span>  交换机\n             * <span class="token keyword">@param</span> <span class="token parameter">routingKey</span> 路由键\n             */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> <span class="token class-name">String</span> replyText<span class="token punctuation">,</span> <span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;return 执行了....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;message:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;replyCode:&quot;</span><span class="token operator">+</span>replyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;replyText:&quot;</span><span class="token operator">+</span>replyText<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;exchange:&quot;</span><span class="token operator">+</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;routingKey:&quot;</span><span class="token operator">+</span>routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//处理</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="消费端" tabindex="-1"><a class="header-anchor" href="#消费端" aria-hidden="true">#</a> 消费端</h2><h3 id="ack方式" tabindex="-1"><a class="header-anchor" href="#ack方式" aria-hidden="true">#</a> ack方式</h3><p>ack指Acknowledge，确认。 <strong>表示消费端收到消息后的确认方式。</strong></p><p>有三种确认方式：</p><ul><li><p>自动确认：acknowledge=&quot;none&quot;</p></li><li><p>手动确认：acknowledge=&quot;manual&quot;</p></li><li><p>根据异常情况确认：acknowledge=&quot;auto&quot;，（这种方式使用麻烦，不作讲解）</p></li></ul><p>⭐⭐⭐⭐⭐</p><p><strong>其中自动确认是指，当消息一旦被Consumer接收到，则自动确认收到，并将相应 message 从 RabbitMQ 的消息缓存中移除。但是在实际业务处理中，很可能消息接收到，业务处理出现异常，那么该消息就会丢失⭐⭐。</strong></p><p><strong>如果设置了手动确认方式，则需要在业务处理成功后，调用channel.basicAck()，手动签收，如果出现异常，则调用channel.basicNack()方法，拒绝签收，让其自动重新发送消息。</strong></p><p>​ ⭐⭐注意<strong>拒绝签收时</strong>basicNack的第三个参数设置为<strong>requeue=true</strong>时，会将当前处理的消息重新发回给Rabbitmq.缺点，如果业务一直异常，是会造成不断的循环的。为false时，则会丢弃消息。</p><p>一般出现异常的时候，会把该消息保存起来，保存到数据库，或者写到日志文件⭐</p><hr><h3 id="在spring中实现-1" tabindex="-1"><a class="header-anchor" href="#在spring中实现-1" aria-hidden="true">#</a> 在Spring中实现</h3><ol><li>设置为acknowledge手动签收</li></ol><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>    <span class="token comment">&lt;!--定义监听器容器\n      acknowledge=&quot;manual&quot;:手动签收\n      prefetch=&quot;1&quot;:每次抓取多少条消息\n    --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">rabbit:</span>listener-container</span> <span class="token attr-name">connection-factory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>connectionFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">acknowledge</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manual<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prefetch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li><p>实现ChannelAwareMessageListener，为了拿到channel,进行签收操作</p><ol><li>如果在消费端没有出现异常，则调用channel.basicAck(deliveryTag,false);方法确认签收消息</li><li>如果出现异常，则在catch中调用 basicNack或 basicReject，拒绝消息，让MQ重新发送消息</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AckListener</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelAwareMessageListener</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">//1、获取消息的id</span>\n        <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n\n\n        <span class="token comment">//2、获取消息</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;message:&quot;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//3、进行业务处理</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=====进行业务处理====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//模拟出现异常</span>\n        <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//4、进行消息签收</span>\n        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token comment">//拒绝签收</span>\n             <span class="token comment">/*\n              * 第三个参数：requeue：重回队列。如果设置为true，则消息重新回到queue，broker会重新发送该消息给消费端⭐\n             */</span>\n            channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div></li><li><p>设置监听的队列</p></li></ol><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">rabbit:</span>listener-container</span> <span class="token attr-name">connection-factory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>connectionFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">acknowledge</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manual<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prefetch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">rabbit:</span>listener</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ackListener<span class="token punctuation">&quot;</span></span> <span class="token attr-name">queue-names</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_queue_confirm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">rabbit:</span>listener</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">rabbit:</span>listener-container</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="消息持久化机制-rabbitmq-服务" tabindex="-1"><a class="header-anchor" href="#消息持久化机制-rabbitmq-服务" aria-hidden="true">#</a> 消息持久化机制（RabbitMQ 服务）</h2><p>持久化机制是指将消息存储到磁盘，以保证在 RabbitMQ 服务器宕机或重启时，消息不会丢失。</p><p><strong>使用方法：</strong></p><ul><li>生产者通过将消息的 <strong>delivery_mode</strong> 属性设置为 2，将消息标记为持久化。</li><li>队列也需要进行持久化设置，确保队列在 RabbitMQ 服务器重启后仍然存在。经典队列需要将durable属性设置为true。而仲裁队列和流式队列默认必须持久化保存。</li></ul><p><strong>注意事项：</strong></p><ul><li>持久化机制会影响性能，因此在需要确保消息不丢失的场景下使用。</li></ul><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h3><h2 id="消息可靠性总结" tabindex="-1"><a class="header-anchor" href="#消息可靠性总结" aria-hidden="true">#</a> 消息可靠性总结</h2><ol><li><p>持久化</p><ul><li>exchange要持久化</li><li>queue要持久化</li><li>message要持久化</li></ul></li><li><p>生产方确认Confirm</p></li><li><p>消费方确认Ack</p></li><li><p>Broker高可用</p></li></ol>',44),p={},e=(0,s(66262).A)(p,[["render",function(n,a){return t}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);