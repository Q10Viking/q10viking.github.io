"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[34125],{83412:(e,t,a)=>{a.r(t),a.d(t,{data:()=>i});const i={key:"v-4672cc4f",path:"/sentinel/02%20%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%B5%81%E9%87%8F%E5%A4%A7%E9%97%AE%E9%A2%98.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/sentinel/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"分布式系统遇到的问题",slug:"分布式系统遇到的问题",children:[]},{level:2,title:"解决方案",slug:"解决方案",children:[{level:3,title:"超时机制",slug:"超时机制",children:[]},{level:3,title:"服务限流(资源隔离)",slug:"服务限流-资源隔离",children:[]},{level:3,title:"服务熔断",slug:"服务熔断",children:[]},{level:3,title:"服务降级",slug:"服务降级",children:[]}]}],filePathRelative:"sentinel/02 分布式系统流量大问题.md"}},55401:(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});const i=(0,a(20641).Fv)('<h2 id="分布式系统遇到的问题" tabindex="-1"><a class="header-anchor" href="#分布式系统遇到的问题" aria-hidden="true">#</a> <strong>分布式系统遇到的问题</strong></h2><p>在一个高度服务化的系统中,我们实现的一个业务逻辑通常会依赖多个服务,比如:商品详情展示服务会依赖商品服务, 价格服务, 商品评论服务. 如图所示:</p><p><img src="/images/sentinel/53027.png" alt="https://note.youdao.com/yws/public/resource/7ccbbecd48d3f995e3e36aab39a11049/xmlnote/63638D74A85741A999219AA534AFF572/53027"></p><p>调用三个依赖服务会共享商品详情服务的线程池. 如果其中的商品评论服务不可用, 就会出现线程池里所有线程都因等待响应而被阻塞, 从而造成服务雪崩. 如图所示:</p><p><img src="/images/sentinel/53030.png" alt="https://note.youdao.com/yws/public/resource/7ccbbecd48d3f995e3e36aab39a11049/xmlnote/53EA64A915BC4938A294B545BA0C9B4E/53030"></p><blockquote><p>服务雪崩效应：因服务提供者的不可用导致服务调用者的不可用,并将不可用逐渐放大的过程，就叫服务雪崩效应</p></blockquote><p>导致服务不可用的原因： 程序Bug，大流量请求，硬件故障，缓存击穿</p><ul><li><strong>大流量请求</strong>：在秒杀和大促开始前,如果准备不充分,瞬间大量请求会造成服务提供者的不可用。</li><li><strong>硬件故障</strong>：可能为硬件损坏造成的服务器主机宕机, 网络硬件故障造成的服务提供者的不可访问。</li><li><strong>缓存击穿</strong>：一般发生在缓存应用重启, 缓存失效时高并发，所有缓存被清空时,以及短时间内大量缓存失效时。大量的缓存不命中, 使请求直击后端,造成服务提供者超负荷运行,引起服务不可用</li></ul><p>在服务提供者不可用的时候，会出现大量重试的情况：用户重试、代码逻辑重试，这些重试最终导致：进一步加大请求流量。所以归根结底导致雪崩效应的最根本原因是：大量请求线程同步等待造成的资源耗尽。当服务调用者使用同步调用时, 会产生大量的等待线程占用系统资源。一旦线程资源被耗尽,服务调用者提供的服务也将处于不可用状态, 于是服务雪崩效应产生了。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><h3 id="超时机制" tabindex="-1"><a class="header-anchor" href="#超时机制" aria-hidden="true">#</a> <strong>超时机制</strong></h3><p>在不做任何处理的情况下，服务提供者不可用会导致消费者请求线程强制等待，而造成系统资源耗尽。加入超时机制，一旦超时，就释放资源。由于释放资源速度较快，一定程度上可以抑制资源耗尽的问题。</p><h3 id="服务限流-资源隔离" tabindex="-1"><a class="header-anchor" href="#服务限流-资源隔离" aria-hidden="true">#</a> <strong>服务限流(资源隔离)</strong></h3><p>限制请求核心服务提供者的流量，使大流量拦截在核心服务之外，这样可以更好的保证核心服务提供者不出问题，对于一些出问题的服务可以限制流量访问，只分配固定线程资源访问，这样能使整体的资源不至于被出问题的服务耗尽，进而整个系统雪崩。那么服务之间怎么限流，怎么资源隔离？例如可以通过线程池+队列的方式，通过信号量的方式</p><p>如下图所示, 当商品评论服务不可用时, 即使商品服务独立分配的20个线程全部处于同步等待状态,也不会影响其他依赖服务的调用。</p><p>​ <img src="/images/sentinel/53026.png" alt="0"></p><h3 id="服务熔断" tabindex="-1"><a class="header-anchor" href="#服务熔断" aria-hidden="true">#</a> 服务熔断</h3><p>远程服务不稳定或网络抖动时暂时关闭，就叫服务熔断。</p><p>现实世界的断路器大家肯定都很了解，断路器实时监控电路的情况，如果发现电路电流异常，就会跳闸，从而防止电路被烧毁。</p><p>软件世界的断路器可以这样理解：实时监测应用，如果发现在一定时间内失败次数/失败率达到一定阈值，就“跳闸”，断路器打开——此时，请求直接返回，而不去调用原本调用的逻辑。跳闸一段时间后（例如10秒），断路器会进入半开状态，这是一个瞬间态，此时允许一次请求调用该调的逻辑，如果成功，则断路器关闭，应用正常调用；如果调用依然不成功，断路器继续回到打开状态，过段时间再进入半开状态尝试——通过”跳闸“，应用可以保护自己，而且避免浪费资源；而通过半开的设计，可实现应用的“自我修复“。</p><p>所以，同样的道理，当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源。比如我们设置了超时时间为1s,如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个依赖了，这个时候就应该使用断路器避免资源浪费。</p><p>​ <img src="/images/sentinel/53029.png" alt="0"></p><h3 id="服务降级" tabindex="-1"><a class="header-anchor" href="#服务降级" aria-hidden="true">#</a> 服务降级</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>有服务熔断，必然要有服务降级。</p></div><p>所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据) 。这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景</p>',25),r={},n=(0,a(66262).A)(r,[["render",function(e,t){return i}]])},66262:(e,t)=>{t.A=(e,t)=>{const a=e.__vccOpts||e;for(const[e,i]of t)a[e]=i;return a}}}]);