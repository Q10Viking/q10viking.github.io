"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[41847],{89717:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-77912de6",path:"/webdev/01%20node%E5%9C%A8web%E7%9A%84%E5%BA%94%E7%94%A8.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/webdev/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"什么是 Node.js",slug:"什么是-node-js",children:[]},{level:2,title:"Node.js工作原理",slug:"node-js工作原理",children:[]},{level:2,title:"Node.js REPL",slug:"node-js-repl",children:[]},{level:2,title:"创建node项目",slug:"创建node项目",children:[{level:3,title:"脚本scripts",slug:"脚本scripts",children:[]},{level:3,title:"type属性",slug:"type属性",children:[]}]},{level:2,title:"Node包",slug:"node包",children:[{level:3,title:"npm 注册表和工具",slug:"npm-注册表和工具",children:[]},{level:3,title:"生产依赖项与开发依赖项",slug:"生产依赖项与开发依赖项",children:[]},{level:3,title:"查看包",slug:"查看包",children:[]},{level:3,title:"清理依赖项",slug:"清理依赖项",children:[]}]},{level:2,title:"依赖更新",slug:"依赖更新",children:[{level:3,title:"语义化版本控制",slug:"语义化版本控制",children:[]},{level:3,title:"为更新配置 package.json",slug:"为更新配置-package-json",children:[]},{level:3,title:"查找和更新过时的包",slug:"查找和更新过时的包",children:[]}]},{level:2,title:"npm镜像配置",slug:"npm镜像配置",children:[]},{level:2,title:"yarn镜像配置",slug:"yarn镜像配置",children:[]},{level:2,title:"版本",slug:"版本",children:[]}],filePathRelative:"webdev/01 node在web的应用.md"}},19784:(n,e,s)=>{s.r(e),s.d(e,{default:()=>w});var a=s(20641);const t=(0,a.Lk)("h2",{id:"什么是-node-js",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#什么是-node-js","aria-hidden":"true"},"#"),(0,a.eW)(" 什么是 Node.js")],-1),o={href:"https://learn.microsoft.com/zh-cn/training/modules/intro-to-nodejs/2-what",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Lk)("p",null,"Node.js（简称 Node）是开源服务器端 JavaScript 运行时环境。 可以使用 Node.js 在浏览器以外的多个位置（例如服务器上）运行 JavaScript 应用程序和代码。",-1),l={href:"https://nodejs.dev/learn/the-v8-javascript-engine",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Fv)('<p>随着单页应用程序的兴起，JavaScript 变得越来越重要，并支持广泛使用的 JavaScript 对象表示法 (JSON) 数据交换格式。 许多 NoSQL 数据库技术（例如 CouchDB 和 MongoDB）也将 JavaScript 和 JSON 用作查询和架构格式。 Node.js 使用许多新式服务和框架所使用的语言和技术。</p><p>可以使用 Node.js 生成以下类型的应用程序：</p><ul><li>HTTP Web 服务器</li><li>微服务或无服务器 API 后端</li><li>用于数据库访问和查询的驱动程序</li><li>交互式命令行接口</li><li>桌面应用程序</li><li>实时物联网 (IoT) 客户端和服务器库</li><li>适用于桌面应用程序的插件</li><li>用于文件处理或网络访问的 Shell 脚本</li><li>机器学习库和模型</li></ul><blockquote><p>Node.js 环境还提供了一个 npm 注册表，可用于共享你自己的 Node.js 库</p></blockquote><h2 id="node-js工作原理" tabindex="-1"><a class="header-anchor" href="#node-js工作原理" aria-hidden="true">#</a> Node.js工作原理</h2><blockquote><p>Node.js 使用单个事件循环处理并发任务。适合：应用需要非阻止、事件驱动的服务器。</p></blockquote>',6),r={href:"https://learn.microsoft.com/zh-cn/training/modules/intro-to-nodejs/3-how-works?pivots=windows",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Lk)("p",null,"Node通过事件驱动的方式处理请求时无需为每一个请求创建额外的线程。在事件驱动的模型当中，每一个IO工作被添加到事件队列中，线程循环地处理队列上的工作任务，当执行过程中遇到来堵塞(读取文件、查询数据库)时，线程不会停下来等待结果，而是留下一个处理结果的回调函数，转而继续执行队列中的下一个任务。这个传递到队列中的回调函数在堵塞任务运行结束后才被线程调用",-1),d={href:"https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Fv)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;/file.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// blocks here until file is read</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">moreWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will run after console.log</span>\n\n<span class="token comment">// And here is a similar, but not equivalent asynchronous example:</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/file.md&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">moreWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will run before console.log</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="/images/webdev/event-loop.svg" alt="显示 Node.js 如何使用事件驱动的体系结构的关系图，其中的事件循环处理业务流程，辅助角色池阻止任务。"></p><h2 id="node-js-repl" tabindex="-1"><a class="header-anchor" href="#node-js-repl" aria-hidden="true">#</a> Node.js REPL</h2><p>Node.js 具有内置的读取–求值–打印循环 (REPL) 模式，<strong>可用于快速代码计算和试验</strong></p><p><img src="/images/webdev/image-20220924121812577.png" alt="image-20220924121812577"></p><p>也可以执行脚本</p><p><img src="/images/webdev/image-20220924122207686.png" alt="image-20220924122207686"></p><h2 id="创建node项目" tabindex="-1"><a class="header-anchor" href="#创建node项目" aria-hidden="true">#</a> 创建node项目</h2>',8),m={href:"https://learn.microsoft.com/zh-cn/training/paths/build-javascript-applications-nodejs/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/Q10Viking/learncode/tree/main/node/01%20package%20config",target:"_blank",rel:"noopener noreferrer"},k=(0,a.Fv)('<p>package.json 文件不是你手动创作的内容， 这是运行 npm <code>init</code> 命令的结果。 可以通过两种主要方法运行此命令：</p><ul><li><code>npm init</code>：此命令启动一个向导，该向导将提示你提供有关项目的名称、版本、说明、入口点、测试命令、Git 存储库、关键字、作者和许可证的信息。</li><li><code>npm init -y</code>：此命令使用 <code>-y</code> 标志，是 <code>npm init</code> 命令的更快版本，因为它不需要交互。 相反，此命令会使用 <code>npm init</code> 自动为系统提示你输入的所有值分配默认值。</li></ul><h3 id="脚本scripts" tabindex="-1"><a class="header-anchor" href="#脚本scripts" aria-hidden="true">#</a> 脚本scripts</h3><p>你应该设置四个脚本，并以特定方式对其命名。 开发人员社区和各种工具期望以下特定名称：</p><ul><li><code>start</code>：使用条目文件作为参数调用 <code>node</code>。 示例：<code>node ./src/index.js</code>。 此操作调用 <code>node</code> 命令并使用条目文件 <code>index.js</code>。</li><li><code>build</code>：说明如何生成项目。 生成过程应生成一些可交付的内容。 例如，build 命令可以运行 TypeScript 编译器以生成要交付的项目的 JavaScript 版本。</li><li><code>test</code>：运行项目的测试。 如果使用第三方测试库，则该命令应调用库的可执行文件。</li><li><code>lint</code>：调用类似 ESLint 的 Linter 程序。 Lint 分析可查找代码中不一致的内容。 Linter 通常还提供一种方法来更正不一致。 具有一致的代码可以极大地提高其可读性，进而加速功能的开发和代码的添加。</li></ul><div class="language-cmd ext-cmd line-numbers-mode"><pre class="language-cmd"><code>&quot;scripts&quot; : {\n  &quot;&lt;action&gt;&quot; : &quot;&lt;command&gt;&quot;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>你可以通过输入命令 <code>npm run &lt;action&gt;</code> 来调用操作。 例如 <code>npm run lint</code>。</p><p><code>start</code> 和 <code>test</code> 操作特殊在于你可以在命令中省略单词 <code>run</code>。 你可以输入 <code>npm start</code>，而不是输入命令 <code>npm run start</code>。</p></div><h3 id="type属性" tabindex="-1"><a class="header-anchor" href="#type属性" aria-hidden="true">#</a> type属性</h3>',8),h={href:"https://nodejs.org/api/modules.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://nodejs.org/api/esm.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://bobbyhadz.com/blog/javascript-error-err-module-not-found-cannot-find-module",target:"_blank",rel:"noopener noreferrer"},f=(0,a.Fv)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Another thing to look out for is that when using ES6 module imports with <code>type</code> set to <code>module</code>, you are not allowed to use the <code>require</code> syntax anymore.</p></div><p><img src="/images/concurrency/image-20220925161632338.png" alt="image-20220925161632338"></p><h2 id="node包" tabindex="-1"><a class="header-anchor" href="#node包" aria-hidden="true">#</a> Node包</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Node.js 附带许多核心库，可处理从文件管理到 HTTP 再到压缩文件等各种任务。 但是，还存在巨大的第三方库生态系统。 得益于 npm（节点包管理器），你可以轻松地安装这些库并在应用程序中使用它们</p></div><h3 id="npm-注册表和工具" tabindex="-1"><a class="header-anchor" href="#npm-注册表和工具" aria-hidden="true">#</a> npm 注册表和工具</h3><p>运行 <code>npm install &lt; name of dependency &gt;</code> 时，Node.js 会转到称为 npm 注册表的全局注册表，并查找要下载的代码。 它位于 <code>http://npmjs.org</code>。 在浏览器中，还可以查看包的此页面。 该站点保存包：源代码的压缩版本。 每个包都有可以访问的专用网站。 可在这些网站上详细了解源代码所在的位置，并查找其他信息，例如有关下载的指标和有关维护的信息。</p><h3 id="生产依赖项与开发依赖项" tabindex="-1"><a class="header-anchor" href="#生产依赖项与开发依赖项" aria-hidden="true">#</a> 生产依赖项与开发依赖项</h3><ul><li><strong>生产依赖项</strong>：生产依赖项是应用程序投入生产时需要运行的依赖项。 必须在应用程序中内置生产依赖项，以便在应用程序运行时该功能可用。 示例包括一个可用于生成 Web 应用程序的 Web 框架。</li><li><strong>开发依赖项</strong>：开发依赖项是仅在开发应用程序时需要的依赖项。 可将这些依赖项视为修建建筑物时使用的脚手架。 完成修建后，你便不再需要它们了。 这些依赖项的示例包括测试库、Lint 分析工具或捆绑工具。 这些依赖项是确保应用程序正常运行的重要部分，但你不需要随应用程序一起提供。</li></ul><p>这种分离不仅是概念上的。 当你下载依赖项时，npm 工具会将条目添加到清单文件中以此来写入。 借助此工具，可通过将标志添加到安装命令来区分这两种类型的依赖项。 此标志将依赖项的名称及其版本放置在一个名为 <code>dependencies</code> 或 <code>devDependencies</code> 的部分。 这种区别可清楚地分离应用程序中的依赖项及其类型。 无论安装哪种类型的依赖项，它都存储在 node_modules 目录中。 该标志仅影响清单文件。</p><p>这种分离不同类型依赖项的方式还会内置于 npm 命令行工具中。 如果在安装依赖项时指定了 <code>--production</code> 标志，则只会安装生产 <code>dependencies</code>。 例如，持续集成和持续部署 (CI/CD) 管道使用此标志来确保仅安装运行应用所需的依赖项。</p><p>运行 <code>npm install &lt;dependency name&gt;</code> 命令以安装要用作应用程序一部分的正常依赖项。 开发人员依赖项是指不会交付到生产环境中的内容。 要安装开发人员依赖项，请添加 <code>--save-dev</code> 标志。</p><p>如果全局安装某些包，则其不会安装在项目的 node_modules 文件夹中。 而是安装在特定于计算机的目录中，因此可用于计算机上的所有 Node.js 项目。 要安装全局包，请将 <code>-g</code> 标志添加到 <code>install command</code>，因此该命令类似于 <code>npm install &lt;dependency name&gt; -g</code>。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 生产依赖</span>\n<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>dependency name<span class="token operator">&gt;</span>\n<span class="token comment"># 开发者依赖</span>\n<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>dependency name<span class="token operator">&gt;</span> --save-dev\n<span class="token comment"># 简写方式</span>\n<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>dependency name<span class="token operator">&gt;</span> <span class="token parameter variable">-D</span>\n<span class="token comment"># 全局依赖</span>\n<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>dependency name<span class="token operator">&gt;</span> <span class="token parameter variable">-g</span>\n<span class="token comment"># 如 npm install -g @vue/cli</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 案例安装开发者依赖，依赖和参数顺序不严格要求</span>\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev --save-exact prettier\n<span class="token function">npm</span> <span class="token function">install</span> prettier <span class="token parameter variable">-D</span> --save-exact\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>补充：</p><p>npm <code>install</code> and <code>add</code> are aliases. <strong>The <code>--save</code> option is deprecated.</strong></p>',16),y={href:"https://docs.npmjs.com/cli/install",target:"_blank",rel:"noopener noreferrer"},j=(0,a.Lk)("code",null,"--save",-1),x=(0,a.Fv)('<h3 id="查看包" tabindex="-1"><a class="header-anchor" href="#查看包" aria-hidden="true">#</a> 查看包</h3><p>在 package.json 文件的 <code>dependencies</code> 部分中列出的包不同于在 node_modules 文件夹中列出的包。 如果需要查看文件夹中的包，可以输入 <code>npm list</code> 命令。 但是，此命令可能会生成一个较长的列表。 可能很难掌握其中的内容。 为了帮助解决这个问题，可以列出不同深度的包。 执行此操作时，<code>list</code> 命令如下所示：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm list --depth=&lt;depth&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>深度为 <code>0</code> 时，该命令将列出与 package.json 的 <code>dependencies</code> 部分中相同的内容。</p><h3 id="清理依赖项" tabindex="-1"><a class="header-anchor" href="#清理依赖项" aria-hidden="true">#</a> 清理依赖项</h3><p>可以通过两种方法清理不再需要的依赖项：</p><ul><li><strong>卸载</strong>：要卸载包，请运行 <code>npm uninstall &lt;name of dependency&gt;</code>。 此命令不仅将从清单文件中删除包，还会从 node_modules 文件夹中删除包。</li><li><strong>删除</strong>：还可以运行 <code>npm prune</code> 命令。 通过运行此命令，可删除 node_modules 文件夹中未在清单文件中作为依赖项列出的所有依赖项。 如果要删除多个依赖项，并且不想为每个依赖项运行 <code>uninstall</code> 命令，则此命令是一个不错的选择。 要使用此命令删除未使用的依赖项，请先从清单文件的 <code>dependencies</code> 或 <code>devDependencies</code> 部分删除条目，然后运行 <code>npm prune</code> 命令。</li></ul><h2 id="依赖更新" tabindex="-1"><a class="header-anchor" href="#依赖更新" aria-hidden="true">#</a> 依赖更新</h2><h3 id="语义化版本控制" tabindex="-1"><a class="header-anchor" href="#语义化版本控制" aria-hidden="true">#</a> 语义化版本控制</h3><p>语义化版本控制是指如何表达你或其他开发人员向库引入的更改类型。 语义化版本控制的工作原理是确保包具有版本号，并且该版本号划分为以下部分：</p><ul><li>主版本：最左边的数字。 例如，1.0.0 中的 1。 此数字发生更改意味着代码可能出现中断性变更。 可能需要重写部分代码。</li><li>次要版本：中间的数字。 例如，1.2.0 中的 2。 此数字发生更改意味着添加了新功能。 你的代码仍可正常工作。 接受更新通常是安全的。</li><li>修补程序版本：最右边的数字。 例如，1.2.3 中的 3。 此数字发生更改意味着应用了一个更改，修复了代码中应正常工作的内容。 接受更新应是安全的。</li></ul><p>下表显示了每个版本类型的版本号如何更改：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">发生的更改</th></tr></thead><tbody><tr><td style="text-align:left;">主版本</td><td style="text-align:left;">1.0.0 更改为 2.0.0</td></tr><tr><td style="text-align:left;">次要版本</td><td style="text-align:left;">1.2.9 更改为 1.3.0</td></tr><tr><td style="text-align:left;">修补程序版本</td><td style="text-align:left;">1.0.7 更改为 1.0.8</td></tr></tbody></table><h3 id="为更新配置-package-json" tabindex="-1"><a class="header-anchor" href="#为更新配置-package-json" aria-hidden="true">#</a> 为更新配置 package.json</h3><p>在更新一个或多个依赖项之前，应配置清单文件，以便在运行 <code>npm update &lt;name of dependency&gt;</code> 命令时获得可预测的行为。 你可传达要对包采取的方法。 Node.js 包含一组符号，允许你定义包的更新方式。</p><p>此过程是向 package.json 文件中的包条目添加不同的前缀</p><p>下面是可为主版本/次要版本/修补程序版本配置的一些模式：</p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">更新级别</th></tr></thead><tbody><tr><td style="text-align:left;">x.0.0 或 *（星号）</td><td style="text-align:left;">更新到最高主版本。</td></tr><tr><td style="text-align:left;">1.x.1 或 ^（插入符）</td><td style="text-align:left;">仅更新到次要版本。</td></tr><tr><td style="text-align:left;">1.1.x 或 ~（波浪号）</td><td style="text-align:left;">更新到最新修补程序版本。</td></tr></tbody></table><h3 id="查找和更新过时的包" tabindex="-1"><a class="header-anchor" href="#查找和更新过时的包" aria-hidden="true">#</a> 查找和更新过时的包</h3><p><code>pm outdated</code> 命令列出了已过时的包。 此命令可帮助识别何时有更新版本的包可用。 以下是命令的典型输出：</p><p><img src="/images/webdev/image-20220924221415007.png" alt="image-20220924221415007"></p><p>输出中的列包括：</p><ul><li>包：已过时的包。</li><li>当前版本：当前安装的包版本。</li><li>所需版本：与在 package.json 文件中指定的语义模式匹配的最新版本。</li><li>最新版本：包的最新版本。</li><li>位置：包依赖项的位置。 <code>outdated</code> 命令会遍历各 node_modules 文件夹中的所有已安装的包。</li><li>依赖方：具有依赖项的包。</li></ul><p>建议的工作流是按以下顺序运行这些命令：</p><ol><li>运行 <code>npm outdated</code> 命令以列出所有已过时的包。 此命令提供“所需版本”、“最新版本”和“位置”列中的信息。</li><li>运行 <code>npm update &lt;optional package name&gt;</code> 命令以更新已安装的包。 如果使用指定的包名称运行此命令，则该命令会尝试仅更新指定的包。 如果未指定包，则该命令会尝试更新 package.json 中的所有包。</li></ol><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h4><p>package.json 文件，查看 <code>dependencies</code> 部分</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.1.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;node-fetch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.6.1&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="/images/webdev/image-20220924221925846.png" alt="image-20220924221925846"></p><p>你可以比较放心地将已过时的包更新到所需版本。 此更新级别可确保依赖项获得该次要版本中的最新功能和修补程序。 运行以下命令以进行更新：(只要 package.json 文件中的模式允许，就已经升级了依赖项。但是不会改变package.json的内容，还是指定的样子)</p><p><img src="/images/webdev/image-20220924222204794.png" alt="image-20220924222204794"></p><p>通过运行 <code>npm install &lt;name of package&gt;@&lt;known latest version&gt;</code> 命令或使用 <code>latest</code> 关键字 (<code>npm install &lt;name of package&gt;@latest</code>) 来安装最新版本。(会改变package.json的内容)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> node-fetch@latest lodash@latest\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.17.21&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;node-fetch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.2.10&quot;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="npm镜像配置" tabindex="-1"><a class="header-anchor" href="#npm镜像配置" aria-hidden="true">#</a> npm镜像配置</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> config get registry  <span class="token comment"># 默认是https://registry.npmjs.org/</span>\n<span class="token comment"># 配置成国内镜像</span>\n<span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token assign-left variable">registry</span><span class="token operator">=</span>https://registry.npmmirror.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="yarn镜像配置" tabindex="-1"><a class="header-anchor" href="#yarn镜像配置" aria-hidden="true">#</a> yarn镜像配置</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>PS C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span><span class="token number">11930</span><span class="token punctuation">\\</span>Desktop<span class="token punctuation">\\</span>docker<span class="token punctuation">\\</span>getting-started<span class="token punctuation">\\</span>app<span class="token operator">&gt;</span> <span class="token function">yarn</span> config get registry\nhttps://registry.yarnpkg.com\nPS C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span><span class="token number">11930</span><span class="token punctuation">\\</span>Desktop<span class="token punctuation">\\</span>docker<span class="token punctuation">\\</span>getting-started<span class="token punctuation">\\</span>app<span class="token operator">&gt;</span> <span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>尽管配置了国内镜像，还是会出现：<code>info There appears to be trouble with your network connection. Retrying...</code> 的问题</p>',39),L={href:"https://github.com/yarnpkg/yarn/issues/4890",target:"_blank",rel:"noopener noreferrer"},N=(0,a.Fv)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">install</span> --network-timeout <span class="token number">1000000</span>\n<span class="token comment"># 添加超时时间</span>\n<span class="token function">yarn</span> <span class="token function">install</span> <span class="token parameter variable">--production</span> --network-timeout <span class="token number">1000000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="版本" tabindex="-1"><a class="header-anchor" href="#版本" aria-hidden="true">#</a> 版本</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token parameter variable">-v</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',3),q={},w=(0,s(66262).A)(q,[["render",function(n,e){const s=(0,a.g2)("OutboundLink");return(0,a.uX)(),(0,a.CE)(a.FK,null,[t,(0,a.Lk)("blockquote",null,[(0,a.Lk)("p",null,[(0,a.Lk)("a",o,[(0,a.eW)("什么是 Node.js？ - Training | Microsoft Learn"),(0,a.bF)(s)])])]),p,(0,a.Lk)("p",null,[(0,a.eW)("Node.js 是名为 "),(0,a.Lk)("a",l,[(0,a.eW)("V8"),(0,a.bF)(s)]),(0,a.eW)(" 的 JavaScript 引擎的包装器，它支持许多浏览器，包括 Google Chrome、Opera 和 Microsoft Edge。 通过在浏览器外使用 V8 引擎，可以使用 Node.js 来运行 JavaScript。 Node.js 还包含在服务器上运行的应用程序可能需要的许多 V8 优化。 例如，Node.js 添加了“缓冲区”类，使 V8 可以处理文件。 这使 Node.js 成为了构建 Web 服务器等的不错选择。")]),c,(0,a.Lk)("p",null,[(0,a.Lk)("a",r,[(0,a.eW)("Node.js 的工作原理 - Training | Microsoft Learn"),(0,a.bF)(s)])]),i,(0,a.Lk)("p",null,[(0,a.Lk)("a",d,[(0,a.eW)("Overview of Blocking vs Non-Blocking | Node.js (nodejs.org)"),(0,a.bF)(s)])]),u,(0,a.Lk)("p",null,[(0,a.Lk)("a",m,[(0,a.eW)("使用 Node.js 构建 JavaScript 应用程序 - Training | Microsoft Learn"),(0,a.bF)(s)])]),(0,a.Lk)("p",null,[(0,a.Lk)("a",g,[(0,a.eW)("Source Code"),(0,a.bF)(s)])]),k,(0,a.Lk)("p",null,[(0,a.eW)("Node.js supports "),(0,a.Lk)("a",h,[(0,a.eW)("CommonJS Modules"),(0,a.bF)(s)]),(0,a.eW)(" and "),(0,a.Lk)("a",b,[(0,a.eW)("ECMAScript Modules"),(0,a.bF)(s)]),(0,a.eW)(".")]),(0,a.Lk)("p",null,[(0,a.Lk)("a",v,[(0,a.eW)("Cannot find module in JS "),(0,a.bF)(s)])]),f,(0,a.Lk)("p",null,[(0,a.eW)("Since NPM 5, packages are saved automatically; "),(0,a.Lk)("a",y,[(0,a.eW)("there is no "),j,(0,a.eW)(" option"),(0,a.bF)(s)]),(0,a.eW)(".")]),x,(0,a.Lk)("p",null,[(0,a.eW)("解决方案"),(0,a.Lk)("a",L,[(0,a.eW)("There appears to be trouble with your network connection. Retrying... · Issue #4890 · yarnpkg/yarn (github.com)"),(0,a.bF)(s)])]),N],64)}]])},66262:(n,e)=>{e.A=(n,e)=>{const s=n.__vccOpts||n;for(const[n,a]of e)s[n]=a;return s}}}]);