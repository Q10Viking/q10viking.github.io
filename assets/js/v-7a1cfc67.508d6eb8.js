"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[16392],{3945:(a,s,n)=>{n.r(s),n.d(s,{data:()=>p});const p={key:"v-7a1cfc67",path:"/Algorithm/160%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Algorithm/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Hash求解",slug:"hash求解",children:[]},{level:2,title:"双指针",slug:"双指针",children:[]}],filePathRelative:"Algorithm/160 相交链表.md"}},34911:(a,s,n)=>{n.r(s),n.d(s,{default:()=>r});var p=n(20641);const e={class:"custom-container tip"},t=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),o={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Fv)('<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt="img"></p><h2 id="hash求解" tabindex="-1"><a class="header-anchor" href="#hash求解" aria-hidden="true">#</a> Hash求解</h2><p>使用Hash表求解，具体方法是：</p><p>1、选择结点较少的链表(如果链表的长度是未知的，那么随便选择一个链表)，将其所有结点的指针值保存在Hash表中。</p><p>2、遍历另一个链表，对于该链表中的每一个结点，检查Hash表中是否已经保存了其结点指针。</p><p>3、如果两个链表存在合并点，那么必定会在Hash表中找到记录(结点指针)。</p><p>时间复杂度为:第一个链表创建散列表的时间开销加上扫描第二个链表的时间开销，等于O(m)+O(n)(或O(n)+O(m))，取决于选择哪个链表来建立散列表)。这两种情况具有的算法时间复杂度是相同的。空间复杂度为O(n)或O(m)。</p><h2 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h2><p>创建两个指针 pA 和 pB，初始时分别指向两个链表的头节点 ，然后将两个指针依次遍历两个链表的每个节点。具体做法如下：</p><p>每步操作需要同时更新指针 pA 和 pB。</p><p>如果指针 pA 不为空，则将指针pA 移到下一个节点；如果指针 pB 不为空，则将指针pB 移到下一个节点。</p><p>如果指针 pA 为空，则将指针 pA 移到链表headB 的头节点；如果指针 pB 为空，则将指针pB 移到链表headA 的头节点。</p><p>当指针 pA 和pB 指向同一个节点或者都为空时，返回它们指向的节点或者 null。</p><p><img src="/images/algorithm/image-20230923195132076.png" alt="image-20230923195132076"></p><p><img src="/images/algorithm/image-20230923195142876.png" alt="image-20230923195142876"></p><p><img src="/images/algorithm/image-20230923195158061.png" alt="image-20230923195158061"></p><p><img src="/images/algorithm/image-20230923195206825.png" alt="image-20230923195206825"></p><blockquote><p>总结下来就是，走过你走过的路程</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ListNode</span> a <span class="token operator">=</span> headA<span class="token punctuation">,</span>b <span class="token operator">=</span> headB<span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            a <span class="token operator">=</span> a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span> headB<span class="token operator">:</span>a<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            b <span class="token operator">=</span> b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span> headA<span class="token operator">:</span>b<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> a<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',19),c={},r=(0,n(66262).A)(c,[["render",function(a,s){const n=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",e,[t,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("160. 相交链表 - 力扣（LeetCode）"),(0,p.bF)(n)])])]),l],64)}]])},66262:(a,s)=>{s.A=(a,s)=>{const n=a.__vccOpts||a;for(const[a,p]of s)n[a]=p;return n}}}]);