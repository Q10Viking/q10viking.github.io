"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[50487],{96360:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-f1f40990",path:"/java/60%20Bigdecimal%E4%B8%8Elong.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/java/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Bigdecimal",slug:"bigdecimal",children:[{level:3,title:"使用BigDecimal的构造函数传入浮点数",slug:"使用bigdecimal的构造函数传入浮点数",children:[]},{level:3,title:"陷阱 equals",slug:"陷阱-equals",children:[]},{level:3,title:"小结",slug:"小结",children:[]},{level:3,title:"四舍五入",slug:"四舍五入",children:[]}]},{level:2,title:"金额用long还是BigDecimal",slug:"金额用long还是bigdecimal",children:[]}],filePathRelative:"java/60 Bigdecimal与long.md"}},71229:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const t=(0,s(20641).Fv)('<h2 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal" aria-hidden="true">#</a> Bigdecimal</h2><p><strong>BigDecimal 是 Java 中的一个类，用于精确表示和操作任意精度的十进制数。它提供了高精度的数值计算，并且可以避免浮点数计算中常见的精度丢失问题。</strong><strong>它提供了大量的方法来支持基本的数学运算，如加法、减法、乘法、除法等。它还支持比较操作和取整操作，可以设置小数位数、舍入模式等。此外，BigDecimal 还提供了一些其他功能，如转换为科学计数法、格式化输出、判断是否是整数等。</strong><strong>适用场景：需要处理精确计算或防止浮点数计算精度丢失的场景</strong></p><h3 id="使用bigdecimal的构造函数传入浮点数" tabindex="-1"><a class="header-anchor" href="#使用bigdecimal的构造函数传入浮点数" aria-hidden="true">#</a> 使用BigDecimal的构造函数传入浮点数</h3><p><strong>其实这个问题我们在使用Float、Double等浮点类型进行计算时，也会经常遇到，比如说下面这个代码</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bigDecimalDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">float</span> float1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">float</span> float2 <span class="token operator">=</span> <span class="token number">0.9f</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>float1 <span class="token operator">-</span> float2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>输出结果是多少呢？0.1？不是，输出结果是0.100000024。因为 0.9 无法被精确表示为有限位数的二进制小数。在转换为二进制时可能会产生近似值。因此，在进行减法运算时，实际上是对近似值进行计算，而不是对准确的 0.9 进行计算。这导致了精度丢失，最终的计算结果也是一个近似值。因此，输出结果不是准确的 0.1，而是一个近似值。</strong><strong>小伙伴肯定能想到使用BigDecimal来避免这个问题，这时候第一个需要避免的陷阱就来了。看以下代码</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bigDecimalDemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;bigDecimal1 = &quot;</span> <span class="token operator">+</span> bigDecimal1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;bigDecimal2 = &quot;</span> <span class="token operator">+</span> bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>输出结果如下：</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>bigDecimal1 <span class="token operator">=</span> <span class="token number">0.01000000000000000020816681711721685132943093776702880859375</span>\nbigDecimal2 <span class="token operator">=</span> <span class="token number">0.01</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>观察输出结果我们可以知道，使用BigDecimal时同样会有精度的问题。所以我们在创建BigDecimal对象时，有初始值使用BigDecimal.valueOf()的方式，可以避免出现精度问题</strong></p><h3 id="陷阱-equals" tabindex="-1"><a class="header-anchor" href="#陷阱-equals" aria-hidden="true">#</a> 陷阱 equals</h3><p>日常项目我们是如何进行BigDecimal数值比较呢？使用equals方法还是compareTo方法？如果使用的是equals方法，那就需要注意啦。看一下示例</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bigDecimalDemo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.010&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigDecimal1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigDecimal1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>输出结果如下</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>false\n0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>观察结果可以知道使用equals比较结果是不相等的；compareTo的结果为0代表两个数相等；</p><ul><li>compareTo实现了Comparable接口，比较的是值的大小，返回的值为-1-小于，0-等于，1-大于。</li></ul><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ul><li>使用BigDecimal.valueOf来处理精度，内部会使用字符串，防止精度丢失</li><li>比较用compareTo</li></ul><h3 id="四舍五入" tabindex="-1"><a class="header-anchor" href="#四舍五入" aria-hidden="true">#</a> 四舍五入</h3><p>使用BigDecimal进行运算时，一定要正确的使用舍入模式，避免舍入误差引起的问题，并且有时候出现结果是无限小数，程序会抛出异常，比如说</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bigDecimalDemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1.00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;3.00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal3 <span class="token operator">=</span> bigDecimal1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigDecimal3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>报错：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>简单的来说，如果在除法运算过程中，其结果是一个无限小数，而操作的结果预期是一个精确的数字，那么将会抛出ArithmeticException异常 此时，我们只要正确指定结果精度即可：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bigDecimalDemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1.00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;3.00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BigDecimal</span> bigDecimal3 <span class="token operator">=</span> bigDecimal1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigDecimal3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.33</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>● RoundingMode.UP：向远离零的方向舍入\n● RoundingMode.DOWN：向靠近零的方向舍入\n● RoundingMode.CEILING：向正无穷方向舍入\n● RoundingMode.FLOOR：向负无穷方向舍入\n● RoundingMode.HALF_UP：四舍五入，如果舍弃部分大于等于 0.5\n● RoundingMode.HALF_DOWN：四舍五入，如果舍弃部分大于 0.5\n● RoundingMode.HALF_EVEN：银行家舍入法，遵循 IEEE 754 标准\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="金额用long还是bigdecimal" tabindex="-1"><a class="header-anchor" href="#金额用long还是bigdecimal" aria-hidden="true">#</a> 金额用long还是BigDecimal</h2><p>首先float和double肯定是排除的，因为它们内部使用科学计数法，转换二进制的时候有可能出现无限小数位的问题</p><p>那么大家就会选择Long和BigDecimal， Long类型在存储时(比如保留2位小数点)x100, 取出来/100。</p><p>其实本质都是一样的，都是避免使用浮点数进行表达，只是Long属于隐式设定小数点，BigDecimal属于显示设定小数点。</p><p>我的建议是： 在代码层面用**BigDecimal ，**数据库层面可视情况定</p><p>首先long性能更好：</p><ul><li>整数类型（如 <strong>long</strong>）通常在计算机硬件上的性能更好，因为它们的操作可以在硬件层面上更有效地执行。</li><li><strong>BigDecimal</strong> 需要额外的空间和计算开销。</li></ul><p><img src="/images/java/1706533593289-04bb4fa9-ab67-45da-ae32-433843c76619.png" alt="image.png"></p><blockquote><p>阿里的java开发手册是推荐用分存储的，希望大家都能用Long存储分，照顾一下彼此的开发体验。 “8.【强制】任何货币金额，均以最小货币单位且为整型类型进行存储。”</p><p>但是对于一些金融系统要求小数点位数要求比较多， 比如精确后六位， 如果每次存x1000000 那long类型的内存开销也荡然无存了也会降低可读性即易用性， 不如用Decimal。</p><p><strong>所以数据库在需求阶段能确定小数点位数可以用long， 如果位数不确定，或者要求太精准可以用DECIMAL</strong></p></blockquote><p>java类型对应mysql中类型</p><ul><li>long-&gt;INTEGER</li><li>BigDecimal-&gt;DECIMAL</li></ul><table><thead><tr><th>类型名称</th><th>显示长度</th><th>数据库类型</th><th>JAVA类型</th><th>JDBC类型索引(int)</th></tr></thead><tbody><tr><td>VARCHAR</td><td>L+N</td><td>VARCHAR</td><td>java.lang.String</td><td>12</td></tr><tr><td>CHAR</td><td>N</td><td>CHAR</td><td>java.lang.String</td><td>1</td></tr><tr><td>BLOB</td><td>L+N</td><td>BLOB</td><td>java.lang.byte[]</td><td>-4</td></tr><tr><td>TEXT</td><td>65535</td><td>VARCHAR</td><td>java.lang.String</td><td>-1</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>INTEGER</td><td>4</td><td>INTEGER UNSIGNED</td><td>java.lang.Long</td><td>4</td></tr><tr><td>TINYINT</td><td>3</td><td>TINYINT UNSIGNED</td><td>java.lang.Integer</td><td>-6</td></tr><tr><td>SMALLINT</td><td>5</td><td>SMALLINT UNSIGNED</td><td>java.lang.Integer</td><td>5</td></tr><tr><td>MEDIUMINT</td><td>8</td><td>MEDIUMINT UNSIGNED</td><td>java.lang.Integer</td><td>4</td></tr><tr><td>BIT</td><td>1</td><td>BIT</td><td>java.lang.Boolean</td><td>-7</td></tr><tr><td>BIGINT</td><td>20</td><td>BIGINT UNSIGNED</td><td>java.math.BigInteger</td><td>-5</td></tr><tr><td>FLOAT</td><td>4+8</td><td>FLOAT</td><td>java.lang.Float</td><td>7</td></tr><tr><td>DOUBLE</td><td>22</td><td>DOUBLE</td><td>java.lang.Double</td><td>8</td></tr><tr><td>DECIMAL</td><td>11</td><td>DECIMAL</td><td>java.math.BigDecimal</td><td>3</td></tr><tr><td>BOOLEAN</td><td>1</td><td>同TINYINT</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>ID</td><td>11</td><td>PK (INTEGER UNSIGNED)</td><td>java.lang.Long</td><td>4</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>DATE</td><td>10</td><td>DATE</td><td>java.sql.Date</td><td>91</td></tr><tr><td>TIME</td><td>8</td><td>TIME</td><td>java.sql.Time</td><td>92</td></tr><tr><td>DATETIME</td><td>19</td><td>DATETIME</td><td>java.sql.Timestamp</td><td>93</td></tr><tr><td>TIMESTAMP</td><td>19</td><td>TIMESTAMP</td><td>java.sql.Timestamp</td><td>93</td></tr><tr><td>YEAR</td><td>4</td><td>YEAR</td><td>java.sql.Date</td><td>91</td></tr></tbody></table>',39),e={},p=(0,s(66262).A)(e,[["render",function(n,a){return t}]])},66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);