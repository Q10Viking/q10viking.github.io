"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[41763],{69388:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2c780c5c",path:"/seata/06%20seata%20%E6%9C%8D%E5%8A%A1%E7%AB%AFNetty%E5%AF%B9TC%E4%BA%8B%E5%8A%A1%E5%8D%8F%E8%B0%83%E8%80%85%E7%9A%84%E9%80%9A%E4%BF%A1%E6%94%AF%E6%8C%81.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"seata netty支持TC事务协调者通信基础分析",slug:"seata-netty支持tc事务协调者通信基础分析",children:[]},{level:2,title:"Seata rpc远程调用的协议",slug:"seata-rpc远程调用的协议",children:[]}],filePathRelative:"seata/06 seata 服务端Netty对TC事务协调者的通信支持.md"}},79918:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(20641).Fv)('<h2 id="seata-netty支持tc事务协调者通信基础分析" tabindex="-1"><a class="header-anchor" href="#seata-netty支持tc事务协调者通信基础分析" aria-hidden="true">#</a> seata netty支持TC事务协调者通信基础分析</h2><p>RPC的形式</p><p>https://www.processon.com/view/link/629cdc125653bb03f2c8bfca</p><h2 id="seata-rpc远程调用的协议" tabindex="-1"><a class="header-anchor" href="#seata-rpc远程调用的协议" aria-hidden="true">#</a> Seata rpc远程调用的协议</h2><p>使用定长来解决粘包拆包问题</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>* 0     1     2     3     4     5     6     7     8     9    10     11    12    13    14    15    16\n * +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n * |   magic   |Proto|     Full length       |    Head   | Msg |Seria|Compr|     RequestId         |\n * |   code    |colVer|    (head+body)       |   Length  |Type |lizer|ess  |                       |\n * +-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+\n * |                                                                                               |\n * |                                   Head Map [Optional]                                         |\n * +-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+\n * |                                                                                               |\n * |                                         body                                                  |\n * |                                                                                               |\n * |                                        ... ...                                                |\n * +-----------------------------------------------------------------------------------------------+\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>解码成RpcMessage</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// io.seata.core.rpc.netty.v1.ProtocolV1Decoder#decodeFrame</span>\n<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">decodeFrame</span><span class="token punctuation">(</span><span class="token class-name">ByteBuf</span> frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">byte</span> b0 <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">byte</span> b1 <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ProtocolConstants</span><span class="token punctuation">.</span><span class="token constant">MAGIC_CODE_BYTES</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> b0\n            <span class="token operator">||</span> <span class="token class-name">ProtocolConstants</span><span class="token punctuation">.</span><span class="token constant">MAGIC_CODE_BYTES</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> b1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown magic code: &quot;</span> <span class="token operator">+</span> b0 <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">byte</span> version <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// TODO  check version compatible here</span>\n\n    <span class="token keyword">int</span> fullLength <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// int 占据四个字节</span>\n    <span class="token keyword">short</span> headLength <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// short 占据2字节</span>\n    <span class="token keyword">byte</span> messageType <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">byte</span> codecType <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">byte</span> compressorType <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> requestId <span class="token operator">=</span> frame<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">RpcMessage</span> rpcMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rpcMessage<span class="token punctuation">.</span><span class="token function">setCodec</span><span class="token punctuation">(</span>codecType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rpcMessage<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rpcMessage<span class="token punctuation">.</span><span class="token function">setCompressor</span><span class="token punctuation">(</span>compressorType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rpcMessage<span class="token punctuation">.</span><span class="token function">setMessageType</span><span class="token punctuation">(</span>messageType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// direct read head with zero-copy</span>\n    <span class="token keyword">int</span> headMapLength <span class="token operator">=</span> headLength <span class="token operator">-</span> <span class="token class-name">ProtocolConstants</span><span class="token punctuation">.</span><span class="token constant">V1_HEAD_LENGTH</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>headMapLength <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">HeadMapSerializer</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> headMapLength<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        rpcMessage<span class="token punctuation">.</span><span class="token function">getHeadMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// read body</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>messageType <span class="token operator">==</span> <span class="token class-name">ProtocolConstants</span><span class="token punctuation">.</span><span class="token constant">MSGTYPE_HEARTBEAT_REQUEST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        rpcMessage<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token class-name">HeartbeatMessage</span><span class="token punctuation">.</span><span class="token constant">PING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>messageType <span class="token operator">==</span> <span class="token class-name">ProtocolConstants</span><span class="token punctuation">.</span><span class="token constant">MSGTYPE_HEARTBEAT_RESPONSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        rpcMessage<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token class-name">HeartbeatMessage</span><span class="token punctuation">.</span><span class="token constant">PONG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> bodyLength <span class="token operator">=</span> fullLength <span class="token operator">-</span> headLength<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>bodyLength <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>bodyLength<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            frame<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Compressor</span> compressor <span class="token operator">=</span> <span class="token class-name">CompressorFactory</span><span class="token punctuation">.</span><span class="token function">getCompressor</span><span class="token punctuation">(</span>compressorType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            bs <span class="token operator">=</span> compressor<span class="token punctuation">.</span><span class="token function">decompress</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Serializer</span> serializer <span class="token operator">=</span> <span class="token class-name">EnhancedServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Serializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SerializerType</span><span class="token punctuation">.</span><span class="token function">getByCode</span><span class="token punctuation">(</span>rpcMessage<span class="token punctuation">.</span><span class="token function">getCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            rpcMessage<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>serializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> rpcMessage<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div>',8),t={},e=(0,a(66262).A)(t,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);