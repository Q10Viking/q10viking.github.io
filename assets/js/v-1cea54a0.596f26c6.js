"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[33482],{35269:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-1cea54a0",path:"/typescript/12%20Decorators.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/typescript/"}},excerpt:"",headers:[{level:2,title:"Decorator",slug:"decorator",children:[]},{level:2,title:"Decorator Factory⭐",slug:"decorator-factory",children:[]},{level:2,title:"Meta Programming⭐",slug:"meta-programming",children:[]},{level:2,title:"Decorator使用的位置",slug:"decorator使用的位置",children:[]},{level:2,title:"Returning (and changing) a class when a Class Decorator⭐",slug:"returning-and-changing-a-class-when-a-class-decorator",children:[]},{level:2,title:"Returing a PropertyDescriptor when a method decorator⭐",slug:"returing-a-propertydescriptor-when-a-method-decorator",children:[]},{level:2,title:"Decorator use as Validator ⭐",slug:"decorator-use-as-validator",children:[]}],filePathRelative:"typescript/12 Decorators.md"}},89360:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var t=a(20641);const p=(0,t.Fv)('<h2 id="decorator" tabindex="-1"><a class="header-anchor" href="#decorator" aria-hidden="true">#</a> Decorator</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>配置中允许 <strong>&quot;experimentalDecorators&quot;: true</strong></p></div><p><strong>Decorator的执行时机是在定义的地方，而不是类实例化的时候</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 传入的参数constructor取决于decorator使用在哪里，这里是构造函数</span>\n<span class="token keyword">function</span> <span class="token function">Logging</span><span class="token punctuation">(</span>constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;logging...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// decorator会在类定义的地方执行</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Logging</span></span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;静默&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="decorator-factory" tabindex="-1"><a class="header-anchor" href="#decorator-factory" aria-hidden="true">#</a> Decorator Factory⭐</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>使得Decorator更加可配置化</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">Logging</span><span class="token punctuation">(</span>logString<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>constructor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>logString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n<span class="token comment">// decorator会在类定义的地方执行</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Logging</span></span><span class="token punctuation">(</span><span class="token string">&quot;LOGGING - Person&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;静默&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="meta-programming" tabindex="-1"><a class="header-anchor" href="#meta-programming" aria-hidden="true">#</a> Meta Programming⭐</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>模仿Angular的形式</p></div>',9),e=(0,t.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-typescript"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"function"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"withTemplate"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("template"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"string"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(" hookId"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"string"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token keyword"},"return"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"function"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("constructor"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"any"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"const"),(0,t.eW)(" hookEl "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" document"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"getElementById"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("hookId"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"const"),(0,t.eW)(" p "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"constructor"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"if"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("hookEl"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n      hookEl"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("innerHTML "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" template"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n      hookEl"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"querySelector"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"h1"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token operator"},"!"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("textContent "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" p"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("name"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n\n"),(0,t.Lk)("span",{class:"token comment"},"// decorator会在类定义的地方执行"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token decorator"},[(0,t.Lk)("span",{class:"token at operator"},"@"),(0,t.Lk)("span",{class:"token function"},"withTemplate")]),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"<h1>Hello TypeScript</h1>"'),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(),(0,t.Lk)("span",{class:"token string"},'"app"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"Person"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token function"},"constructor"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token keyword"},"public"),(0,t.eW)(" name"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"string"),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(),(0,t.Lk)("span",{class:"token string"},'"静默"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"7"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"8"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"9"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"10"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"11"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"12"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"13"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"14"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"15"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"16"),(0,t.Lk)("br")])],-1),o=(0,t.Lk)("div",{class:"language-html ext-html line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-html"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token tag"},[(0,t.Lk)("span",{class:"token tag"},[(0,t.Lk)("span",{class:"token punctuation"},"<"),(0,t.eW)("div")]),(0,t.eW)(),(0,t.Lk)("span",{class:"token attr-name"},"id"),(0,t.Lk)("span",{class:"token attr-value"},[(0,t.Lk)("span",{class:"token punctuation attr-equals"},"="),(0,t.Lk)("span",{class:"token punctuation"},'"'),(0,t.eW)("app"),(0,t.Lk)("span",{class:"token punctuation"},'"')]),(0,t.Lk)("span",{class:"token punctuation"},">")]),(0,t.Lk)("span",{class:"token tag"},[(0,t.Lk)("span",{class:"token tag"},[(0,t.Lk)("span",{class:"token punctuation"},"</"),(0,t.eW)("div")]),(0,t.Lk)("span",{class:"token punctuation"},">")]),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br")])],-1),c=(0,t.Lk)("hr",null,null,-1),l=(0,t.Lk)("h2",{id:"decorator使用的位置",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#decorator使用的位置","aria-hidden":"true"},"#"),(0,t.eW)(" Decorator使用的位置")],-1),i=(0,t.Lk)("div",{class:"custom-container tip"},[(0,t.Lk)("p",{class:"custom-container-title"},"TIP"),(0,t.Lk)("p",null,"除了在class上使用，还可以在Property,Accessor(setter,getter),Method,Parameter")],-1),r=(0,t.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-typescript"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"Product"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token decorator"},[(0,t.Lk)("span",{class:"token at operator"},"@"),(0,t.Lk)("span",{class:"token function"},"LogProperty")]),(0,t.eW)("\n  title"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"string"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token keyword"},"private"),(0,t.eW)(" _price"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"number"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n\n  "),(0,t.Lk)("span",{class:"token decorator"},[(0,t.Lk)("span",{class:"token at operator"},"@"),(0,t.Lk)("span",{class:"token function"},"LogAccessor")]),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token keyword"},"set"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"price"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("val"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"number"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"if"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("val "),(0,t.Lk)("span",{class:"token operator"},">="),(0,t.eW)(),(0,t.Lk)("span",{class:"token number"},"0"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n      "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("_price "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" val"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"else"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n      "),(0,t.Lk)("span",{class:"token keyword"},"throw"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"new"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"Error"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"Invalid price - should be positive!"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n\n  "),(0,t.Lk)("span",{class:"token function"},"constructor"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("n"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"string"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(" p"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"number"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("title "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" n"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("_price "),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" p"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n\n  "),(0,t.Lk)("span",{class:"token decorator"},[(0,t.Lk)("span",{class:"token at operator"},"@"),(0,t.Lk)("span",{class:"token function"},"LogMethod")]),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token function"},"getPricewithTax"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token decorator"},[(0,t.Lk)("span",{class:"token at operator"},"@"),(0,t.Lk)("span",{class:"token function"},"LogParameter")]),(0,t.eW)(" tax"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"number"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n    "),(0,t.Lk)("span",{class:"token keyword"},"return"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"this"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.eW)("_price "),(0,t.Lk)("span",{class:"token operator"},"*"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token number"},"1"),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"+"),(0,t.eW)(" tax"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"7"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"8"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"9"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"10"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"11"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"12"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"13"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"14"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"15"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"16"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"17"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"18"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"19"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"20"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"21"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"22"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"23"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"24"),(0,t.Lk)("br")])],-1),u=(0,t.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-typescript"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"function"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"LogProperty"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("target"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"any"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(" name"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"string"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"Property Decorator"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("target"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("name"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br")])],-1),k=(0,t.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-typescript"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"function"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"LogAccessor"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("\n  target"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"any"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)("\n  name"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"string"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)("\n  descriptor"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(" PropertyDescriptor\n"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"Accessor Decorator"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("target"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("name"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("descriptor"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"7"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"8"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"9"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"10"),(0,t.Lk)("br")])],-1),b=(0,t.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-typescript"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"function"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"LogMethod"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("target"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"any"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(" name"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"string"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(" descriptor"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(" PropertyDescriptor"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"Method Decorator"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("target"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("name"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("descriptor"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br")])],-1),L=(0,t.Lk)("div",{class:"language-typescript ext-ts line-numbers-mode"},[(0,t.Lk)("pre",{class:"language-typescript"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"function"),(0,t.eW)(),(0,t.Lk)("span",{class:"token function"},"LogParameter"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("target"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"any"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(" name"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"string"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(" position"),(0,t.Lk)("span",{class:"token operator"},":"),(0,t.eW)(),(0,t.Lk)("span",{class:"token builtin"},"number"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.eW)(),(0,t.Lk)("span",{class:"token punctuation"},"{"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.Lk)("span",{class:"token string"},'"Parameter Decorator"'),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("target"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("name"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n  "),(0,t.Lk)("span",{class:"token builtin"},"console"),(0,t.Lk)("span",{class:"token punctuation"},"."),(0,t.Lk)("span",{class:"token function"},"log"),(0,t.Lk)("span",{class:"token punctuation"},"("),(0,t.eW)("position"),(0,t.Lk)("span",{class:"token punctuation"},")"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n"),(0,t.Lk)("span",{class:"token punctuation"},"}"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"highlight-lines"},[(0,t.Lk)("div",{class:"highlight-line"}," "),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br"),(0,t.Lk)("br")]),(0,t.Lk)("div",{class:"line-numbers"},[(0,t.Lk)("span",{class:"line-number"},"1"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"2"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"3"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"4"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"5"),(0,t.Lk)("br"),(0,t.Lk)("span",{class:"line-number"},"6"),(0,t.Lk)("br")])],-1),d=(0,t.Fv)('<h2 id="returning-and-changing-a-class-when-a-class-decorator" tabindex="-1"><a class="header-anchor" href="#returning-and-changing-a-class-when-a-class-decorator" aria-hidden="true">#</a> Returning (and changing) a class when a Class Decorator⭐</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>这段代码太惊艳了</p><p>让修饰class的decorator返回一个新的class,来修改原来的class,这里修改构造函数</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">withTemplate</span><span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> hookId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Step 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// T extends 一个方法的type,也可以直接写成 T extends new (...args: any[]) =&gt; { name: string }</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n    originalConstructor<span class="token operator">:</span> <span class="token constant">T</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Step 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 返回一个新的class，该类继承原有的类，做了一些修改</span>\n    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> originalConstructor <span class="token punctuation">{</span>\n      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token operator">...</span>_<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Step 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> hookEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>hookId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">originalConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hookEl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          hookEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> template<span class="token punctuation">;</span>\n          hookEl<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// decorator会在类定义的地方执行</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">withTemplate</span></span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;Hello TypeScript&lt;/h1&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;静默&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// step 3只会在实例化的时候才执行</span>\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="returing-a-propertydescriptor-when-a-method-decorator" tabindex="-1"><a class="header-anchor" href="#returing-a-propertydescriptor-when-a-method-decorator" aria-hidden="true">#</a> Returing a PropertyDescriptor when a method decorator⭐</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>让修饰方法的decorator返回一个PropertyDescriptor,来修改原来的方法</p></div><p><strong>自动绑定this的例子</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">AutoBind</span><span class="token punctuation">(</span>\n  target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  propertyDescriptor<span class="token operator">:</span> PropertyDescriptor\n<span class="token punctuation">)</span><span class="token operator">:</span> PropertyDescriptor <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propertyDescriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> originalMethod <span class="token operator">=</span> propertyDescriptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token comment">// 修改方法的描述</span>\n  <span class="token keyword">const</span> adjDescriptor<span class="token operator">:</span> PropertyDescriptor <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// get是PropertyDescriptor接口的规范</span>\n    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个例子就是Printer,因为方法绑定了@AutoBind</span>\n      <span class="token comment">// 给原来的方法绑定了this</span>\n      <span class="token keyword">const</span> boundFn <span class="token operator">=</span> <span class="token function">originalMethod</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this是只被调的实例，当然是被修饰的方法</span>\n      <span class="token keyword">return</span> boundFn<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> adjDescriptor<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token punctuation">{</span>\n  msg <span class="token operator">=</span> <span class="token string">&quot;This works!&quot;</span><span class="token punctuation">;</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">AutoBind</span></span>\n  <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// bind 让this指向p</span>\n<span class="token comment">//button.addEventListener(&#39;click&#39;,p.showMsg.bind(p));</span>\n\n<span class="token comment">// autobind</span>\nbutton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>showMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="decorator-use-as-validator" tabindex="-1"><a class="header-anchor" href="#decorator-use-as-validator" aria-hidden="true">#</a> Decorator use as Validator ⭐</h2><p>校验属性是否符合条件</p><details class="custom-container details"><summary>点击查看代码</summary><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//=======================================================</span>\n<span class="token keyword">interface</span> <span class="token class-name">ValidConfig</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>properties<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>properties<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> registeredValidators<span class="token operator">:</span> ValidConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Require</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;require&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  registeredValidators<span class="token punctuation">[</span>target<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>registeredValidators<span class="token punctuation">[</span>target<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;require&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">PositiveNum</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;PositiveNum&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  registeredValidators<span class="token punctuation">[</span>target<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>registeredValidators<span class="token punctuation">[</span>target<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;positiveNum&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">valid</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> objValidatorConfig <span class="token operator">=</span> registeredValidators<span class="token punctuation">[</span>obj<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>objValidatorConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> isValid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objValidatorConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> objValidatorConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> validator <span class="token keyword">of</span> objValidatorConfig<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">switch</span> <span class="token punctuation">(</span>validator<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string">&quot;require&quot;</span><span class="token operator">:</span>\n          isValid <span class="token operator">=</span> isValid <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string">&quot;positiveNum&quot;</span><span class="token operator">:</span>\n          isValid <span class="token operator">=</span> isValid <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> isValid<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//=======================================================</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Require</span></span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PositiveNum</span></span>\n  price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>t<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> t<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> p<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> formButton <span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>\n\nformButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> titlEl <span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#title&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> priceEl <span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#price&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> title <span class="token operator">=</span> titlEl<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> price <span class="token operator">=</span> <span class="token operator">+</span>priceEl<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> createCourse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>createCourse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">valid</span><span class="token punctuation">(</span>createCourse<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid input,please try again!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>createCourse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br></div></div></details>',10),m={},g=(0,a(66262).A)(m,[["render",function(n,s){const a=(0,t.g2)("CodeGroupItem"),m=(0,t.g2)("CodeGroup");return(0,t.uX)(),(0,t.CE)(t.FK,null,[p,(0,t.bF)(m,null,{default:(0,t.k6)((()=>[(0,t.bF)(a,{title:"decorator"},{default:(0,t.k6)((()=>[e])),_:1}),(0,t.bF)(a,{title:"html"},{default:(0,t.k6)((()=>[o])),_:1})])),_:1}),c,l,i,(0,t.bF)(m,null,{default:(0,t.k6)((()=>[(0,t.bF)(a,{title:"使用"},{default:(0,t.k6)((()=>[r])),_:1}),(0,t.bF)(a,{title:"LogProperty"},{default:(0,t.k6)((()=>[u])),_:1}),(0,t.bF)(a,{title:"LogAccessor"},{default:(0,t.k6)((()=>[k])),_:1}),(0,t.bF)(a,{title:"LogMethod"},{default:(0,t.k6)((()=>[b])),_:1}),(0,t.bF)(a,{title:"LogParameter"},{default:(0,t.k6)((()=>[L])),_:1})])),_:1}),d],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);