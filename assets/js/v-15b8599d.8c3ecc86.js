"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[54593],{1706:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-15b8599d",path:"/javahelper/08%20vavr.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/javahelper/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"依赖",slug:"依赖",children:[]},{level:2,title:"Tuple",slug:"tuple",children:[]},{level:2,title:"Either",slug:"either",children:[{level:3,title:"fold",slug:"fold",children:[]}]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"javahelper/08 vavr.md"}},66239:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var p=a(20641);const t={class:"custom-container tip"},e=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),c={href:"https://www.vavr.io/",target:"_blank",rel:"noopener noreferrer"},o={href:"https://www.vavr.io/",target:"_blank",rel:"noopener noreferrer"},l={href:"https://github.com/Q10Viking/learncode/tree/main/javahelper/vavr-tutorial",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Lk)("h2",{id:"依赖",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#依赖","aria-hidden":"true"},"#"),(0,p.eW)(" 依赖")],-1),i={href:"https://docs.vavr.io/#_maven",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Fv)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.vavr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>vavr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple" aria-hidden="true">#</a> Tuple</h2><p>是一种不可变的数据结构，目前支持到8个</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tuple3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&quot;java8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> tuple3<span class="token punctuation">.</span><span class="token function">_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Integer</span> version <span class="token operator">=</span> tuple3<span class="token punctuation">.</span><span class="token function">_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> language <span class="token operator">=</span> tuple3<span class="token punctuation">.</span><span class="token function">_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;name:%s is learning language:%s of version:%d\\n&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>language<span class="token punctuation">,</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// name:Q10Viking is learning language:java8 of version:8</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="either" tabindex="-1"><a class="header-anchor" href="#either" aria-hidden="true">#</a> Either</h2>',5),k={href:"https://www.baeldung.com/vavr-either",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">Either</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">int</span> marks<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>marks <span class="token operator">&lt;</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Either</span><span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token string">&quot;Marks not acceptable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Either</span><span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>marks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 以下是不使用Either,纯粹靠java自带的功能实现</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">computeWithoutEitherUsingArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> marks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>marks <span class="token operator">&lt;</span> <span class="token number">85</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Marks not acceptable&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> marks<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">computeWithoutEitherUsingMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> marks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>marks <span class="token operator">&lt;</span> <span class="token number">85</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        results<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;FAILURE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Marks not acceptable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        results<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">,</span> marks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><blockquote><p>测试Either</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// a = 100</span>\n    <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrElseThrow</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// b = Marks not acceptable</span>\n    <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// c = null</span>\n    <span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="fold" tabindex="-1"><a class="header-anchor" href="#fold" aria-hidden="true">#</a> fold</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Either</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> right <span class="token operator">=</span> <span class="token class-name">Either</span><span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 统一结果</span>\n<span class="token comment">// result = right:5</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>\n    l <span class="token operator">-&gt;</span> <span class="token string">&quot;left: &quot;</span> <span class="token operator">+</span> l<span class="token punctuation">,</span>\n    r <span class="token operator">-&gt;</span> <span class="token string">&quot;right:&quot;</span> <span class="token operator">+</span> r\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>更详细的例子：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">CompleteFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Either</span><span class="token punctuation">&lt;</span><span class="token class-name">CommandFailure</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">PaymentId</span><span class="token punctuation">,</span> <span class="token class-name">PaymentStatus</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> promise <span class="token operator">=</span> <span class="token comment">//...返回一个CompleteFuture</span>\n\n<span class="token comment">// 统一结果</span>\n<span class="token class-name">CompleteFuture</span> r <span class="token operator">=</span>  promise<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>acceptOrReject <span class="token operator">-&gt;</span> acceptOrReject<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>\n    reject <span class="token operator">-&gt;</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    accept <span class="token operator">-&gt;</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">accepted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PerformPaymentResponse</span><span class="token punctuation">(</span>accept<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>id<span class="token punctuation">,</span> accept<span class="token punctuation">.</span>_2<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',8),m={href:"https://docs.vavr.io/#_maven",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.baeldung.com/vavr",target:"_blank",rel:"noopener noreferrer"},g={},v=(0,a(66262).A)(g,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",t,[e,(0,p.Lk)("p",null,[(0,p.Lk)("a",c,[(0,p.eW)("Vavr"),(0,p.bF)(a)]),(0,p.eW)(" is a functional library for Java 8+ that provides immutable data types and functional control structures.")]),(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("Vavr"),(0,p.bF)(a)]),(0,p.eW)("是Java 8+的函数库，提供不可变的数据类型和函数控制结构。")])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",l,[(0,p.eW)("Source Code"),(0,p.bF)(a)])]),u,(0,p.Lk)("blockquote",null,[(0,p.Lk)("p",null,[(0,p.eW)("目前该教程基于最新的版本，"),(0,p.Lk)("a",i,[(0,p.eW)("Vavr User Guide"),(0,p.bF)(a)])])]),r,(0,p.Lk)("p",null,[(0,p.Lk)("a",k,[(0,p.eW)("Introduction to Vavr's Either | Baeldung"),(0,p.bF)(a)])]),b,(0,p.Lk)("p",null,[(0,p.Lk)("a",m,[(0,p.eW)("Vavr User Guide"),(0,p.bF)(a)])]),(0,p.Lk)("p",null,[(0,p.Lk)("a",d,[(0,p.eW)("Introduction to Vavr | Baeldung"),(0,p.bF)(a)])])],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);