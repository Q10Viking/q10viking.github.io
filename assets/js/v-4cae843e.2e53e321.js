"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[88477],{4386:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4cae843e",path:"/tomcat/19%20tomcat%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"tomcat中使用自定义的类加载器加载类",slug:"tomcat中使用自定义的类加载器加载类",children:[]},{level:2,title:"Tomcat启动流程-初始化",slug:"tomcat启动流程-初始化",children:[]},{level:2,title:"Tomcat启动流程-启动",slug:"tomcat启动流程-启动",children:[{level:3,title:"mapper映射关系的生成",slug:"mapper映射关系的生成",children:[]}]},{level:2,title:"tomcat的SPI机制",slug:"tomcat的spi机制",children:[]},{level:2,title:"Tomcat为什么会阻塞",slug:"tomcat为什么会阻塞",children:[]},{level:2,title:"tomcat部署应用",slug:"tomcat部署应用",children:[]},{level:2,title:"tomcat中请求经过流程",slug:"tomcat中请求经过流程",children:[]},{level:2,title:"tomcat解析类文件是否有指定注解",slug:"tomcat解析类文件是否有指定注解",children:[]}],filePathRelative:"tomcat/19 tomcat启动流程.md"}},85810:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(20641).Fv)('<h2 id="tomcat中使用自定义的类加载器加载类" tabindex="-1"><a class="header-anchor" href="#tomcat中使用自定义的类加载器加载类" aria-hidden="true">#</a> tomcat中使用自定义的类加载器加载类</h2><p>在tomcat中可以看到很多类都是通过自定义类加载器loadClass的方式来加载类的，然后通过反射的方式创建加载出来类的实例。而这个类的构造方法中往往又new 出来许多新的对象。那么这些new出来的新的对象也是通过加载这个类的类加载器加载的。</p><p><strong>下面的代码可以看到通过自定类加载加载出来的类，并不能转化，应为此时强制转化时这个类是由另外一个类加载器加载的（appclassloader)，要想调用方法，那么就必须通过反射的方式。这也就是tomcat中catalina为什么通过反射方法调用的方式。</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">MyClassLoader1</span> myClassLoader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> myClassLoader1<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.hzz.Test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Object</span> o <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Test1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以看到AppClassLoader是由类加载器加载的</span>\n    <span class="token class-name">Test1</span> t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Test1</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>  <span class="token comment">// java.lang.ClassCastException: org.hzz.Test1 cannot be cast to org.hzz.Test1</span>\n    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Test1</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="tomcat启动流程-初始化" tabindex="-1"><a class="header-anchor" href="#tomcat启动流程-初始化" aria-hidden="true">#</a> Tomcat启动流程-初始化</h2><p>通过解析server.xml配置文件，通过tomcat自定义的类加载器，去加载类，生成一系列容器对象。接着开始启动</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>BootStrap.start()---&gt;Catalina.start()----&gt;Server.start()继续调用\n---&gt;server.init() 注册MBean jmx\n---&gt;service.init()\n\t---&gt; connector.init()  ---&gt; 创建了一个CoyoteAdapter\n\t\t\t\t\t   ----&gt; 协议初始化如 Http11Protocol.init\n\t\t\t\t\t   \t\t---&gt; endpoint.init()\n\t\t\t\t\t   \t\t\t---&gt; endpoint.bind 是否在初始化绑定\n\t\t\t\t\t   \t\t\t\t---&gt; serverSocketFactory = new DefaultServerSocket\n\t\t\t\t\t   \t\t\t\t---&gt; serverSocker = serverSocketFactory.createSocket\n\t\t\t\t\t   ----&gt; mapperListener.init(); // mapper的生成\n\t---&gt; engine.init()  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="tomcat启动流程-启动" tabindex="-1"><a class="header-anchor" href="#tomcat启动流程-启动" aria-hidden="true">#</a> Tomcat启动流程-启动</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Server.start() 初始化完成server.init()后，然后调用进行启动 ---&gt; startInternal()\n---&gt;service.start()\n\t---&gt; connector.start()\n\t\t----&gt; 协议处理启动如 Http11Protocol.start()\n\t\t\t---&gt; endpoint.start()\n\t\t\t\t---&gt; endpoint.bind 如果没有在初始化时绑定，则绑定\n\t\t\t\t\t   ---&gt; serverSocketFactory = new DefaultServerSocket\n\t\t\t\t\t   ---&gt; serverSocker = serverSocketFactory.createSocket\t\t\t\n\t\t----&gt; mapperListener.start(); // mapper的生成\n\t---&gt; engine.start()  \n\t\t\tthreadStart();会启动一个后台线程，处理各个容器的后台任务container.backgroundProcess。⭐比如session的过期，热部署\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="mapper映射关系的生成" tabindex="-1"><a class="header-anchor" href="#mapper映射关系的生成" aria-hidden="true">#</a> mapper映射关系的生成</h3><blockquote><p>org.apache.catalina.connector.MapperListener#startInternal</p><p>在处理请求时快速解析当前请求对应的context,对应的Wrapper</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mapper对象\n\tList&lt;Host&gt;  \n\t\tHost: 下有List&lt;Context&gt;\n\t\t\tcontext: 下有List&lt;Wrapper&gt;\n\t\t\t\tWrapper: Servlet的映射关系\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="tomcat的spi机制" tabindex="-1"><a class="header-anchor" href="#tomcat的spi机制" aria-hidden="true">#</a> tomcat的SPI机制</h2><blockquote><p>在tomat中启动StandardContext.start()时，会触发一个事件，通知对应的监听器，去META-INF/services/目录下找到ServletContainerInitializer文件</p></blockquote><p>tomcat中SPI机制的实现：org.apache.catalina.startup.WebappServiceLoader#load。大概原理就是去这个目录下（META-INF/services/）读取javax.servlet.ServletContainerInitializer文件。将里面的内容读取出来，然后通过来加载器进行加载。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>is <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// url是ClassLoader.getSystemResources(configFile)</span>\n<span class="token class-name">InputStreamReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token constant">UTF8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nreader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> line<span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    servicesFound<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>通过SPI机制发现的类，在这里StandardContext.start()进行调用。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Call ServletContainerInitializers</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletContainerInitializer</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span>\n     initializers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                 <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardContext.sciFail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="tomcat为什么会阻塞" tabindex="-1"><a class="header-anchor" href="#tomcat为什么会阻塞" aria-hidden="true">#</a> Tomcat为什么会阻塞</h2><blockquote><p>tomcat运行main方法后为什么没有结束？</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Catalina.start()---&gt;在方法的最后有一个\nawait() // 阻塞\n\t---&gt; getServer().await() 在这个方法中开启了一个ServerSocket,不断循环监听连接，如果有连接发送进来，并且发送了退出命令，那么就跳出循环，如果port设置是-1，那么就不断的循环睡眠，默认的端口是8005\nstop(); //阻塞唤醒后就停止\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>port设置为1的情况，不断循环睡眠</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stopAwait <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stopAwait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    \t<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span> <span class="token number">10000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">InterruptedException</span> ex <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// continue and check the flag</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>接收连接，发送SHUTDOWN后，退出 org.apache.catalina.core.StandardServer#await</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> expected <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// Cut off to avoid DoS attack</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>expected <span class="token operator">&lt;</span> shutdown<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    expected <span class="token operator">+=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>expected <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        ch <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t\t<span class="token comment">// socket.setSoTimeOut(10*1000) 设置了超时时间</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardServer.accept.readError&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ch <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// Control character or EOF (-1) terminates loop</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    command<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    expected<span class="token operator">--</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Close the socket now that we are done with it</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Ignore</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Match against our command string</span>\n<span class="token keyword">boolean</span> match <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>shutdown<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><hr><h2 id="tomcat部署应用" tabindex="-1"><a class="header-anchor" href="#tomcat部署应用" aria-hidden="true">#</a> tomcat部署应用</h2><blockquote><p>在StandardContext启动时</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>实例化StandardContext\n\twebappclassloader\nstart() 在这个过程中\n\t会解析web.xml文件,生成一个WEBXML对象\n\t\tList&lt;ServletDef&gt; \n\t\tList&lt;FilterDef&gt;\n\t设置属性： \n\t\t如webappclassloader\n\t\t  List&lt;Wrapper&gt;\n\t\t  mapper\n做完这些之后，就会生成一个mapping\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>mapper启动时进行生成映射关系</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mapper对象\n\tList&lt;Host&gt;  \n\t\tHost: 下有List&lt;Context&gt;\n\t\t\tcontext: 下有List&lt;Wrapper&gt;\n\t\t\t\tWrapper: Servlet的映射关系\n\t\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="tomcat中请求经过流程" tabindex="-1"><a class="header-anchor" href="#tomcat中请求经过流程" aria-hidden="true">#</a> tomcat中请求经过流程</h2><p>接收到请求之后，adapter组件（将映射关系放到request的mappingdata中），mapping组件，解析到请求</p><p>adapter将解析出来的数据 host context wrapper 在request中保存了mappingdata数据（StandardHost,StandardContext,StandardWrapper）</p><p>request</p><p>开始执行StandardHost的阀门Valve 直到最后一个Value（在容器中单独标识了最后的阀门，用于处理连接到下一个容器，StandardEngineValve）.</p><p>再执行StandardHost的阀门Valve 直到最后一个Value.</p><p>再执行StandardHost的阀门Valve 直到最后一个Value. （最后一个阀门，是<strong>StandardWrapperValve</strong>））</p><p><strong>在这个StandardWrapperValve阀门中,进行了servlet的类加载---&gt;走过滤器链----&gt;调用到Servlet的service方法。</strong></p><blockquote><p><strong>阀门相当于一个链表,每个阀门都有一个next属性</strong></p></blockquote><h2 id="tomcat解析类文件是否有指定注解" tabindex="-1"><a class="header-anchor" href="#tomcat解析类文件是否有指定注解" aria-hidden="true">#</a> tomcat解析类文件是否有指定注解</h2><p>org.apache.catalina.startup.ContextConfig#processAnnotationsStream</p><p>它居然能解析出来是否有注解</p>',43),p={},e=(0,a(66262).A)(p,[["render",function(n,s){return t}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);