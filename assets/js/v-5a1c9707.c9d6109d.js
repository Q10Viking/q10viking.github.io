"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[64577],{8765:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5a1c9707",path:"/dubbo/04%20Dubbo%20SPI.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Docker/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"dubbo SPI案例",slug:"dubbo-spi案例",children:[{level:3,title:"模拟案例",slug:"模拟案例",children:[]},{level:3,title:"自动注入与切面",slug:"自动注入与切面",children:[]},{level:3,title:"dubbo如何判断类是一个wrapper",slug:"dubbo如何判断类是一个wrapper",children:[]}]},{level:2,title:"原理",slug:"原理",children:[]},{level:2,title:"URL设计(SPI的依赖注入)",slug:"url设计-spi的依赖注入",children:[{level:3,title:"测试",slug:"测试",children:[]}]}],filePathRelative:"dubbo/04 Dubbo SPI.md"}},26568:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var p=a(20641);const t={class:"custom-container tip"},e=(0,p.Lk)("p",{class:"custom-container-title"},"TIP",-1),c=(0,p.Lk)("p",null,"Dubbo中的SPI与Java本身的SPI的优势。能够根据指定的参数，加载具体的类。并且提供了属性注入的功能",-1),o={href:"https://github.com/Q10Viking/learncode/tree/main/dubbo/dubbo-SPI/spi",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Fv)('<p><img src="/images/dubbo/image-20230509144422461.png" alt="image-20230509144422461"></p><h2 id="dubbo-spi案例" tabindex="-1"><a class="header-anchor" href="#dubbo-spi案例" aria-hidden="true">#</a> dubbo SPI案例</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 拿到Protocol接口扩展点加载器</span>\n<span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Protocol</span><span class="token punctuation">&gt;</span></span> extensionLoader <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">Protocol</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 加载具体的协议实现类</span>\n<span class="token class-name">Protocol</span> http <span class="token operator">=</span> extensionLoader<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;dubbo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="模拟案例" tabindex="-1"><a class="header-anchor" href="#模拟案例" aria-hidden="true">#</a> 模拟案例</h3><blockquote><p>注意接口上要标注<code>@SPI</code>注解，表示该接口是一个扩展点</p></blockquote>',5),u=(0,p.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-java"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token annotation punctuation"},"@SPI"),(0,p.eW)(),(0,p.Lk)("span",{class:"token comment"},"// 1. @SPI标注在接口上，表示该接口是一个扩展点"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"interface"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token keyword"},"void"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"name"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br")])],-1),k=(0,p.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-java"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"class"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"RedCar"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"implements"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token annotation punctuation"},"@Override"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"void"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"name"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n        "),(0,p.Lk)("span",{class:"token class-name"},"System"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.eW)("out"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.Lk)("span",{class:"token function"},"println"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token string"},'"I am a red car"'),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br")])],-1),i=(0,p.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-java"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"class"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"BlackCar"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"implements"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token annotation punctuation"},"@Override"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"void"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"name"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n        "),(0,p.Lk)("span",{class:"token class-name"},"System"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.eW)("out"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.Lk)("span",{class:"token function"},"println"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token string"},'"I am a black car"'),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br")])],-1),r=(0,p.Fv)('<blockquote><p>配置</p></blockquote><p><img src="/images/dubbo/image-20230509112721385.png" alt="image-20230509112721385"></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>red=org.hzz.car.RedCar\nblack=org.hzz.car.BlacAkCar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>测试</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SPIMain</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> extensionLoader <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Car</span> car <span class="token operator">=</span> extensionLoader<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;black&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        car<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**output\n * I am a black car\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="自动注入与切面" tabindex="-1"><a class="header-anchor" href="#自动注入与切面" aria-hidden="true">#</a> 自动注入与切面</h3><blockquote><p>Dubbo里面的Wrapper类，通过构造来判断是否是wrapper类</p></blockquote><p>定义一个<code>CarWrapper</code>，Dubbo的自动注入体现在，会通过构造方法传入具体的Car的实现类，切面体现在方法被CarWrapper类的方法增强</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarWrapper</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">CarWrapper</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I am a car wrapper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        car<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>配置</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>red<span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>car<span class="token punctuation">.</span></span>RedCar</span>\nblack<span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>car<span class="token punctuation">.</span></span>BlackCar</span>\n<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>car<span class="token punctuation">.</span></span>CarWrapper</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>测试</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SPIMain</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> extensionLoader <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Car</span> car <span class="token operator">=</span> extensionLoader<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;black&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        car<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**output\n * I am a car wrapper\n * I am a black car\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="dubbo如何判断类是一个wrapper" tabindex="-1"><a class="header-anchor" href="#dubbo如何判断类是一个wrapper" aria-hidden="true">#</a> dubbo如何判断类是一个wrapper</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token doc-comment comment">/**\n     * test if clazz is a wrapper class\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n     * which has Constructor with given class type as its only argument\n     */</span>\n<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isWrapperClass</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> constructor<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboLoadingStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">LoadingStrategy</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;META-INF/dubbo/&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="url设计-spi的依赖注入" tabindex="-1"><a class="header-anchor" href="#url设计-spi的依赖注入" aria-hidden="true">#</a> URL设计(SPI的依赖注入)</h2><blockquote><p><code>org.apache.dubbo.common.URL</code></p></blockquote><blockquote><p>Car.<code>@Adaptive</code>标注在方法上，表示该方法是一个自适应扩展点，会生成一个代理类</p></blockquote>',20),b=(0,p.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-java"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token annotation punctuation"},"@SPI"),(0,p.eW)(),(0,p.Lk)("span",{class:"token comment"},"// 1. @SPI标注在接口上，表示该接口是一个扩展点"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"interface"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n\n    "),(0,p.Lk)("span",{class:"token annotation punctuation"},"@Adaptive"),(0,p.eW)(),(0,p.Lk)("span",{class:"token comment"},"// 2. @Adaptive标注在方法上，表示该方法是一个自适应扩展点"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token keyword"},"void"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"name"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token class-name"},"URL"),(0,p.eW)(" url"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br")])],-1),m=(0,p.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-java"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"class"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"RedCar"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"implements"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token annotation punctuation"},"@Override"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"void"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"name"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token class-name"},"URL"),(0,p.eW)(" url"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n        "),(0,p.Lk)("span",{class:"token class-name"},"System"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.eW)("out"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.Lk)("span",{class:"token function"},"println"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token string"},'"I am a red car"'),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br")])],-1),d=(0,p.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-java"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"class"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"BlackCar"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"implements"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token annotation punctuation"},"@Override"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"void"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"name"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token class-name"},"URL"),(0,p.eW)(" url"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n        "),(0,p.Lk)("span",{class:"token class-name"},"System"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.eW)("out"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.Lk)("span",{class:"token function"},"println"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token string"},'"I am a black car"'),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br")])],-1),L=(0,p.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-java"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"class"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"BlackCar"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"implements"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token annotation punctuation"},"@Override"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"void"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"name"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n        "),(0,p.Lk)("span",{class:"token class-name"},"System"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.eW)("out"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.Lk)("span",{class:"token function"},"println"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token string"},'"I am a black car"'),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br")])],-1),g=(0,p.Lk)("blockquote",null,[(0,p.Lk)("p",null,"第一个Person，BlackPerson为了依赖注入的时候，指定注入的是什么Car。代理对象Adaptive.")],-1),v=(0,p.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-java"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"class"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"BlackPerson"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"implements"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Person"),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token keyword"},"private"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.eW)(" car"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("    "),(0,p.Lk)("span",{class:"token comment"},"// Adaptive代理类"),(0,p.eW)("\n\n    "),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"void"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"setCar"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.eW)(" car"),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n        "),(0,p.Lk)("span",{class:"token keyword"},"this"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.eW)("car "),(0,p.Lk)("span",{class:"token operator"},"="),(0,p.eW)(" car"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token annotation punctuation"},"@Override"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"getCar"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n        "),(0,p.Lk)("span",{class:"token class-name"},"System"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.eW)("out"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.Lk)("span",{class:"token function"},"println"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token string"},'"I am a black person"'),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n        "),(0,p.Lk)("span",{class:"token keyword"},"return"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"this"),(0,p.Lk)("span",{class:"token punctuation"},"."),(0,p.eW)("car"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"5"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"6"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"7"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"8"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"9"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"10"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"11"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"12"),(0,p.Lk)("br")])],-1),f=(0,p.Lk)("div",{class:"language-java ext-java line-numbers-mode"},[(0,p.Lk)("pre",{class:"language-java"},[(0,p.Lk)("code",null,[(0,p.Lk)("span",{class:"token annotation punctuation"},"@SPI"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token keyword"},"public"),(0,p.eW)(),(0,p.Lk)("span",{class:"token keyword"},"interface"),(0,p.eW)(),(0,p.Lk)("span",{class:"token class-name"},"Person"),(0,p.eW)(),(0,p.Lk)("span",{class:"token punctuation"},"{"),(0,p.eW)("\n    "),(0,p.Lk)("span",{class:"token class-name"},"Car"),(0,p.eW)(),(0,p.Lk)("span",{class:"token function"},"getCar"),(0,p.Lk)("span",{class:"token punctuation"},"("),(0,p.Lk)("span",{class:"token punctuation"},")"),(0,p.Lk)("span",{class:"token punctuation"},";"),(0,p.eW)("\n"),(0,p.Lk)("span",{class:"token punctuation"},"}"),(0,p.eW)("\n")])]),(0,p.Lk)("div",{class:"line-numbers"},[(0,p.Lk)("span",{class:"line-number"},"1"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"2"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"3"),(0,p.Lk)("br"),(0,p.Lk)("span",{class:"line-number"},"4"),(0,p.Lk)("br")])],-1),w=(0,p.Fv)('<blockquote><p>依赖注入的时候，根据名字和类型，会从Spring容器中获取，获取不到再从SPI中获取，spi会产生一个代理对象Adaptive</p></blockquote><p><img src="/images/dubbo/image-20230509131907068.png" alt="image-20230509131907068"></p><p>Dubbo框架依赖了Spring框架</p><p><img src="/images/dubbo/image-20230509144904455.png" alt="image-20230509144904455"></p><p>走SPI和生成一个代理对象赋值给属性Car。下面的代码是<code>AdaptiveClassCodeGenerator</code>生成的</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>car</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">ScopeModel</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">ScopeModelUtil</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span>$<span class="token class-name">Adaptive</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>car<span class="token punctuation">.</span></span>Car</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span>URL</span> arg0<span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n        \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg0 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> \n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;url == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span>URL</span> url <span class="token operator">=</span> arg0<span class="token punctuation">;</span>\n        \n        <span class="token class-name">String</span> extName <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token keyword">if</span><span class="token punctuation">(</span>extName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> \n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to get extension (org.hzz.car.Car) name from url (&quot;</span> \n                                            <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;) use keys([car])&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token class-name">ScopeModel</span> scopeModel <span class="token operator">=</span> <span class="token class-name">ScopeModelUtil</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getScopeModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>car<span class="token punctuation">.</span></span>Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>car<span class="token punctuation">.</span></span>Car</span> extension <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>car<span class="token punctuation">.</span></span>Car</span><span class="token punctuation">)</span>scopeModel<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hzz<span class="token punctuation">.</span>car<span class="token punctuation">.</span></span>Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>extName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        extension<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>生成这段代码之后底层通过<code>javassist</code>进行编译成class</p><blockquote><p><code>org.apache.dubbo.common.compiler.support.JavassistCompiler#doCompile</code></p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token doc-comment comment">/**\n* 参数：\n* neighbor：interface org.hzz.car.Car\n* classloader: ClassLoader$AppClassLoader\n* name: org.hzz.car.Car$Adaptive\n* source: 就是上面的生成的字符串代码\n*/</span>\n\n<span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">doCompile</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> neighbor<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>\n    <span class="token class-name">CtClassBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtClassBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    builder<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// process imported classes</span>\n    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token constant">IMPORT_PATTERN</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        builder<span class="token punctuation">.</span><span class="token function">addImports</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// process extended super class</span>\n    matcher <span class="token operator">=</span> <span class="token constant">EXTENDS_PATTERN</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        builder<span class="token punctuation">.</span><span class="token function">setSuperClassName</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// process implemented interfaces</span>\n    matcher <span class="token operator">=</span> <span class="token constant">IMPLEMENTS_PATTERN</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ifaces <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>ifaces<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> builder<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// process constructors, fields, methods</span>\n    <span class="token class-name">String</span> body <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;{&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token constant">METHODS_PATTERN</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getSimpleClassName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">trim</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>m <span class="token operator">-&gt;</span> <span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>method <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            builder<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span><span class="token string">&quot;public &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">FIELD_PATTERN</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            builder<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token string">&quot;private &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            builder<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">&quot;public &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// compile</span>\n    <span class="token class-name">CtClass</span> cls <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">ClassPool</span> cp <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getClassPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        classLoader <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    cp<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoaderClassPath</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cp<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DubboLoaderClassPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> cp<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> neighbor<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> <span class="token class-name">JavassistCompiler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getProtectionDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">CannotCompileException</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> cp<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> <span class="token class-name">JavassistCompiler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getProtectionDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">throw</span> t<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SPIMain</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> extensionLoader <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Person</span> person <span class="token operator">=</span> extensionLoader<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;black&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;dubbo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span><span class="token string">&quot;car&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        person<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**output\n * I am a black person\n * I am a car wrapper\n * I am a black car\n * I am a black person\n * org.hzz.car.Car$Adaptive@180da663\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',11),y={},h=(0,a(66262).A)(y,[["render",function(n,s){const a=(0,p.g2)("OutboundLink"),y=(0,p.g2)("CodeGroupItem"),h=(0,p.g2)("CodeGroup");return(0,p.uX)(),(0,p.CE)(p.FK,null,[(0,p.Lk)("div",t,[e,c,(0,p.Lk)("p",null,[(0,p.Lk)("a",o,[(0,p.eW)("Source Code"),(0,p.bF)(a)])])]),l,(0,p.bF)(h,null,{default:(0,p.k6)((()=>[(0,p.bF)(y,{title:"Car"},{default:(0,p.k6)((()=>[u])),_:1}),(0,p.bF)(y,{title:"RedCar"},{default:(0,p.k6)((()=>[k])),_:1}),(0,p.bF)(y,{title:"BlackCar"},{default:(0,p.k6)((()=>[i])),_:1})])),_:1}),r,(0,p.bF)(h,null,{default:(0,p.k6)((()=>[(0,p.bF)(y,{title:"Car"},{default:(0,p.k6)((()=>[b])),_:1}),(0,p.bF)(y,{title:"RedCar"},{default:(0,p.k6)((()=>[m])),_:1}),(0,p.bF)(y,{title:"BlackCar"},{default:(0,p.k6)((()=>[d])),_:1}),(0,p.bF)(y,{title:"CarWrapper"},{default:(0,p.k6)((()=>[L])),_:1})])),_:1}),g,(0,p.bF)(h,null,{default:(0,p.k6)((()=>[(0,p.bF)(y,{title:"BlackPerson"},{default:(0,p.k6)((()=>[v])),_:1}),(0,p.bF)(y,{title:"Person"},{default:(0,p.k6)((()=>[f])),_:1})])),_:1}),w],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);