"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[68847],{30137:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-dbcbbc0c",path:"/tomcat/18%20tomcat%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html",title:"",lang:"zh-CN",frontmatter:{"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Java中系统自带的类加载器",slug:"java中系统自带的类加载器",children:[]},{level:2,title:"自定义类加载器打破双亲委派机制",slug:"自定义类加载器打破双亲委派机制",children:[]},{level:2,title:"不同类加载器实例加载出来的类是不同的",slug:"不同类加载器实例加载出来的类是不同的",children:[]},{level:2,title:"tomcat类加载器处理应用的原理",slug:"tomcat类加载器处理应用的原理",children:[]},{level:2,title:"WebappClassLoader加载类原理",slug:"webappclassloader加载类原理",children:[{level:3,title:"实际去加载类findClass",slug:"实际去加载类findclass",children:[]}]},{level:2,title:"实战从jar包中加载一个类",slug:"实战从jar包中加载一个类",children:[]},{level:2,title:"热加载",slug:"热加载",children:[{level:3,title:"检测文件是否修改",slug:"检测文件是否修改",children:[]}]},{level:2,title:"什么是热部署？",slug:"什么是热部署",children:[]}],filePathRelative:"tomcat/18 tomcat中的类加载器.md"}},72334:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(20641);const t=(0,p.Fv)('<h2 id="java中系统自带的类加载器" tabindex="-1"><a class="header-anchor" href="#java中系统自带的类加载器" aria-hidden="true">#</a> Java中系统自带的类加载器</h2><p>每个类加载器对应的目录</p><p>系统类加载器（应用程序类加载器 指定的classpath），扩展类加载器，启动类加载器。</p><p>“<strong>双亲委派</strong>”: 首先委派给父类加载器，父类加载器没有加载到类，自己才进行类的加载</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>\n\t<span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// 进行了并发的控制，每个类加载器再加载一个类都有对应的一把锁</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="自定义类加载器打破双亲委派机制" tabindex="-1"><a class="header-anchor" href="#自定义类加载器打破双亲委派机制" aria-hidden="true">#</a> 自定义类加载器打破双亲委派机制</h2><blockquote><p>打破双亲委派（<strong>就是加载类的先后顺序问题</strong>）就是自己定义的类加载器先去加载，更好的利用双亲委派。</p></blockquote><ol><li><p>继承抽象的ClassLoader类</p></li><li><p>指定父类加载器与Java系统关联起来</p></li><li><p>指定加载类的路径（在findClass中使用该路径），<strong>这个过程就是实际去加载类（将class文件读取成二进制流，然后转化为Class对象）</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 读取文件为字节</span>\n\t<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;指定目录下的类文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 调用java中提供的defineClass方法将字节数据变成Java对象，在这个方法中或进行类的沙箱保护机制</span>\n     <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>在loadClass方法中进行打破双亲委派</p><ol><li><p>需要注意到的点是<strong>在加载一个类的过程中，这个类依赖到的其他类，那么这些类也是使用这个类加载器进行去加载，也就是说java系统就会再次调用我们自定义的类加载器去加载这个依赖的类，也就说重新调用自定义类加载器的loadClass方法</strong></p></li><li><p>java有<strong>沙箱保护机制</strong>，对于包名以java开头的类，会提供保护。所以java中保护类需要先使用Java中类加载器进行加载，<strong>但是我们需要越过系统类加载器。</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>SecurityException</span><span class="token operator">:</span> <span class="token class-name">Prohibited</span> <span class="token keyword">package</span> <span class="token namespace">name</span><span class="token operator">:</span> java<span class="token punctuation">.</span>lang\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol></li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ClassLoader</span> extClassLoader <span class="token operator">=</span> <span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span><span class="token punctuation">{</span>\n             aClass <span class="token operator">=</span> extClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ignore<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span>aClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> aClass<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\learncode\\\\classloader\\\\out\\\\production\\\\classloader\\\\org\\\\hzz\\\\Test1.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// defineClass方法中会进行类的沙箱安全保护机制</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> aClass<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> b<span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            data <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>in <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> data<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">MyClassLoader</span> myClassLoader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">MyClassLoader</span> myClassLoader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> myClassLoader1<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.hzz.Test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> bClass <span class="token operator">=</span> myClassLoader2<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.hzz.Test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass <span class="token operator">==</span> bClass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// org.hzz.MyClassLoader@1b6d3586</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><h2 id="不同类加载器实例加载出来的类是不同的" tabindex="-1"><a class="header-anchor" href="#不同类加载器实例加载出来的类是不同的" aria-hidden="true">#</a> 不同类加载器实例加载出来的类是不同的</h2><blockquote><p>JVM中确定一个类是 classloader + class</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">MyClassLoader</span> myClassLoader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">MyClassLoader</span> myClassLoader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> myClassLoader1<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.hzz.Test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> bClass <span class="token operator">=</span> myClassLoader2<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.hzz.Test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass <span class="token operator">==</span> bClass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="tomcat类加载器处理应用的原理" tabindex="-1"><a class="header-anchor" href="#tomcat类加载器处理应用的原理" aria-hidden="true">#</a> tomcat类加载器处理应用的原理</h2><p>WebappClassLoader:tomat中用于部署应用，比如说有两个应用，这两个应用都有相同的类名。org.hzz.Test。</p><p>那么tomcat为了区分，就使用自定义的类加载器，来分别加载应用中的类</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>WebappClassLoader实例(目录)--------应用1\nWebappClassLoader实例（目录）--------应用2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Tomcat中内部也有很多类需要加载,</p><p>tomcat中的实现</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Context</span>\n\tname\n\t<span class="token class-name">WebappClassLoader</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="/images/tomcat/image-20220508145923528.png" alt=""></p><h2 id="webappclassloader加载类原理" tabindex="-1"><a class="header-anchor" href="#webappclassloader加载类原理" aria-hidden="true">#</a> WebappClassLoader加载类原理</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1. 先从tomcat的缓冲中查找是否加过这个类\n2. 再从jvm的缓冲中查找是否加载过这个类\n3. 先从扩张类加载加载器去加载类，处理java的沙箱安全保护机制、\n4. 是否用父类加载器去加载 Class.forName(name,false,parentClassLoader);\n5. 没有委托，那么就自己就先去加载类\n6. 还是没有找到，那么就委托父类加载器去加载\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="实际去加载类findclass" tabindex="-1"><a class="header-anchor" href="#实际去加载类findclass" aria-hidden="true">#</a> 实际去加载类findClass</h3><blockquote><p>从引用的classes 目录和lib包目录下</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// WebappClassLoaderBase  ResourceEntry findResourceInternal</span>\n<span class="token number">1.</span> 先生成<span class="token class-name">ResourceEntry</span>对象（urlpath<span class="token punctuation">,</span>文件的二进制内容，loadedClass对象）\n\t<span class="token number">2.</span> 在生成的<span class="token class-name">ResourceEntry</span>对象中会去读取<span class="token keyword">class</span>文件\n\t\n<span class="token number">2.</span> 获取这个<span class="token class-name">ResourceEntry</span>对象中加载的类文件的二进制数据，去生成类（defineClass）\n<span class="token number">3.</span> 将这个<span class="token class-name">ResourceEntry</span>的属性\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>那么如何去找到文件，生成字节流呢？尤其是在jar包中的</p><ol><li><p>普通的class根据路径直接去找</p></li><li><p>jar包里面的class</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 去Jar包中寻找这个类,扎到了返回,没有就为null</span>\n<span class="token class-name">JarEntry</span> jarfile <span class="token operator">=</span> <span class="token class-name">JarFile</span><span class="token punctuation">.</span><span class="token function">getJarEntry</span><span class="token punctuation">(</span><span class="token string">&quot;org/apache/catalina/deploy/ServletDef.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h2 id="实战从jar包中加载一个类" tabindex="-1"><a class="header-anchor" href="#实战从jar包中加载一个类" aria-hidden="true">#</a> 实战从jar包中加载一个类</h2><blockquote><p>D:\\learncode\\classloader\\src\\org\\hzz\\JarFileTest.java</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hzz</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>jar<span class="token punctuation">.</span></span><span class="token class-name">JarFile</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">ZipEntry</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JarFileTest</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">JarFile</span> jarFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarFile</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\learncode\\\\classloader\\\\myjars\\\\hzz-test.jar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ZipEntry</span> entry <span class="token operator">=</span> jarFile<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token string">&quot;org/hzz/Test1.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 处理二进制数据</span>\n        <span class="token keyword">int</span> contentLength <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> binaryContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>contentLength<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token class-name">InputStream</span> binaryStream <span class="token operator">=</span> jarFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> n <span class="token operator">=</span> binaryStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>binaryContent<span class="token punctuation">,</span> pos<span class="token punctuation">,</span>\n                    binaryContent<span class="token punctuation">.</span>length <span class="token operator">-</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            pos <span class="token operator">+=</span> n<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 加载类</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarFileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.hzz.Test1&quot;</span><span class="token punctuation">,</span>\n                binaryContent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> binaryContent<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Method</span> main <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//Thread.currentThread().setContextClassLoader(aClass.getClassLoader());</span>\n        main<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//        Enumeration entries = jarFile.entries();</span>\n<span class="token comment">//        while (entries.hasMoreElements()) {</span>\n<span class="token comment">//            System.out.println(entries.nextElement());</span>\n<span class="token comment">//        }</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="热加载" tabindex="-1"><a class="header-anchor" href="#热加载" aria-hidden="true">#</a> 热加载</h2><p>WebappLoader.java</p><p>需要有一个线程去监听</p><h3 id="检测文件是否修改" tabindex="-1"><a class="header-anchor" href="#检测文件是否修改" aria-hidden="true">#</a> 检测文件是否修改</h3><h4 id="_1-如何判断一个文件是否变化" tabindex="-1"><a class="header-anchor" href="#_1-如何判断一个文件是否变化" aria-hidden="true">#</a> 1. 如何判断一个文件是否变化？</h4><p>比较文件的修改时间。</p><p>如果文件不存在了，则抛出一个异常</p><hr><p><strong>jar包是否有添加和删除</strong>: tomcat在加载应用时会把jar包的名称存储起来，当检测的时候，又去获取所所有的jar包，然后进行比较。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[1.jar,2.jar]  启动时读取到的jar包\n[11.jar,23.jar]  修改后的jar包，检测时读取到的\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当检测到有修改后。就调用StandardContext.reload</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>在reload中会重新stop()---&gt;start()\n热加载 context实例还是存在的，只是在stop时将webappclassLoader = null;当start时又会重新创建一个WebAppClassLoader\n最后调用WebappLoader中的startInternal()方法，创建新的WebappClassLoader实例，然后开始重新加载应用。到此tomcat的热部署流程就完成了。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在java中类的加载是jvm自动帮我们做的。那么在tomcat中自定义加载器之后，难道加载应用的类时。每次都去调用WebappClassLoader的loadClass方法吗？<strong>只需要loadClass一次，那么在这个类中所有new出来的对象都是由这个类加载加载的</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 如果我们通过自定义的类加载器加载一个类</span>\n<span class="token class-name">MyClassLoader1</span> myClassLoader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> myClassLoader1<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.hzz.Test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Object</span> o <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在Test1的构造方法中A a = new A()对象，那么a.getClass().getClassLoader()还是我们自定的类加载器</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Context\n\tname\n\treloadable = true\n\tWebappClassLoader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',45),e={href:"https://www.cnblogs.com/yuanjia2717/p/11279312.html",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Lk)("h2",{id:"什么是热部署",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#什么是热部署","aria-hidden":"true"},"#"),(0,p.eW)(" 什么是热部署？")],-1),c=(0,p.Lk)("p",null,"tomcat中应用的配置变更了",-1),l=(0,p.Lk)("p",null,"会将context实例销毁掉，重新新生一个Context",-1),u={},r=(0,a(66262).A)(u,[["render",function(n,s){const a=(0,p.g2)("OutboundLink");return(0,p.uX)(),(0,p.CE)(p.FK,null,[t,(0,p.Lk)("p",null,[(0,p.eW)("第二个问题： 如果之前的类已经实例化了，已经被业务代码使用了，那么重新加载这个类，怎么直到哪个业务类引用了这个实例？其实并不是我想的这样，而是把整个应用又重新加载了一遍。"),(0,p.Lk)("a",e,[(0,p.eW)("Tomcat热部署实现原理 - andrew2717 - 博客园 (cnblogs.com)"),(0,p.bF)(a)])]),o,c,l],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);