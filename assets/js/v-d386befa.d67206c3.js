"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[49457],{87867:(e,t,l)=>{l.r(t),l.d(t,{data:()=>i});const i={key:"v-d386befa",path:"/netty/12%20linux%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/netty/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"同步和异步，阻塞和非阻塞",slug:"同步和异步-阻塞和非阻塞",children:[{level:3,title:"同步和异步",slug:"同步和异步",children:[]},{level:3,title:"阻塞和非阻塞",slug:"阻塞和非阻塞",children:[]},{level:3,title:"两者的组合",slug:"两者的组合",children:[]}]},{level:2,title:"Linux下的五种IO模型",slug:"linux下的五种io模型",children:[{level:3,title:"阻塞IO模型",slug:"阻塞io模型",children:[]},{level:3,title:"IO复用",slug:"io复用",children:[]}]}],filePathRelative:"netty/12 linux网络IO模型.md"}},24930:(e,t,l)=>{l.r(t),l.d(t,{default:()=>n});const i=(0,l(20641).Fv)('<h2 id="同步和异步-阻塞和非阻塞" tabindex="-1"><a class="header-anchor" href="#同步和异步-阻塞和非阻塞" aria-hidden="true">#</a> <strong>同步和异步，阻塞和非阻塞</strong></h2><h3 id="同步和异步" tabindex="-1"><a class="header-anchor" href="#同步和异步" aria-hidden="true">#</a> <strong>同步和异步</strong></h3><blockquote><p><strong>关注的是调用方是否主动获取结果</strong></p></blockquote><ul><li><p>同步:同步的意思就是调用方需要主动等待结果的返回</p></li><li><p>异步:异步的意思就是不需要主动等待结果的返回，而是通过其他手段比如，状态通知，回调函数等。</p></li></ul><h3 id="阻塞和非阻塞" tabindex="-1"><a class="header-anchor" href="#阻塞和非阻塞" aria-hidden="true">#</a> <strong>阻塞和非阻塞</strong></h3><blockquote><p><strong>主要关注的是等待结果返回调用方的状态</strong></p></blockquote><ul><li><p>阻塞:是指结果返回之前，当<strong>前线程被挂起</strong>，不做任何事</p></li><li><p>非阻塞:是指结果在返回之前，线程可以做一些其他事，不会被挂起。</p></li></ul><h3 id="两者的组合" tabindex="-1"><a class="header-anchor" href="#两者的组合" aria-hidden="true">#</a> <strong>两者的组合</strong></h3><ol><li><p>同步阻塞: 同步阻塞基本也是编程中最常见的模型，打个比方你去商店买衣服，你去了之后发现衣服卖完了，那你就在店里面一直等，期间不做任何事(包括看手机)，等着商家进货，直到有货为止，这个效率很低。</p></li><li><p>同步非阻塞: 同步非阻塞在编程中可以抽象为一个轮询模式，你去了商店之后，发现衣服卖完了，这个时候不需要傻傻的等着，你可以去其他地方比如奶茶店，买杯水，但是你还是需要时不时的去商店问老板新衣服到了吗。</p></li><li><p>异步阻塞:异步阻塞这个编程里面用的较少，有点类似你写了个线程池,submit然后马上future.get()，这样线程其实还是挂起的。有点像你去商店买衣服，这个时候发现衣服没有了，这个时候你就给老板留给电话，说衣服到了就给我打电话，然后你就守着这个电话，一直等着他响什么事也不做。这样感觉的确有点傻，所以这个模式用得比较少。</p></li><li><p>异步非阻塞:异步非阻塞。好比你去商店买衣服，衣服没了，你只需要给老板说这是我的电话，衣服到了就打。然后你就随心所欲的去玩，也不用操心衣服什么时候到，衣服一到，电话一响就可以去买衣服了</p></li></ol><h2 id="linux下的五种io模型" tabindex="-1"><a class="header-anchor" href="#linux下的五种io模型" aria-hidden="true">#</a> Linux下的五种IO模型</h2><p><img src="/images/netty/10037.png" alt="https://note.youdao.com/yws/public/resource/4499dc41109fc444d647af81e868e011/xmlnote/OFFICE6C84C36E9C454DBDAD5CE3108A3A73CE/10037"></p><p>总的来说，阻塞IO就是JDK里的BIO编程，IO复用就是JDK里的NIO编程，Linux下异步IO的实现建立在epoll之上，是个伪异步实现，而且相比IO复用，没有体现出性能优势，使用不广。非阻塞IO使用轮询模式，会不断检测是否有数据到达，大量的占用CPU的时间，是绝不被推荐的模型。信号驱动IO需要在网络通信时额外安装信号处理函数，使用也不广泛。</p><h3 id="阻塞io模型" tabindex="-1"><a class="header-anchor" href="#阻塞io模型" aria-hidden="true">#</a> 阻塞IO模型</h3><p><img src="/images/netty/10038.png" alt="https://note.youdao.com/yws/public/resource/4499dc41109fc444d647af81e868e011/xmlnote/OFFICE4AB853E4CDD54BA287E251DD432E9F1B/10038"></p><h3 id="io复用" tabindex="-1"><a class="header-anchor" href="#io复用" aria-hidden="true">#</a> IO复用</h3><p><img src="/images/netty/10039.png" alt="https://note.youdao.com/yws/public/resource/4499dc41109fc444d647af81e868e011/xmlnote/OFFICE722B9A51523B45B2ACB3C53D589C11EF/10039"></p><blockquote><p>比较上面两张图，IO复用需要使用两个系统调用(select和recvfrom)，而blocking IO只调用了一个系统调用(recvfrom)。但是，用select的优势在于它可以同时处理多个connection。所以，如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</p></blockquote>',17),r={},n=(0,l(66262).A)(r,[["render",function(e,t){return i}]])},66262:(e,t)=>{t.A=(e,t)=>{const l=e.__vccOpts||e;for(const[e,i]of t)l[e]=i;return l}}}]);