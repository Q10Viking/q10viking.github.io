"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[73776],{63660:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-d8f8ebe4",path:"/ElasticStack/26%20%E6%96%87%E6%A1%A3%E5%88%86%E5%80%BC%E8%AE%A1%E7%AE%97%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/ElasticStack/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"boolean model",slug:"boolean-model",children:[]},{level:2,title:"relevance score算法",slug:"relevance-score算法",children:[]},{level:2,title:"分析分值计算的计划",slug:"分析分值计算的计划",children:[]}],filePathRelative:"ElasticStack/26 文档分值计算底层原理.md"}},87346:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const e=(0,a(20641).Fv)('<h2 id="boolean-model" tabindex="-1"><a class="header-anchor" href="#boolean-model" aria-hidden="true">#</a> boolean model</h2><p>根据用户的query条件，先过滤出包含指定term的doc</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>query <span class="token string">&quot;hello world&quot;</span> --<span class="token operator">&gt;</span>  hello / world / hello <span class="token operator">&amp;</span> world\n\nbool --<span class="token operator">&gt;</span> must/must not/should --<span class="token operator">&gt;</span> 过滤 --<span class="token operator">&gt;</span> 包含 / 不包含 / 可能包含\n\ndoc --<span class="token operator">&gt;</span> 不打分数 --<span class="token operator">&gt;</span> 正或反 <span class="token boolean">true</span> or <span class="token boolean">false</span> --<span class="token operator">&gt;</span> 为了减少后续要计算的doc的数量，提升性能\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="relevance-score算法" tabindex="-1"><a class="header-anchor" href="#relevance-score算法" aria-hidden="true">#</a> relevance score算法</h2><p>relevance score算法，简单来说，就是计算出，一个索引中的文本，与搜索文本，他们之间的关联匹配程度</p><p>Elasticsearch使用的是 term frequency/inverse document frequency算法，简称为TF/IDF算法</p><ol><li><strong>Term frequency</strong>：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，就越相关</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>搜索请求：hello world\n\ndoc1：hello you, and world is very good\n\ndoc2：hello, how are you\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li><strong>Inverse document frequency</strong>：搜索文本中的各个词条<strong>在整个索引的所有文档中出现了多少次</strong>，出现的次数越多，就越不相关</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>搜索请求：hello world\n\ndoc1：hello, tuling is very good\n\ndoc2：hi world, how are you\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>比如说，在index中有1万条document，hello这个单词在所有的document中，一共出现了1000次；world这个单词在所有的document中，一共出现了100次</p><ol start="3"><li>Field-length norm：field长度，field越长，相关度越弱</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>doc1：<span class="token punctuation">{</span> <span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;hello article&quot;</span>, <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;...... N个单词&quot;</span> <span class="token punctuation">}</span>\n\ndoc2：<span class="token punctuation">{</span> <span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;my article&quot;</span>, <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;...... N个单词，hi world&quot;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>hello world在整个index中出现的次数是一样多的，但是doc1更相关，title field更短</p><h2 id="分析分值计算的计划" tabindex="-1"><a class="header-anchor" href="#分析分值计算的计划" aria-hidden="true">#</a> 分析分值计算的计划</h2><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /es_db/_doc/<span class="token number">1</span>/_explain\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;remark&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java developer&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',16),l={},o=(0,a(66262).A)(l,[["render",function(n,s){return e}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);