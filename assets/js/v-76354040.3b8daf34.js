"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[88287],{16564:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-76354040",path:"/Nginx/03%20%E9%AB%98%E5%B9%B6%E5%8F%91web%E8%AF%B7%E6%B1%82%E6%9C%BA%E5%88%B6.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Nginx/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Work抢占机制",slug:"work抢占机制",children:[]},{level:2,title:"Nginx事件处理",slug:"nginx事件处理",children:[]}],filePathRelative:"Nginx/03 高并发web请求机制.md"}},58543:(n,s,e)=>{e.r(s),e.d(s,{default:()=>l});const a=(0,e(20641).Fv)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Nginx高并发处理请求的原因</p><ol><li>worker抢占机制</li><li>使用多路复用epoll模型</li></ol></div><h2 id="work抢占机制" tabindex="-1"><a class="header-anchor" href="#work抢占机制" aria-hidden="true">#</a> Work抢占机制</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># nginx.conf配置工作线程为3的情况</span>\nworker_processes  <span class="token number">3</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>客户端（如浏览器）发送一个请求过来，那么这3个work就需要抢占这个这个请求(有一个锁)，建立相应的关系。（解析请求，处理，响应）</p><p><img src="/images/nginx/image-20220810013354959.png" alt="image-20220810013354959"></p><h2 id="nginx事件处理" tabindex="-1"><a class="header-anchor" href="#nginx事件处理" aria-hidden="true">#</a> Nginx事件处理</h2><p>阻塞模型中，worker工作进程在处理一个客户端请求的时候会发生阻塞，此时其他的客户端请求会就阻塞等待。直到worker处理完这个请求完毕，才接着处理下一个请求</p><p><img src="/images/nginx/image-20220810013821503.png" alt="image-20220810013821503"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>nginx采用了lepoll模型机制(异步非阻塞)</p></div><p>worker接收了一个请求，尽管还没有处理完成，但是仍然还会接收请求，不会发生阻塞</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># ngnix.conf</span>\nevents <span class="token punctuation">{</span>\n    <span class="token comment"># 默认的多路复用linux epoll</span>\n    use\tepoll<span class="token punctuation">;</span>\n    <span class="token comment"># 每个worker允许客户端最大连接数</span>\n    worker_connections  <span class="token number">10240</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',11),i={},l=(0,e(66262).A)(i,[["render",function(n,s){return a}]])},66262:(n,s)=>{s.A=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);