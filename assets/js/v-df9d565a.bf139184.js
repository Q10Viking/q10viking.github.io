"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[66158],{57659:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-df9d565a",path:"/Redis/31%20Redis%E9%9B%86%E7%BE%A4%E6%A7%BD%E4%BD%8D%E5%88%86%E6%9E%90.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Redis集群原理",slug:"redis集群原理",children:[]},{level:2,title:"槽位定位算法",slug:"槽位定位算法",children:[]},{level:2,title:"跳转重定位",slug:"跳转重定位",children:[]}],filePathRelative:"Redis/31 Redis集群槽位分析.md"}},20732:(s,n,a)=>{a.r(n),a.d(n,{default:()=>i});var e=a(20641);const t=(0,e.Fv)('<h2 id="redis集群原理" tabindex="-1"><a class="header-anchor" href="#redis集群原理" aria-hidden="true">#</a> Redis集群原理</h2><p>Redis Cluster 将所有数据划分为 16384 个 slots(槽位)，每个节点负责其中一部分槽位。<strong>槽位的信息存储于每个节点中。</strong></p><p>当 Redis Cluster 的客户端来连接集群时，它也会得到一份集群的槽位配置信息并将其缓存在客户端本地。这样当客户端要查找某个 key 时，可以直接定位到目标节点。同时因为槽位的信息可能会存在客户端与服务器不一致的情况，<strong>还需要纠正机制来实现槽位信息的校验调整。</strong></p><h2 id="槽位定位算法" tabindex="-1"><a class="header-anchor" href="#槽位定位算法" aria-hidden="true">#</a> <strong>槽位定位算法</strong></h2><p>Cluster 默认会对 key 值使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对 16384 进行取模来得到具体槽位。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token constant">HASH_SLOT</span> <span class="token operator">=</span> <span class="token function">CRC16</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> mod <span class="token number">16384</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',6),p={class:"custom-container tip"},o=(0,e.Lk)("p",{class:"custom-container-title"},"TIP",-1),c={href:"https://github.com/Q10Viking/learncode/blob/main/redis/_01_java_redis/src/main/java/org/hzz/CRC16.java",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Fv)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * Redis分片算法\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CRC16</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> key<span class="token operator">=</span><span class="token string">&quot;user:q10viking&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">// 4132</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">JedisClusterCRC16</span><span class="token punctuation">.</span><span class="token function">getCRC16</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16384</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="跳转重定位" tabindex="-1"><a class="header-anchor" href="#跳转重定位" aria-hidden="true">#</a> <strong>跳转重定位</strong></h2><p>当客户端向一个错误的节点发出了指令，该节点会发现指令的 key 所在的槽位并不归自己管理，这时它会向客户端发送一个特殊的<strong>跳转指令携带目标操作的节点地址</strong>，告诉客户端去连这个节点去获取数据。客户端收到指令后除了跳转到正确的节点上去操作，<strong>还会同步更新纠正本地的槽位映射表缓存</strong>，后续所有 key 将使用新的槽位映射表。</p><img src="/images/Redis/image-20211115052035574.png" alt="image-20211115052035574" style="zoom:80%;">',4),r={},i=(0,a(66262).A)(r,[["render",function(s,n){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[t,(0,e.Lk)("div",p,[o,(0,e.Lk)("p",null,[(0,e.Lk)("a",c,[(0,e.eW)("Source Code CRC16.java"),(0,e.bF)(a)])])]),l],64)}]])},66262:(s,n)=>{n.A=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);