"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[56163],{51489:(a,e,s)=>{s.r(e),s.d(e,{data:()=>t});const t={key:"v-fea27000",path:"/JVM/22%20%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E8%8A%82%E7%A0%81.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/JVM/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"java中的编译器和解释器",slug:"java中的编译器和解释器",children:[]},{level:2,title:"采用字节码的好处",slug:"采用字节码的好处",children:[]}],filePathRelative:"JVM/22 什么是字节码.md"}},25101:(a,e,s)=>{s.r(e),s.d(e,{default:()=>r});const t=(0,s(20641).Fv)('<h2 id="java中的编译器和解释器" tabindex="-1"><a class="header-anchor" href="#java中的编译器和解释器" aria-hidden="true">#</a> java中的编译器和解释器</h2><p>Java中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟的机器。这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口。 编译程序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由解释器来将虚拟机代码转换为特定系统的机器码执行。在Java中，这种供虚拟机理解的代码叫做 字节码（即扩展名为 .class的文件），它不面向任何特定的处理器，只面向虚拟机。</p><p>每一种平台的解释器是不同的，但是实现的虚拟机是相同的。Java源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器，解释器将其翻译成特定机器上的机器码，然后在特定的机器上运行。这也就是解释了Java的编译与解释并存的特点。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Java源代码----<span class="token operator">&gt;</span>编译器----<span class="token operator">&gt;</span>jvm可执行的Java字节码<span class="token punctuation">(</span>即虚拟指令<span class="token punctuation">)</span>----<span class="token operator">&gt;</span>jvm----<span class="token operator">&gt;</span>jvm中解释器-----<span class="token operator">&gt;</span>机器可执行的二进制机器码----<span class="token operator">&gt;</span>程序运行\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="采用字节码的好处" tabindex="-1"><a class="header-anchor" href="#采用字节码的好处" aria-hidden="true">#</a> 采用字节码的好处</h2><p>Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以Java程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，因此，Java程序无须重新编译便可在多种不同的计算机上运行。</p><blockquote><p>一次编译，到处运行</p></blockquote>',7),n={},r=(0,s(66262).A)(n,[["render",function(a,e){return t}]])},66262:(a,e)=>{e.A=(a,e)=>{const s=a.__vccOpts||a;for(const[a,t]of e)s[a]=t;return s}}}]);