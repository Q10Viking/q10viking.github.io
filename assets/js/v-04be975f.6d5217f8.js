"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[90726],{79574:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-04be975f",path:"/ElasticStack/10%20DSL%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:4,sidebar:"auto",prev:{text:"Back To 目录",link:"/ElasticStack/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Query DSL概述",slug:"query-dsl概述",children:[]},{level:2,title:"DSL 分类",slug:"dsl-分类",children:[{level:3,title:"查询DSL(query DSL)",slug:"查询dsl-query-dsl",children:[]},{level:3,title:"过滤DSL(filter DSL)",slug:"过滤dsl-filter-dsl",children:[]}]},{level:2,title:"无条件查询❤️",slug:"无条件查询❤️",children:[]},{level:2,title:"叶子(单条件)查询",slug:"叶子-单条件-查询",children:[{level:3,title:"模糊匹配",slug:"模糊匹配",children:[]},{level:3,title:"match_phase",slug:"match-phase",children:[]},{level:3,title:"精准匹配",slug:"精准匹配",children:[]}]},{level:2,title:"组合(多条件)查询",slug:"组合-多条件-查询",children:[]},{level:2,title:"连接查询",slug:"连接查询",children:[]},{level:2,title:"辅助的查询",slug:"辅助的查询",children:[{level:3,title:"range",slug:"range",children:[]},{level:3,title:"分页、输出字段、排序查询❤️",slug:"分页、输出字段、排序查询❤️",children:[]}]}],filePathRelative:"ElasticStack/10 DSL高级查询.md"}},22155:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var e=a(20641);const p=(0,e.Fv)('<h2 id="query-dsl概述" tabindex="-1"><a class="header-anchor" href="#query-dsl概述" aria-hidden="true">#</a> <strong>Query DSL概述</strong></h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li><strong>Domain Specific Language</strong> 领域专用语言</li><li><strong>Elasticsearch provides a ful1 Query DSL based on JSON to define queries</strong> Elasticsearch提供了基于JSON的DSL来定义查询。</li><li>DSL由叶子查询子句和复合查询子句两种子句组成。</li></ol></div><p><img src="/images/elasticsearch/image-20210502152538965.png" alt="image-20210502152538965"></p><hr><h2 id="dsl-分类" tabindex="-1"><a class="header-anchor" href="#dsl-分类" aria-hidden="true">#</a> DSL 分类</h2><p>DSL查询语言中存在两种：查询DSL（query DSL）和过滤DSL（filter DSL）</p><p><img src="/images/elasticsearch/3368" alt="img"></p><h3 id="查询dsl-query-dsl" tabindex="-1"><a class="header-anchor" href="#查询dsl-query-dsl" aria-hidden="true">#</a> 查询DSL(query DSL)</h3><p>在查询上下文中，查询会回答这个问题——“这个文档匹不匹配这个查询，它的相关度高么？”</p><p>如何验证匹配很好理解，如何计算相关度呢？ES中索引的数据都会存储一个**_score**分值，分值越高就代表越匹配。另外关于某个搜索的分值计算还是很复杂的，因此也需要一定的时间。</p><h3 id="过滤dsl-filter-dsl" tabindex="-1"><a class="header-anchor" href="#过滤dsl-filter-dsl" aria-hidden="true">#</a> 过滤DSL(filter DSL)</h3><p>在过滤器上下文中，查询会回答这个问题——“这个文档匹不匹配？” 答案很简单，是或者不是。它不<strong>会去计算任何分值，也不会关心返回的排序问题</strong>，因此效率会高一点。</p><p>过滤上下文 是在使用filter参数时候的执行环境，比如在bool查询中使用must_not或者filter</p><p>另外，经常使用过滤器，<strong>ES会自动的缓存过滤器的内容</strong>，这对于查询来说，会提高很多性能。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>POST /es_db/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;bool&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">25</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="无条件查询❤️" tabindex="-1"><a class="header-anchor" href="#无条件查询❤️" aria-hidden="true">#</a> 无条件查询❤️</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>无查询条件是查询所有，默认是查询所有的，或者使用<strong>match_all</strong>表示所有</p></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET /article/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="叶子-单条件-查询" tabindex="-1"><a class="header-anchor" href="#叶子-单条件-查询" aria-hidden="true">#</a> 叶子(单条件)查询</h2><h3 id="模糊匹配" tabindex="-1"><a class="header-anchor" href="#模糊匹配" aria-hidden="true">#</a> 模糊匹配</h3><p>模糊匹配主要是针对文本类型的字段，文本类型的字段会对内容进行分词，对查询时，也<strong>会对搜索条件进行分词</strong>，然后通过倒排索引查找到匹配的数据，模糊匹配主要通过match等参数来实现</p><ul><li>match : 通过match关键词模糊匹配条件内容</li><li>prefix : 前缀匹配</li><li>regexp : 通过正则表达式来匹配数据</li></ul><h4 id="match❤️" tabindex="-1"><a class="header-anchor" href="#match❤️" aria-hidden="true">#</a> match❤️</h4>',23),t={class:"custom-container tip"},l=(0,e.Lk)("p",{class:"custom-container-title"},"TIP",-1),r={href:"https://q10viking.github.io/ElasticStack/12%20match%E6%9F%A5%E8%AF%A2.html",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Fv)('<p>match：模糊匹配，<strong>需要指定字段名，但是输入会进行分词</strong>，比如&quot;hello world&quot;会进行拆分为hello和world，然后匹配，如果字段中包含hello或者world，或者都包含的结果都会被查询出来，也就是说match是一个部分匹配的模糊查询。查询条件相对来说比较宽松。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>match : 通过match关键词模糊匹配条件内容</p></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>POST /es_db/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;from&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;广州&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="/images/elasticsearch/image-20220812225735111.png" alt="image-20220812225735111"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>match的复杂用法</p></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>query : 指定匹配的值\noperator : 匹配条件类型\n\tand : 条件分词后都要匹配\n\tor : 条件分词后有一个匹配即可(默认)\nminmum_should_match : 指定最小匹配的数量\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="multi-match❤️" tabindex="-1"><a class="header-anchor" href="#multi-match❤️" aria-hidden="true">#</a> multi_match❤️</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>多字段模糊查询</p></div><blockquote><p>相当于： <code>select * from student where name like &#39;%张三%&#39; or address like &#39;%张三%&#39;</code></p></blockquote><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>POST /es_db/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;multi_match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;name&quot;</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="query-string❤️" tabindex="-1"><a class="header-anchor" href="#query-string❤️" aria-hidden="true">#</a> query_string❤️</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>query_string：和match类似，但是match需要指定字段名，<strong>query_string是在所有字段中搜索，范围更广泛</strong></p><p>未指定字段条件查询 <strong>query_string</strong> , 含 AND 与 OR 条件</p></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>POST /es_db/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;query_string&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;广州 AND 天河&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="/images/elasticsearch/image-20220812230438903.png" alt="image-20220812230438903"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>指定字段条件查询 query_string , 含 AND 与 OR 条件</p></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>POST /es_db/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;query_string&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin OR 张三&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;address&quot;</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="/images/elasticsearch/image-20220812230845510.png" alt="image-20220812230845510"></p><h3 id="match-phase" tabindex="-1"><a class="header-anchor" href="#match-phase" aria-hidden="true">#</a> match_phase</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>match_phase：不会对输入做分词(???)，但是需要结果中也包含所有的分词，而且顺序要求一样。以&quot;hello world&quot;为例，要求结果中必须包含hello和world，而且还要求他们是连着的，顺序也是固定的，hello that world不满足，world hello也不满足条件。</p></div><h3 id="精准匹配" tabindex="-1"><a class="header-anchor" href="#精准匹配" aria-hidden="true">#</a> 精准匹配</h3><ul><li>term : 单个条件相等</li><li>terms : 单个字段属于某个数组内的值（聚合中用到了）</li><li>range : 字段属于某个范围内的值</li><li>exists : 某个字段的值是否存在</li><li>ids : 通过ID批量查询</li></ul><h4 id="term" tabindex="-1"><a class="header-anchor" href="#term" aria-hidden="true">#</a> term</h4><blockquote><p>term: 这种查询和match在有些时候是等价的，比如我们查询单个的词hello，那么会和match查询结果一样，但是如果查询&quot;hello world&quot;，结果就相差很大，<strong>因为这个输入不会进行分词</strong>，就是说查询的时候，是查询字段分词结果中是否有&quot;hello world&quot;的字样，而不是查询字段中包含&quot;hello world&quot;的字样。当保存数据&quot;hello world&quot;时，elasticsearch会对字段内容进行分词，&quot;hello world&quot;会被分成hello和world，不存在&quot;hello world&quot;，因此这里的查询结果会为空。这也是term查询和match的区别。</p></blockquote><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>根据名称精确查询姓名 term, term查询不会对字段进行分词查询，会采用精确匹配</p></div><blockquote><p>注意: 采用term精确查询, 查询字段映射类型属于为keyword.</p></blockquote><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>POST /article/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;title.keyword&quot;</span><span class="token operator">:</span> <span class="token string">&quot;learn es 3&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="组合-多条件-查询" tabindex="-1"><a class="header-anchor" href="#组合-多条件-查询" aria-hidden="true">#</a> 组合(多条件)查询</h2><p>组合条件查询是将叶子条件查询语句进行组合而形成的一个完整的查询条件</p><ul><li><p>bool : 各条件之间有and,or或not的关系</p><ul><li>must : 各个条件都必须满足，即各条件是and的关系</li><li>should : 各个条件有一个满足即可，即各条件是or的关系</li><li>must_not : 不满足所有条件，即各条件是not的关系</li><li>filter : 不计算相关度评分，它不计算_score即相关度评分，效率更高</li></ul></li><li><p>constant_score : 不计算相关度评分</p></li></ul><p><strong>must/filter/shoud/must_not</strong> 等的子条件是通过 <strong>term/terms/range/ids/exists/match</strong> 等叶子条件为参数的</p><blockquote><p>注：以上参数，当只有一个搜索条件时，must等对应的是一个对象，当是多个条件时，对应的是一个数组</p></blockquote><h2 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询" aria-hidden="true">#</a> 连接查询</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>多文档合并查询</p></div><ul><li>父子文档查询：parent/child</li><li>嵌套文档查询: nested</li></ul><h2 id="辅助的查询" tabindex="-1"><a class="header-anchor" href="#辅助的查询" aria-hidden="true">#</a> 辅助的查询</h2><h3 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> range</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>范围查询</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>注：json请求字符串中部分字段的含义\n\trange：范围关键字\n\tgte 大于等于\n\tlte  小于等于\n\tgt 大于\n\tlt 小于\n\tnow 当前时间\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>POST /es_db/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;lte&quot;</span><span class="token operator">:</span> <span class="token number">28</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="分页、输出字段、排序查询❤️" tabindex="-1"><a class="header-anchor" href="#分页、输出字段、排序查询❤️" aria-hidden="true">#</a> 分页、输出字段、排序查询❤️</h3><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>POST /es_db/_doc/_search\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;lte&quot;</span><span class="token operator">:</span> <span class="token number">28</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;from&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;age&quot;</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',41),c={},u=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,e.g2)("OutboundLink");return(0,e.uX)(),(0,e.CE)(e.FK,null,[p,(0,e.Lk)("div",t,[l,(0,e.Lk)("p",null,[(0,e.Lk)("a",r,[(0,e.eW)("match 具体文章"),(0,e.bF)(a)])])]),o],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);