"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[50817],{35518:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-955c86a6",path:"/golang/15%20def%E4%B8%8E%E5%BC%82%E5%B8%B8.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/golang/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"defer",slug:"defer",children:[{level:3,title:"defer与匿名函数",slug:"defer与匿名函数",children:[]},{level:3,title:"defer与闭包",slug:"defer与闭包",children:[]},{level:3,title:"defer的应用",slug:"defer的应用",children:[]}]}],filePathRelative:"golang/15 def与异常.md"}},40436:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(20641).Fv)('<h2 id="defer" tabindex="-1"><a class="header-anchor" href="#defer" aria-hidden="true">#</a> defer</h2><p>defer关键字可以让函数或语句延迟到函数语句块的最结尾时，即即将退出函数时执行，即便函数中途报错结束、即便已经panic()、即便函数已经return了，也都会执行defer所推迟的对象。</p><p>其实defer的本质是，<strong>当在某个函数中使用了defer关键字，则创建一个独立的defer栈帧，并将该defer语句压入栈中</strong>，同时将其使用的相关变量也拷贝到该栈帧中（显然是按值拷贝的）。因为栈是LIFO方式，所以先压栈的后执行。<strong>因为是独立的栈帧，所以即使调用者函数已经返回或报错，也一样能在它们之后进入defer栈帧去执行</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\t<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\t<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\t<span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Ended&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\nStarting\nEnded\n4\n3\n2\n1\n*/</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="defer与匿名函数" tabindex="-1"><a class="header-anchor" href="#defer与匿名函数" aria-hidden="true">#</a> defer与匿名函数</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>因为函数传参是值copy,所以x为10的值在defer定义的时候已经copy传入defer, <strong>后面的修改并不会影响到defer中的值</strong></p></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tx <span class="token operator">:=</span> <span class="token number">2</span>\n\t<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n\tx <span class="token operator">=</span> <span class="token number">10</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\nx = 10\nx = 2\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="defer与闭包" tabindex="-1"><a class="header-anchor" href="#defer与闭包" aria-hidden="true">#</a> defer与闭包</h3><blockquote><p>最常用的就是直接使用闭包的方式:</p><p>注意: <strong>后面的修改并不会影响到defer中的值</strong></p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tx <span class="token operator">:=</span> <span class="token number">10</span>\n\t<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tx <span class="token operator">=</span> <span class="token number">100</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;func end: &quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\nfunc end:  100\nx = 100\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="defer的应用" tabindex="-1"><a class="header-anchor" href="#defer的应用" aria-hidden="true">#</a> defer的应用</h3><p>defer有什么用呢？一般用来做善后操作，例如清理垃圾、释放资源，无论是否报错都执行defer对象。另一方面，defer可以让这些善后操作的语句和开始语句放在一起，无论在可读性上还是安全性上都很有改善，毕竟写完开始语句就可以直接写defer语句，永远也不会忘记关闭、善后等操作</p>',12),p={},t=(0,a(66262).A)(p,[["render",function(n,s){return e}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);