"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[73050],{24797:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-67921f58",path:"/minifrontendproject/30%20Drag%20N%20Drop.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/minifrontendproject/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Drag N Drop",slug:"drag-n-drop",children:[]},{level:2,title:"原理",slug:"原理",children:[]},{level:2,title:"html属性draggable",slug:"html属性draggable",children:[]},{level:2,title:"drop事件为什么没触发？",slug:"drop事件为什么没触发",children:[]},{level:2,title:"DOM元素是如何移动的？",slug:"dom元素是如何移动的",children:[]},{level:2,title:"ts中函数参数声明this",slug:"ts中函数参数声明this",children:[]},{level:2,title:"拖拽开始后如何隐藏在原来容器的位置？",slug:"拖拽开始后如何隐藏在原来容器的位置",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"minifrontendproject/30 Drag N Drop.md"}},1114:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var t=a(20641);const p=(0,t.Lk)("h2",{id:"drag-n-drop",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#drag-n-drop","aria-hidden":"true"},"#"),(0,t.eW)(" Drag N Drop")],-1),e={href:"https://q10viking.github.io/Mini-FrontEnd-project/35%20Drag%20N%20Drop/vanilla/dist/",target:"_blank",rel:"noopener noreferrer"},o={href:"https://github.com/Q10Viking/Mini-FrontEnd-project/tree/main/35%20Drag%20N%20Drop/vanilla",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Fv)('<h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>元素设置draggable,打开可拖拽的可能性</li><li>监听相关的拖拽事件：其中分两部分，可拖拽元素的事件dragstart,dragend；拖拽元素落脚的容器元素的事件：dragenter,dragover,drop.</li><li>在每个监听事件触发的函数中我们就可以做一些程序的逻辑处理</li><li>最后在drop事件对应的函数中处理拖拽元素的转移。代码层面就是在落脚的容器元素append这个拖拽的元素。这个元素就会从原来的地方转移过来。</li></ol></div><h2 id="html属性draggable" tabindex="-1"><a class="header-anchor" href="#html属性draggable" aria-hidden="true">#</a> html属性draggable</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>dom元素设置了这个属性<code>draggable=true</code>,就能将元素拖拽起来</p></div><h2 id="drop事件为什么没触发" tabindex="-1"><a class="header-anchor" href="#drop事件为什么没触发" aria-hidden="true">#</a> drop事件为什么没触发？</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>原因是dragover有默认的行为，我们需要阻止它，否则的话在容器上一直处于dragover状态，不会触发drop事件</p></div><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">dragOver</span><span class="token punctuation">(</span>event<span class="token operator">:</span>Event<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 阻止dragover的默认行为，否者drop事件不会触发</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;drag over on&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="dom元素是如何移动的" tabindex="-1"><a class="header-anchor" href="#dom元素是如何移动的" aria-hidden="true">#</a> DOM元素是如何移动的？</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>通过选择器获取到元素之后，直接在插入到另外一个容器中，就能实现转移效果</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fill <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.fill&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span>\n<span class="token keyword">const</span> empties <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;.empty&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span>\nempties<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fill<span class="token punctuation">)</span> <span class="token comment">// 直接转移</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>原来的html 结构是这样</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>empty<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fill<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>empty<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>empty<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在执行了<code>empties[2].appendChild(fill) </code>之后fill的DOM元素直接转移了</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>empty<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>empty<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>empty<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fill<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 转移到了这里 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>下面实现了图片这个元素每隔1s自动在容器中转移，主要通过append添加到另外一个容器</p></blockquote>',15),l={href:"https://github.com/Q10Viking/Mini-FrontEnd-project/tree/main/35%20Drag%20N%20Drop/move-on",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Fv)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fill <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.fill&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span>\n<span class="token keyword">const</span> empties <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;.empty&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span>\n\n\n<span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>moveImage<span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">moveImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  idx<span class="token operator">++</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">&gt;</span>empties<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    idx <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 移动元素 核心代码</span>\n  empties<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fill<span class="token punctuation">)</span>\n  <span class="token comment">// 无限循环</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>moveImage<span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="ts中函数参数声明this" tabindex="-1"><a class="header-anchor" href="#ts中函数参数声明this" aria-hidden="true">#</a> ts中函数参数声明this</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>传进来的就是e.target</li><li>我这样写的原因是想使用this,尝试一下typescript的this语法。为了达到这个效果也可以将函数设计为传入event.</li></ol></div><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code>fill<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;dragstart&quot;</span><span class="token punctuation">,</span>dragStart<span class="token punctuation">)</span>\n<span class="token comment">/**\n * 传进来的就是e.target\n * @param this \n */</span>\n<span class="token keyword">function</span> <span class="token function">dragStart</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span>HTMLElement<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name-attr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;drag start&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>也可设计成</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>fill<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;dragstart&quot;</span><span class="token punctuation">,</span>dragStart<span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">dragStart</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">event</span><span class="token operator">:</span>Event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> el <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLElement\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name-attr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;drag start&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="拖拽开始后如何隐藏在原来容器的位置" tabindex="-1"><a class="header-anchor" href="#拖拽开始后如何隐藏在原来容器的位置" aria-hidden="true">#</a> 拖拽开始后如何隐藏在原来容器的位置？</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>拖拽之后立刻去除样式，但是样式在拖拽的元素中仍然生效</p></div><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">dragStart</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span>HTMLElement<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 设置新的样式</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hold&quot;</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 拖拽之后立刻去除样式，但是样式在拖拽的元素中仍然生效</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name-attr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;drag start&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',10),i={href:"https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API",target:"_blank",rel:"noopener noreferrer"},r={},k=(0,a(66262).A)(r,[["render",function(n,s){const a=(0,t.g2)("OutboundLink"),r=(0,t.g2)("common-progresson-snippet"),k=(0,t.g2)("common-codepen-snippet");return(0,t.uX)(),(0,t.CE)(t.FK,null,[p,(0,t.Lk)("p",null,[(0,t.Lk)("a",e,[(0,t.eW)("项目预览（Project view）"),(0,t.bF)(a)])]),(0,t.Lk)("p",null,[(0,t.Lk)("a",o,[(0,t.eW)("vanilla Source Code"),(0,t.bF)(a)])]),(0,t.bF)(r,{src:"https://q10viking.github.io/Mini-FrontEnd-project/35%20Drag%20N%20Drop/vanilla/dist/"}),c,(0,t.bF)(k,{title:"Move DOM",slug:"poLWgPN"}),(0,t.bF)(r,{src:"https://q10viking.github.io/Mini-FrontEnd-project/35%20Drag%20N%20Drop/move-on/dist/"}),(0,t.Lk)("p",null,[(0,t.Lk)("a",l,[(0,t.eW)("Auto Move Source Code"),(0,t.bF)(a)])]),u,(0,t.Lk)("p",null,[(0,t.Lk)("a",i,[(0,t.eW)("HTML Drag and Drop API - Web APIs | MDN (mozilla.org)"),(0,t.bF)(a)])])],64)}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);