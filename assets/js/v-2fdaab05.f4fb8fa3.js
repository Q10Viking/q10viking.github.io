"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[76953],{59671:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2fdaab05",path:"/golang/11%20%E7%BB%93%E6%9E%84%E4%BD%93.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/golang/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"定义结构体",slug:"定义结构体",children:[{level:3,title:"初始化",slug:"初始化",children:[]},{level:3,title:"基本使用",slug:"基本使用",children:[]}]},{level:2,title:"结构体指针",slug:"结构体指针",children:[]},{level:2,title:"结构体方法",slug:"结构体方法",children:[]},{level:2,title:"嵌套结构体",slug:"嵌套结构体",children:[{level:3,title:"组合结构体",slug:"组合结构体",children:[]},{level:3,title:"匿名结构体",slug:"匿名结构体",children:[]}]},{level:2,title:"结构体字段的内存对齐",slug:"结构体字段的内存对齐",children:[]}],filePathRelative:"golang/11 结构体.md"}},33370:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(20641).Fv)('<h2 id="定义结构体" tabindex="-1"><a class="header-anchor" href="#定义结构体" aria-hidden="true">#</a> 定义结构体</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Car <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    Color <span class="token builtin">string</span>  <span class="token comment">// 颜色</span>\n    Brand <span class="token builtin">string</span>  <span class="token comment">// 品牌</span>\n    Model <span class="token builtin">string</span>  <span class="token comment">// 型号</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> car Car   <span class="token comment">// 初始化一个Car实例, car就代表是一辆具体的车(Object)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><ul><li><p>use new()</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>car <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>using a struct literal</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>car <span class="token operator">:=</span> Car<span class="token punctuation">{</span>\n    Color<span class="token punctuation">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>\n    Brand<span class="token punctuation">:</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">,</span>\n    Model<span class="token punctuation">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span>\n    price<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Car <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tColor <span class="token builtin">string</span>\n\tBrand <span class="token builtin">string</span>\n\tModel <span class="token builtin">string</span>\n\tprice <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> car Car\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> car<span class="token punctuation">)</span> <span class="token comment">// {Color: Brand: Model: price:0}</span>\n\tcar <span class="token operator">=</span> Car<span class="token punctuation">{</span>\n\t\tColor<span class="token punctuation">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>\n\t\tBrand<span class="token punctuation">:</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">,</span>\n\t\tModel<span class="token punctuation">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span>\n\t\tprice<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> car<span class="token punctuation">)</span> <span class="token comment">// {Color:red Brand:BMW Model:5 price:100}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="结构体指针" tabindex="-1"><a class="header-anchor" href="#结构体指针" aria-hidden="true">#</a> 结构体指针</h2><blockquote><p>由于go中值的传递时复制的并不会影响原来的值</p></blockquote><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">changeToBlue</span><span class="token punctuation">(</span>car Car<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tcar<span class="token punctuation">.</span>Color <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tcar <span class="token operator">:=</span> Car<span class="token punctuation">{</span>\n\t\tColor<span class="token punctuation">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>\n\t\tBrand<span class="token punctuation">:</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">,</span>\n\t\tModel<span class="token punctuation">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span>\n\t\tprice<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">changeToBlue</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> car<span class="token punctuation">)</span> <span class="token comment">// {Color:red Brand:BMW Model:5 price:100}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>使用结构体指针</p></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">changeToBlue</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    car<span class="token punctuation">.</span>Color <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> car<span class="token punctuation">)</span> <span class="token comment">//0xc0000d6000</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    car <span class="token operator">:=</span> <span class="token operator">&amp;</span>Car<span class="token punctuation">{</span>\n        Color<span class="token punctuation">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>\n        Brand<span class="token punctuation">:</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">,</span>\n        Model<span class="token punctuation">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span>\n        price<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> car<span class="token punctuation">)</span> <span class="token comment">//0xc0000d6000</span>\n    <span class="token function">changeToBlue</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>car<span class="token punctuation">)</span> <span class="token comment">// {Color:blue Brand:BMW Model:5 price:100}</span>\n    \n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>Color<span class="token punctuation">)</span>    <span class="token comment">// blue</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>car<span class="token punctuation">)</span><span class="token punctuation">.</span>Color<span class="token punctuation">)</span> <span class="token comment">// blue</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="结构体方法" tabindex="-1"><a class="header-anchor" href="#结构体方法" aria-hidden="true">#</a> 结构体方法</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Go中也有方法，它是一种特殊的函数，定义于struct之上(与struct关联、绑定)，被称为struct的receiver</p></div><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tname<span class="token punctuation">,</span> msg <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, %s! %s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tp <span class="token operator">:=</span> Person<span class="token punctuation">{</span>\n\t\tname<span class="token punctuation">:</span> <span class="token string">&quot;静默&quot;</span><span class="token punctuation">,</span>\n\t\tmsg<span class="token punctuation">:</span>  <span class="token string">&quot;Learning Go programming&quot;</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\tp<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Hello, 静默! Learning Go programming</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="嵌套结构体" tabindex="-1"><a class="header-anchor" href="#嵌套结构体" aria-hidden="true">#</a> 嵌套结构体</h2><h3 id="组合结构体" tabindex="-1"><a class="header-anchor" href="#组合结构体" aria-hidden="true">#</a> 组合结构体</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> Author <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tName   <span class="token builtin">string</span>\n\tMacket <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 组合</span>\n<span class="token keyword">type</span> Book <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tTitle  <span class="token builtin">string</span>\n\tAuthor Author\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tbook <span class="token operator">:=</span> Book<span class="token punctuation">{</span>\n\t\tTitle<span class="token punctuation">:</span>  <span class="token string">&quot;Go Programming&quot;</span><span class="token punctuation">,</span>\n\t\tAuthor<span class="token punctuation">:</span> Author<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;静默&quot;</span><span class="token punctuation">,</span> Macket<span class="token punctuation">:</span> <span class="token string">&quot;全站开发工程师&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">)</span> <span class="token comment">// {Title:Go Programming Author:{Name:静默 Macket:全站开发工程师}}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="匿名结构体" tabindex="-1"><a class="header-anchor" href="#匿名结构体" aria-hidden="true">#</a> 匿名结构体</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;encoding/json&quot;</span>\n\t<span class="token string">&quot;fmt&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Screen01 <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tSize       <span class="token builtin">float64</span> <span class="token comment">//屏幕尺寸</span>\n\tResX<span class="token punctuation">,</span> ResY <span class="token builtin">int</span>     <span class="token comment">//屏幕分辨率 水平 垂直</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Battery <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tCapacity <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 匿名结构体，临时组装数据</span>\n\ttempData <span class="token operator">:=</span> <span class="token operator">&amp;</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\t\tScreen01\n\t\tBattery\n\t\tHasTouchId <span class="token builtin">bool</span> <span class="token comment">//是否有指纹识别</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">{</span>\n\t\tScreen01<span class="token punctuation">:</span>   Screen01<span class="token punctuation">{</span>Size<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> ResX<span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">,</span> ResY<span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\tBattery<span class="token punctuation">:</span>    Battery<span class="token punctuation">{</span>Capacity<span class="token punctuation">:</span> <span class="token string">&quot;3.5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\tHasTouchId<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\n\tresult<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>tempData<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// {&quot;Size&quot;:12,&quot;ResX&quot;:36,&quot;ResY&quot;:36,&quot;Capacity&quot;:&quot;3.5&quot;,&quot;HasTouchId&quot;:true}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="结构体字段的内存对齐" tabindex="-1"><a class="header-anchor" href="#结构体字段的内存对齐" aria-hidden="true">#</a> 结构体字段的内存对齐</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\ta <span class="token builtin">bool</span>\n\tb <span class="token builtin">int32</span>\n\tc <span class="token builtin">string</span>\n\td <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> B <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tb <span class="token builtin">int32</span>\n\tc <span class="token builtin">string</span>\n\td <span class="token builtin">string</span>\n\ta <span class="token builtin">bool</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">TestStructSize</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 多少</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>B<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 多少</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><img src="/images/golang/struct_size_01.png" alt="img"></p><p><img src="/images/golang/struct_size_02.png" alt="img"></p>',23),t={},e=(0,a(66262).A)(t,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);