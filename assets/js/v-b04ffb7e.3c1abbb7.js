"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[80568],{44343:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-b04ffb7e",path:"/Redis/41%20%E7%83%AD%E7%82%B9%E7%BC%93%E5%AD%98key%E9%97%AE%E9%A2%98.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/Redis/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"热点key重建",slug:"热点key重建",children:[]},{level:2,title:"你是如何解决热Key问题的",slug:"你是如何解决热key问题的",children:[]}],filePathRelative:"Redis/41 热点缓存key问题.md"}},10596:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(20641).Fv)('<h2 id="热点key重建" tabindex="-1"><a class="header-anchor" href="#热点key重建" aria-hidden="true">#</a> 热点key重建</h2><blockquote><p>开发人员使用“缓存+过期时间”的策略既可以加速数据读写， 又保证数据的定期更新， 这种模式基本能够满足绝大部分需求。 但是有两个问题如果同时出现， 可能就会对应用造成致命的危害：</p></blockquote><ol><li>当前key是一个热点key（例如一个热门的娱乐新闻），并发量非常大。</li><li>重建缓存不能在短时间完成， 可能是一个复杂计算， 例如复杂的SQL、 多次IO、 多个依赖等。</li></ol><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>❤️在缓存失效的瞬间， 有大量线程来重建缓存， 造成后端负载加大， 甚至可能会让应用崩溃。❤️</p><p>要解决这个问题❤️主要就是要避免大量线程同时重建缓存（查询数据库，放入缓存）❤️。</p></div><p>我们可以❤️利用互斥锁来解决，此方法只允许一个线程重建缓存， 其他线程等待重建缓存的线程执行完， 重新从缓存获取数据即可❤️。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 从Redis中获取数据</span>\n    <span class="token class-name">String</span> value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 如果value为空， 则开始重构缓存</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 只允许一个线程重建缓存， 使用nx， 并设置过期时间ex 利用分布式锁</span>\n        <span class="token class-name">String</span> mutexKey <span class="token operator">=</span> <span class="token string">&quot;mutext:key:&quot;</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>mutexKey<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ex 180&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 拿锁成功的锁进行，进行数据库查询</span>\n             <span class="token comment">// 从数据源获取数据 double check 的思想</span>\n            value <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 回写Redis， 并设置过期时间</span>\n            redis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 删除key_mutex</span>\n            redis<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>mutexKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 其他线程休息50毫秒后重试</span>\n            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="你是如何解决热key问题的" tabindex="-1"><a class="header-anchor" href="#你是如何解决热key问题的" aria-hidden="true">#</a> 你是如何解决热Key问题的</h2><p>热 Key 问题是指在缓存系统中，某些特定的缓存key受到高频访问，导致对这些热门数据的读取/写入操作集中在少数几个缓存节点上，使得这些节点的负载过高，而其他节点负载较轻甚至空闲。这会造成系统性能不均衡，可能导致部分请求响应变慢或服务不可用。</p><p>解决热 Key 问题有这些方案：</p><ol><li><p>**缓存预热：**在系统启动或业务低峰期，通过批量加载或预先访问热门数据，将这些热门数据提前加载到缓存中。这样可以避免大量请求同时涌入导致的热点问题，提高系统的稳定性和性能。</p></li><li><p>**动态散列：**将缓存节点组织成一个哈希环，根据缓存键的哈希值将数据分散存储在多个节点上。通过增加缓存节点的数量，让请求更均匀地分布在各个节点上，减轻热 Key 对单个节点的压力。当节点数量发生变化时，可以通过一致性哈希算法进行平滑迁移，避免数据大规模迁移带来的负载过高。</p></li><li><p>**数据分片：**将数据按特定规则（如数据范围、业务维度等）分成多个片段，分别存储在不同的缓存节点上。这样可以使热 Key 所在的数据尽量均匀地分布在多个节点上，减轻单个节点的压力。</p></li><li><p><strong>备份热key</strong>。这个方案也很简单。不要让key走到同一台redis上不就行了。我们把这个key，在多个redis上都存一份不就好了。接下来，有热key请求进来的时候，我们就在有备份的redis上随机选取一台，进行访问取值，返回数据。</p><p>假设redis的集群数量为N，步骤如下图所示</p><p><img src="/images/Redis/725429-20190516112222759-656135438.png" alt="img"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">const</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token comment">//生成随机数</span>\nrandom <span class="token operator">=</span> <span class="token class-name">GenRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">)</span>\n<span class="token comment">//构造备份新key</span>\nbakHotKey <span class="token operator">=</span> hotKey <span class="token operator">+</span> “_” <span class="token operator">+</span> random\ndata <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span>bakHotKey<span class="token punctuation">)</span>\n<span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">{</span>\n    data <span class="token operator">=</span> <span class="token class-name">GetFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    redis<span class="token punctuation">.</span><span class="token function">SET</span><span class="token punctuation">(</span>bakHotKey<span class="token punctuation">,</span> expireTime <span class="token operator">+</span> <span class="token class-name">GenRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="5"><li><strong>读写分离</strong>，读写分离可以将读操作与写操作分开处理，降低单个节点的负载。在主从复制模式下，可以将读操作分发到从节点上，从而分担主节点的压力</li><li><strong>限流</strong></li><li><strong>JVM本地缓存</strong></li></ol></li></ol>',10),e={},t=(0,a(66262).A)(e,[["render",function(n,s){return p}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);