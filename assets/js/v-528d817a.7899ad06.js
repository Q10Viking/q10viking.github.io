"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[35032],{86926:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-528d817a",path:"/javascript/05%20%E5%AD%97%E7%AC%A6%E4%B8%B2.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/javascript/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"1 字符串操作",slug:"_1-字符串操作",children:[{level:3,title:"1.1 charAt对应位置上的字符",slug:"_1-1-charat对应位置上的字符",children:[]},{level:3,title:"1.2 字符编码相关",slug:"_1-2-字符编码相关",children:[]},{level:3,title:"1.3 字符串位置",slug:"_1-3-字符串位置",children:[]},{level:3,title:"1.4 截取字符串",slug:"_1-4-截取字符串",children:[]},{level:3,title:"1.5  split 分割为数组s",slug:"_1-5-split-分割为数组s",children:[]},{level:3,title:"1.6 replaceAll",slug:"_1-6-replaceall",children:[]},{level:3,title:"1.6.1 玩法：实现上述效果不用replace",slug:"_1-6-1-玩法-实现上述效果不用replace",children:[]},{level:3,title:"1.7 startsWith",slug:"_1-7-startswith",children:[]},{level:3,title:"1.8 endsWith",slug:"_1-8-endswith",children:[]},{level:3,title:"1.9 includes",slug:"_1-9-includes",children:[]},{level:3,title:"1.10 padStart(位数,填充的字符)",slug:"_1-10-padstart-位数-填充的字符",children:[]},{level:3,title:"1.11 repeat重复字符串",slug:"_1-11-repeat重复字符串",children:[]}]},{level:2,title:"2 模板字符串",slug:"_2-模板字符串",children:[{level:3,title:"2.1 底层原理是通过正则匹配字符串",slug:"_2-1-底层原理是通过正则匹配字符串",children:[]},{level:3,title:"2.2 玩法：快速拼接成有序列表",slug:"_2-2-玩法-快速拼接成有序列表",children:[]},{level:3,title:"2.3 玩法：web中content-type",slug:"_2-3-玩法-web中content-type",children:[]},{level:3,title:"2.4 模板标签",slug:"_2-4-模板标签",children:[]}]}],filePathRelative:"javascript/05 字符串.md"}},15791:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(20641).Fv)('<h2 id="_1-字符串操作" tabindex="-1"><a class="header-anchor" href="#_1-字符串操作" aria-hidden="true">#</a> 1 字符串操作</h2><h3 id="_1-1-charat对应位置上的字符" tabindex="-1"><a class="header-anchor" href="#_1-1-charat对应位置上的字符" aria-hidden="true">#</a> 1.1 charAt对应位置上的字符</h3><h4 id="_1-1-1-字符串通过-index-获取" tabindex="-1"><a class="header-anchor" href="#_1-1-1-字符串通过-index-获取" aria-hidden="true">#</a> 1.1.1 字符串通过[index]获取</h4><h3 id="_1-2-字符编码相关" tabindex="-1"><a class="header-anchor" href="#_1-2-字符编码相关" aria-hidden="true">#</a> 1.2 字符编码相关</h3><h4 id="_1-2-1-charcodeat对应位置上的编码" tabindex="-1"><a class="header-anchor" href="#_1-2-1-charcodeat对应位置上的编码" aria-hidden="true">#</a> 1.2.1 charCodeAt对应位置上的编码</h4><h5 id="_1-a-97" tabindex="-1"><a class="header-anchor" href="#_1-a-97" aria-hidden="true">#</a> 1 ’a‘-97</h5><h5 id="_2-a-65" tabindex="-1"><a class="header-anchor" href="#_2-a-65" aria-hidden="true">#</a> 2 &#39;A&#39;-65</h5><h5 id="_3-0-48" tabindex="-1"><a class="header-anchor" href="#_3-0-48" aria-hidden="true">#</a> 3 &#39;0&#39;-48</h5><h4 id="_1-2-2-string-fromcharcode-code-编码转字符" tabindex="-1"><a class="header-anchor" href="#_1-2-2-string-fromcharcode-code-编码转字符" aria-hidden="true">#</a> 1.2.2 String.fromCharCode(code)编码转字符</h4><h3 id="_1-3-字符串位置" tabindex="-1"><a class="header-anchor" href="#_1-3-字符串位置" aria-hidden="true">#</a> 1.3 字符串位置</h3><h4 id="_1-3-1-indexof" tabindex="-1"><a class="header-anchor" href="#_1-3-1-indexof" aria-hidden="true">#</a> 1.3.1 indexOf</h4><h4 id="_1-3-2-lastindexof" tabindex="-1"><a class="header-anchor" href="#_1-3-2-lastindexof" aria-hidden="true">#</a> 1.3.2 lastIndexOf</h4><h3 id="_1-4-截取字符串" tabindex="-1"><a class="header-anchor" href="#_1-4-截取字符串" aria-hidden="true">#</a> 1.4 截取字符串</h3><h4 id="_1-4-1-substring-开始位置-结束位置" tabindex="-1"><a class="header-anchor" href="#_1-4-1-substring-开始位置-结束位置" aria-hidden="true">#</a> 1.4.1 substring(开始位置，[结束位置])</h4><h4 id="_1-4-2-substr-开始位置-字符数量" tabindex="-1"><a class="header-anchor" href="#_1-4-2-substr-开始位置-字符数量" aria-hidden="true">#</a> 1.4.2 substr(开始位置，[字符数量])</h4><h4 id="_1-4-3-slice-开始位置-结束位置" tabindex="-1"><a class="header-anchor" href="#_1-4-3-slice-开始位置-结束位置" aria-hidden="true">#</a> 1.4.3 slice(开始位置，[结束位置])</h4><h5 id="_1-负数位置⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#_1-负数位置⭐⭐⭐" aria-hidden="true">#</a> 1 负数位置⭐⭐⭐</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &quot;c&quot;</span>\n<span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// &quot;bc&quot;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_2-玩法-零补齐两位指数⭐⭐⭐" tabindex="-1"><a class="header-anchor" href="#_2-玩法-零补齐两位指数⭐⭐⭐" aria-hidden="true">#</a> 2 玩法：零补齐两位指数⭐⭐⭐</h5><blockquote><p>es6中提供了padStart方法</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hours <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">,</span> minutes <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> seconds <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\n<span class="token comment">// (&quot;0&quot;+minutes).slice(-2) 主要是转化为两位数，8-&gt;08</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> hours<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> minutes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> seconds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token comment">// 19::08::03</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_1-5-split-分割为数组s" tabindex="-1"><a class="header-anchor" href="#_1-5-split-分割为数组s" aria-hidden="true">#</a> 1.5 split 分割为数组s</h3><h4 id="_1-5-1-玩法-逆序字符串" tabindex="-1"><a class="header-anchor" href="#_1-5-1-玩法-逆序字符串" aria-hidden="true">#</a> 1.5.1 玩法：逆序字符串</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;cba&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_1-6-replaceall" tabindex="-1"><a class="header-anchor" href="#_1-6-replaceall" aria-hidden="true">#</a> 1.6 replaceAll</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;tmd,外卖还没到，真tmd!&quot;</span>\n<span class="token comment">// ***,外卖还没到，真***!</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;tmd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;***&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-6-1-玩法-实现上述效果不用replace" tabindex="-1"><a class="header-anchor" href="#_1-6-1-玩法-实现上述效果不用replace" aria-hidden="true">#</a> 1.6.1 玩法：实现上述效果不用replace</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;tmd,外卖还没到，真tmd!&quot;</span>\n<span class="token comment">//[&quot;&quot;, &quot;,外卖还没到，真&quot;, &quot;!&quot;]</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;tmd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;***&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-7-startswith" tabindex="-1"><a class="header-anchor" href="#_1-7-startswith" aria-hidden="true">#</a> 1.7 startsWith</h3><h3 id="_1-8-endswith" tabindex="-1"><a class="header-anchor" href="#_1-8-endswith" aria-hidden="true">#</a> 1.8 endsWith</h3><h3 id="_1-9-includes" tabindex="-1"><a class="header-anchor" href="#_1-9-includes" aria-hidden="true">#</a> 1.9 includes</h3><h4 id="_1-9-1-返回boolean" tabindex="-1"><a class="header-anchor" href="#_1-9-1-返回boolean" aria-hidden="true">#</a> 1.9.1 返回boolean</h4><h3 id="_1-10-padstart-位数-填充的字符" tabindex="-1"><a class="header-anchor" href="#_1-10-padstart-位数-填充的字符" aria-hidden="true">#</a> 1.10 padStart(位数,填充的字符)</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hours <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>\nhours<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;07&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_1-10-1-padend" tabindex="-1"><a class="header-anchor" href="#_1-10-1-padend" aria-hidden="true">#</a> 1.10.1 padEnd</h4><h3 id="_1-11-repeat重复字符串" tabindex="-1"><a class="header-anchor" href="#_1-11-repeat重复字符串" aria-hidden="true">#</a> 1.11 repeat重复字符串</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_2-模板字符串" tabindex="-1"><a class="header-anchor" href="#_2-模板字符串" aria-hidden="true">#</a> 2 模板字符串</h2><h3 id="_2-1-底层原理是通过正则匹配字符串" tabindex="-1"><a class="header-anchor" href="#_2-1-底层原理是通过正则匹配字符串" aria-hidden="true">#</a> 2.1 底层原理是通过正则匹配字符串</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span> school <span class="token operator">=</span> <span class="token string">&quot;CAU&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 模拟模板字符串</span>\n<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;My name is ${name},at ${school}!&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 匹配${任意字符}， 通过()单独拿出括号的内容</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\$\\{([^\\}]*)\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">eval</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// My name is Q10Viking,at CAU</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n<span class="token doc-comment comment">/** arguments\n [Arguments] <span class="token punctuation">{</span>\n  &#39;0&#39;: &#39;$<span class="token punctuation">{</span>name<span class="token punctuation">}</span>&#39;,\n  &#39;1&#39;: &#39;name&#39;,\n  &#39;2&#39;: 11,\n  &#39;3&#39;: &#39;My name is $<span class="token punctuation">{</span>name<span class="token punctuation">}</span>,at $<span class="token punctuation">{</span>school<span class="token punctuation">}</span>&#39;\n<span class="token punctuation">}</span>\n[Arguments] <span class="token punctuation">{</span>\n  &#39;0&#39;: &#39;$<span class="token punctuation">{</span>school<span class="token punctuation">}</span>&#39;,\n  &#39;1&#39;: &#39;school&#39;,\n  &#39;2&#39;: 22,\n  &#39;3&#39;: &#39;My name is $<span class="token punctuation">{</span>name<span class="token punctuation">}</span>,at $<span class="token punctuation">{</span>school<span class="token punctuation">}</span>&#39;\n<span class="token punctuation">}</span>\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="_2-2-玩法-快速拼接成有序列表" tabindex="-1"><a class="header-anchor" href="#_2-2-玩法-快速拼接成有序列表" aria-hidden="true">#</a> 2.2 玩法：快速拼接成有序列表</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hzz&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> lis <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;ul&gt;\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lis<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    &lt;/ul&gt;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n&lt;ul&gt;\n&lt;li&gt;Q10Viking&lt;/li&gt;&lt;li&gt;hzz&lt;/li&gt;\n&lt;/ul&gt;\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_2-3-玩法-web中content-type" tabindex="-1"><a class="header-anchor" href="#_2-3-玩法-web中content-type" aria-hidden="true">#</a> 2.3 玩法：web中content-type</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> type <span class="token operator">=</span> mime<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\nresponse<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n\t<span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;charset=utf-8</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-4-模板标签" tabindex="-1"><a class="header-anchor" href="#_2-4-模板标签" aria-hidden="true">#</a> 2.4 模板标签</h3><ol><li>提供了可以对模板字符操作的空间</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Q10Viking&quot;</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> tag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/** str\n0: &quot;My name is &quot;\n1: &quot;,and &quot;\n2: &quot; years old&quot;\n */</span>\n\n<span class="token doc-comment comment">/** arguments\n0: (3) [&quot;My name is &quot;, &quot;,and &quot;, &quot; years old&quot;, raw: Array(3)]\n1: &quot;Q10Viking&quot;\n2: 25\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',47),e={},p=(0,a(66262).A)(e,[["render",function(n,s){return t}]])},66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);