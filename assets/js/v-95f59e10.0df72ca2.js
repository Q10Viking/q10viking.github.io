"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[58468],{62466:(e,t,i)=>{i.r(t),i.d(t,{data:()=>r});const r={key:"v-95f59e10",path:"/springsecurity/02%20%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE%E7%9A%84%E6%B7%BB%E5%8A%A0.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/springsecurity/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"SpringBoot中内置tomcat集成spring security 过滤器链原理",slug:"springboot中内置tomcat集成spring-security-过滤器链原理",children:[]},{level:2,title:"Spring security 过滤器链生成及执行流程图",slug:"spring-security-过滤器链生成及执行流程图",children:[]}],filePathRelative:"springsecurity/02 过滤器链的添加.md"}},70573:(e,t,i)=>{i.r(t),i.d(t,{default:()=>u});var r=i(20641);const n=(0,r.Fv)('<h2 id="springboot中内置tomcat集成spring-security-过滤器链原理" tabindex="-1"><a class="header-anchor" href="#springboot中内置tomcat集成spring-security-过滤器链原理" aria-hidden="true">#</a> SpringBoot中内置tomcat集成spring security 过滤器链原理</h2><blockquote><p>Spring Security的过滤器链是什么时候，添加到内置tomcat的过滤器链中的。</p></blockquote><ol><li>自动配置类配置SecurityFilterAutoConfiguration，在容器中注入了DelegatingFilterProxyRegistrationBean</li><li>在内置tomcat启动时StandContext.start()会调用ServletContainerInitialize接口的onStartup方法，其中在创建tomcat时，向StandardContext中放入TomcatStarter它实现了这个接口</li><li>在TomcatStarter.onStartup方法时会调用ServletWebServerApplicationContext通过lambda实现的ServletContainerInitialize</li><li>然后取到ServletContainerInitialize类型的bean，这样就获取到之前注入到容器的DelegatingFilterProxyRegistrationBean的bean</li><li>然后调用DelegatingFilterProxyRegistrationBean的onStartup方法，实现Filter的注册</li><li>注册的Filter &quot;springSecurityFilterChain&quot;-----&gt;DelegatingFilterProxy</li></ol><p>https://www.processon.com/view/link/627944c97d9c08074fc39e7b</p>',4),a=(0,r.Lk)("iframe",{id:"embed_dom",name:"embed_dom",frameborder:"0",style:{display:"block",width:"525px",height:"245px"},src:"https://www.processon.com/embed/62792d8a0791290711054ba6"},null,-1),l=(0,r.Lk)("hr",null,null,-1),o=(0,r.Lk)("h2",{id:"spring-security-过滤器链生成及执行流程图",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#spring-security-过滤器链生成及执行流程图","aria-hidden":"true"},"#"),(0,r.eW)(" Spring security 过滤器链生成及执行流程图")],-1),s=(0,r.Lk)("p",null,"https://www.processon.com/view/link/62796dfc7d9c08074fc3b808",-1),c=(0,r.Lk)("iframe",{id:"embed_dom",name:"embed_dom",frameborder:"0",style:{display:"block",width:"525px",height:"245px"},src:"https://www.processon.com/embed/62794fe90e3e7413eec534c1"},null,-1),p=(0,r.Fv)('<p>tomcat启动之前添加了配置了context.</p><p>lambda表达式很巧，间接的转化了</p><p>DelegatingFilterProxyRegistrationBean</p><hr><p>构造方法能这样写？调用时只传入一个参数？</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>DelegatingFilterProxyRegistrationBean(String targetBeanName,\n\t\t\tServletRegistrationBean&lt;?&gt;... servletRegistrationBeans)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',6),g={},u=(0,i(66262).A)(g,[["render",function(e,t){return(0,r.uX)(),(0,r.CE)(r.FK,null,[n,a,l,o,s,c,p],64)}]])},66262:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,r]of t)i[e]=r;return i}}}]);