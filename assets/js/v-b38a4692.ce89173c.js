"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[15847],{91707:(l,a,s)=>{s.r(a),s.d(a,{data:()=>i});const i={key:"v-b38a4692",path:"/JVM/12%20class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/JVM/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"Class文件结构参考表",slug:"class文件结构参考表",children:[]},{level:2,title:"常量池项",slug:"常量池项",children:[]},{level:2,title:"访问标识符号",slug:"访问标识符号",children:[]},{level:2,title:"字段结构",slug:"字段结构",children:[]},{level:2,title:"⭐方法结构",slug:"⭐方法结构",children:[]}],filePathRelative:"JVM/12 class文件结构.md"}},56220:(l,a,s)=>{s.r(a),s.d(a,{default:()=>t});const i=(0,s(20641).Fv)('<h2 id="class文件结构参考表" tabindex="-1"><a class="header-anchor" href="#class文件结构参考表" aria-hidden="true">#</a> Class文件结构参考表</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>javap <span class="token parameter variable">-verbose</span> name.class\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><img src="/images/concurrency/10780.png" alt="img"><h2 id="常量池项" tabindex="-1"><a class="header-anchor" href="#常量池项" aria-hidden="true">#</a> 常量池项</h2><p>相当于类的资源仓库，池化的思想</p><img src="/images/jvm/class常量池类型分类.png" alt="class常量池类型分类" style="zoom:200%;"><ol><li><p>method_info</p></li><li><p>field_info</p></li><li><p>class_info</p></li><li><p>字面量（字符串）</p><ol><li>方法名</li><li>类型</li></ol></li><li><p>LineNumberTable(异常的时候，打印出来的行号，即字节码与源代码一一对应)</p></li><li><p>LocalVairableTable（局部变量表----在编译的时候就确定了）</p><ol><li>如在<code>this</code>就作为一个隐式的入参就传入到了局部变量表中</li></ol></li><li></li></ol><p><img src="/images/jvm/10896.png" alt="img"></p><p><strong>基本参数类型和void类型都是用一个大写的字符来表示，对象类型是通过一个大写L加全类名表示，这么做的好处就是在保证jvm能读懂class文件的情况下尽量的压缩class文件体积.</strong></p><p><strong>基本数据类型表示:</strong></p><p><strong>B----&gt;byte</strong></p><p><strong>C----&gt;char</strong></p><p><strong>D----&gt;double</strong></p><p><strong>F-----&gt;float</strong></p><p><strong>I------&gt;int</strong></p><p><strong>J------&gt;long</strong></p><p><strong>S------&gt;short</strong></p><p><strong>Z------&gt;boolean</strong></p><p><strong>V-------&gt;void</strong></p><p><strong>对象类型:</strong></p><p><strong>String------&gt;Ljava/lang/String;(后面有一个分号)</strong></p><p><strong>对于数组类型: 每一个唯独都是用一个前置 [ 来表示</strong></p><p><strong>比如:</strong> <strong>int[] ------&gt;[ I,</strong></p><p>​ <strong>String [][]------&gt;[[Ljava.lang.String;</strong></p><hr><h2 id="访问标识符号" tabindex="-1"><a class="header-anchor" href="#访问标识符号" aria-hidden="true">#</a> <strong>访问标识符号</strong></h2><p><img src="/images/jvm/10818.png" alt="img"></p><h2 id="字段结构" tabindex="-1"><a class="header-anchor" href="#字段结构" aria-hidden="true">#</a> 字段结构</h2><p><img src="/images/jvm/10851.png" alt="img"></p><h2 id="⭐方法结构" tabindex="-1"><a class="header-anchor" href="#⭐方法结构" aria-hidden="true">#</a> ⭐方法结构</h2><p><img src="/images/jvm/10855.png" alt="img"></p><p><img src="/images/jvm/image-20210614193146557.png" alt="image-20210614193146557"></p><ol><li>助记符aload_0</li><li>行号表LineNumberTable <ol><li>指令码的行数</li><li>源码的行数</li></ol></li><li>localVariableTable <ol><li>作用范围覆盖长度</li><li>索引指向</li></ol></li></ol>',33),e={},t=(0,s(66262).A)(e,[["render",function(l,a){return i}]])},66262:(l,a)=>{a.A=(l,a)=>{const s=l.__vccOpts||l;for(const[l,i]of a)s[l]=i;return s}}}]);