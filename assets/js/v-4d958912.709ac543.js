"use strict";(self.webpackChunkq10viking_github_io=self.webpackChunkq10viking_github_io||[]).push([[39738],{37528:(e,t,r)=>{r.r(t),r.d(t,{data:()=>o});const o={key:"v-4d958912",path:"/JVM/07%20%E6%8C%87%E9%92%88%E5%8E%8B%E7%BC%A9.html",title:"",lang:"zh-CN",frontmatter:{sidebarDepth:3,sidebar:"auto",prev:{text:"Back To 目录",link:"/JVM/"},"typora-root-url":"..\\.vuepress\\public"},excerpt:"",headers:[{level:2,title:"指针压缩",slug:"指针压缩",children:[]},{level:2,title:"为什么要进行指针压缩",slug:"为什么要进行指针压缩",children:[]}],filePathRelative:"JVM/07 指针压缩.md"}},17310:(e,t,r)=>{r.r(t),r.d(t,{default:()=>i});const o=(0,r(20641).Fv)('<h2 id="指针压缩" tabindex="-1"><a class="header-anchor" href="#指针压缩" aria-hidden="true">#</a> 指针压缩</h2><ol><li><p>jvm配置参数:UseCompressedOops，compressed--压缩、oop(ordinary object pointer)--对象指针</p></li><li><p>启用指针压缩:-XX:+UseCompressedOops(<strong>默认开启</strong>)，禁止指针压缩:-XX:-UseCompressedOops</p></li></ol><blockquote><p>对象头中的kclass pointer，以及属性中对象引用的指针地址也会被压缩。从8字节压缩到了4字节</p></blockquote><h2 id="为什么要进行指针压缩" tabindex="-1"><a class="header-anchor" href="#为什么要进行指针压缩" aria-hidden="true">#</a> 为什么要进行指针压缩</h2><ol><li><p>在64位平台的HotSpot中使用32位指针(实际存储用64位)，内存使用会多出1.5倍左右，使用较大指针在主内存和缓存之间移动数据，<strong>占用较大宽带，同时GC也会承受较大压力</strong>(节约内存)</p></li><li><p>在jvm中，32位地址最大支持4G内存(2的32次方)，可以通过对对象指针的存入<strong>堆内存</strong>时压缩编码、取出到<strong>cpu寄存器</strong>后解码方式进行优化(对象指针在堆中是32位，在寄存器中是35位，2的35次方=32G)，使得jvm只用32位地址就可以支持更大的内存配置(小于等于32G)</p></li></ol>',5),s={},i=(0,r(66262).A)(s,[["render",function(e,t){return o}]])},66262:(e,t)=>{t.A=(e,t)=>{const r=e.__vccOpts||e;for(const[e,o]of t)r[e]=o;return r}}}]);